openapi: 3.0.0
info:
  description: This describes the dockstore API, a webservice that manages pairs of Docker
    images and associated metadata such as CWL documents and Dockerfiles used to
    build those images
  version: 1.6.0-beta.4-SNAPSHOT
  title: Dockstore API
  termsOfService: TBD
  contact:
    name: Dockstore@ga4gh
    url: https://github.com/ga4gh/dockstore
    email: theglobalalliance@genomicsandhealth.org
  license:
    name: Apache License Version 2.0
    url: https://github.com/ga4gh/dockstore/blob/develop/LICENSE
tags:
  - name: GA4GH
    description: A curated subset of resources proposed as a common standard for tool
      repositories. Implements TRS
      [2.0.0-beta.2](https://github.com/ga4gh/tool-registry-service-schemas/releases/tag/2.0.0-beta.2)
      . Integrators are welcome to use these endpoints but they are subject to
      change based on community input.
  - name: NIHdatacommons
  - name: GA4GHV1
    description: A curated subset of resources proposed as a common standard for tool
      repositories. Implements TRS
      [1.0.0](https://github.com/ga4gh/tool-registry-service-schemas/releases/tag/1.0.0)
      and is considered final (not subject to change)
  - name: containers
    description: List and register entries in the dockstore (pairs of images + metadata
      (CWL and Dockerfile))
  - name: containertags
    description: List and modify tags for containers
  - name: entries
    description: Interact with entries in Dockstore regardless of whether they are
      containers or workflows
  - name: extendedGA4GH
    description: Optional experimental extensions of the GA4GH API
  - name: hosted
    description: Created and modify hosted entries in the dockstore
  - name: metadata
    description: Information about Dockstore like RSS, sitemap, lists of dependencies, etc.
  - name: organizations
  - name: tokens
    description: List, modify, refresh, and delete tokens for external services
  - name: users
    description: List, modify, and manage end users of the dockstore
  - name: workflows
    description: List and register workflows in the dockstore (CWL or WDL)
paths:
  /api/ga4gh/v1/metadata:
    get:
      tags:
        - GA4GHV1
      summary: Return some metadata that is useful for describing this registry
      description: Return some metadata that is useful for describing this registry
      operationId: metadataGet
      responses:
        "200":
          description: A Metadata object describing this service.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataV1"
            text/plain:
              schema:
                $ref: "#/components/schemas/MetadataV1"
  /api/ga4gh/v1/tool-classes:
    get:
      tags:
        - GA4GHV1
      summary: List all tool types
      description: "This endpoint returns all tool-classes available "
      operationId: toolClassesGet
      responses:
        "200":
          description: An array of methods that match the filter.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolClass"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolClass"
  /api/ga4gh/v1/tools:
    get:
      tags:
        - GA4GHV1
      summary: List all tools
      description: "This endpoint returns all tools available or a filtered subset using
        metadata query parameters. "
      operationId: toolsGet
      parameters:
        - name: id
          in: query
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`
          required: false
          schema:
            type: string
        - name: registry
          in: query
          description: The image registry that contains the image.
          required: false
          schema:
            type: string
        - name: organization
          in: query
          description: The organization in the registry that published the image.
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: The name of the image.
          required: false
          schema:
            type: string
        - name: toolname
          in: query
          description: The name of the tool.
          required: false
          schema:
            type: string
        - name: description
          in: query
          description: The description of the tool.
          required: false
          schema:
            type: string
        - name: author
          in: query
          description: The author of the tool (TODO a thought occurs, are we assuming that
            the author of the CWL and the image are the same?).
          required: false
          schema:
            type: string
        - name: offset
          in: query
          description: Start index of paging. Pagination results can be based on numbers or
            other values chosen by the registry implementor (for example, SHA
            values). If this exceeds the current result set return an empty
            set.  If not specified in the request this will start at the
            beginning of the results.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Amount of records to return in a given page.  By default it is 1000.
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: An array of Tools that match the filter.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolV1"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolV1"
  "/api/ga4gh/v1/tools/{id}":
    get:
      tags:
        - GA4GHV1
      summary: List one specific tool, acts as an anchor for self references
      description: This endpoint returns one specific tool (which has ToolVersions nested
        inside it)
      operationId: toolsIdGet
      parameters:
        - name: id
          in: path
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A tool.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ToolV1"
            text/plain:
              schema:
                $ref: "#/components/schemas/ToolV1"
  "/api/ga4gh/v1/tools/{id}/versions":
    get:
      tags:
        - GA4GHV1
      summary: List versions of a tool
      description: Returns all versions of the specified tool
      operationId: toolsIdVersionsGet
      parameters:
        - name: id
          in: path
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`
          required: true
          schema:
            type: string
      responses:
        "200":
          description: An array of tool versions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolVersionV1"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolVersionV1"
  "/api/ga4gh/v1/tools/{id}/versions/{version_id}":
    get:
      tags:
        - GA4GHV1
      summary: List one specific tool version, acts as an anchor for self references
      description: This endpoint returns one specific tool version
      operationId: toolsIdVersionsVersionIdGet
      parameters:
        - name: id
          in: path
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`
          required: true
          schema:
            type: string
        - name: version_id
          in: path
          description: An identifier of the tool version, scoped to this registry, for
            example `v1`
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A tool version.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ToolVersionV1"
            text/plain:
              schema:
                $ref: "#/components/schemas/ToolVersionV1"
  "/api/ga4gh/v1/tools/{id}/versions/{version_id}/dockerfile":
    get:
      tags:
        - GA4GHV1
      summary: Get the dockerfile for the specified image.
      description: Returns the dockerfile for the specified image.
      operationId: toolsIdVersionsVersionIdDockerfileGet
      parameters:
        - name: id
          in: path
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`
          required: true
          schema:
            type: string
        - name: version_id
          in: path
          description: An identifier of the tool version for this particular tool registry,
            for example `v1`
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The tool payload.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ToolDockerfile"
            text/plain:
              schema:
                $ref: "#/components/schemas/ToolDockerfile"
        "404":
          description: The tool payload is not present in the service.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ToolDockerfile"
            text/plain:
              schema:
                $ref: "#/components/schemas/ToolDockerfile"
  "/api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/descriptor":
    get:
      tags:
        - GA4GHV1
      summary: Get the tool descriptor (CWL/WDL) for the specified tool.
      description: Returns the CWL or WDL descriptor for the specified tool.
      operationId: toolsIdVersionsVersionIdTypeDescriptorGet
      parameters:
        - name: type
          in: path
          description: The output type of the descriptor. If not specified it is up to the
            underlying implementation to determine which output type to return.
            Plain types return the bare descriptor while the "non-plain" types
            return a descriptor wrapped with metadata
          required: true
          schema:
            type: string
            enum:
              - CWL
              - WDL
              - PLAIN_CWL
              - PLAIN_WDL
        - name: id
          in: path
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`
          required: true
          schema:
            type: string
        - name: version_id
          in: path
          description: An identifier of the tool version for this particular tool registry,
            for example `v1`
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The tool descriptor.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ToolDescriptor"
            text/plain:
              schema:
                $ref: "#/components/schemas/ToolDescriptor"
        "404":
          description: The tool can not be output in the specified type.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ToolDescriptor"
            text/plain:
              schema:
                $ref: "#/components/schemas/ToolDescriptor"
  "/api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}":
    get:
      tags:
        - GA4GHV1
      summary: Get additional tool descriptor files (CWL/WDL) relative to the main file
      description: Returns additional CWL or WDL descriptors for the specified tool in the
        same or subdirectories
      operationId: toolsIdVersionsVersionIdTypeDescriptorRelativePathGet
      parameters:
        - name: type
          in: path
          description: The output type of the descriptor. If not specified it is up to the
            underlying implementation to determine which output type to
            return.  Plain types return the bare descriptor while the
            "non-plain" types return a descriptor wrapped with metadata
          required: true
          schema:
            type: string
            enum:
              - CWL
              - WDL
              - PLAIN_CWL
              - PLAIN_WDL
        - name: id
          in: path
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`
          required: true
          schema:
            type: string
        - name: version_id
          in: path
          description: An identifier of the tool version for this particular tool registry,
            for example `v1`
          required: true
          schema:
            type: string
        - name: relative_path
          in: path
          description: A relative path to the additional file (same directory or
            subdirectories), for example 'foo.cwl' would return a 'foo.cwl' from
            the same directory as the main descriptor
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The tool descriptor.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ToolDescriptor"
            text/plain:
              schema:
                $ref: "#/components/schemas/ToolDescriptor"
        "404":
          description: The tool can not be output in the specified type.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ToolDescriptor"
            text/plain:
              schema:
                $ref: "#/components/schemas/ToolDescriptor"
  "/api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/tests":
    get:
      tags:
        - GA4GHV1
      summary: Get an array of test JSONs suitable for use with this descriptor type.
      description: ""
      operationId: toolsIdVersionsVersionIdTypeTestsGet
      parameters:
        - name: type
          in: path
          description: The output type of the descriptor. If not specified it is up to the
            underlying implementation to determine which output type to return.
            Plain types return the bare descriptor while the "non-plain" types
            return a descriptor wrapped with metadata
          required: true
          schema:
            type: string
            enum:
              - CWL
              - WDL
              - PLAIN_CWL
              - PLAIN_WDL
        - name: id
          in: path
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`
          required: true
          schema:
            type: string
        - name: version_id
          in: path
          description: An identifier of the tool version for this particular tool registry,
            for example `v1`
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The tool test JSON response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolTestsV1"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolTestsV1"
        "404":
          description: The tool can not be output in the specified type.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolTestsV1"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolTestsV1"
  "/api/ga4gh/v2/extended/containers/{organization}":
    get:
      tags:
        - extendedGA4GH
      summary: List entries of an organization
      description: "This endpoint returns entries of an organization. "
      operationId: entriesOrgGet
      parameters:
        - name: organization
          in: path
          description: An organization, for example `cancercollaboratory`
          required: true
          schema:
            type: string
      responses:
        "200":
          description: An array of Tools of the input organization.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolV1"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolV1"
  /api/ga4gh/v2/extended/organizations:
    get:
      tags:
        - extendedGA4GH
      summary: List all organizations
      description: "This endpoint returns list of all organizations. "
      operationId: entriesOrgGet
      responses:
        "200":
          description: An array of organizations' names.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/plain:
              schema:
                type: array
                items:
                  type: string
  /api/ga4gh/v2/extended/tools/entry/_search:
    post:
      tags:
        - extendedGA4GH
      summary: Search the index of tools
      description: This endpoint searches the index for all published tools and workflows.
        Used by utilities that expect to talk to an elastic search endpoint
      operationId: toolsIndexSearch
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: elastic search query
        required: true
      responses:
        "200":
          description: An elastic search result.
          content:
            application/json:
              schema:
                type: string
  /api/ga4gh/v2/extended/tools/index:
    post:
      tags:
        - extendedGA4GH
      summary: Update the index of tools
      description: "This endpoint updates the index for all published tools and workflows. "
      operationId: toolsIndexGet
      responses:
        "200":
          description: An array of Tools of the input organization.
      security:
        - BEARER:
            []
  "/api/ga4gh/v2/extended/tools/{organization}":
    get:
      tags:
        - extendedGA4GH
      summary: List tools of an organization
      description: "This endpoint returns tools of an organization. "
      operationId: toolsOrgGet
      parameters:
        - name: organization
          in: path
          description: An organization, for example `cancercollaboratory`
          required: true
          schema:
            type: string
      responses:
        "200":
          description: An array of Tools of the input organization.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolV1"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolV1"
  "/api/ga4gh/v2/extended/workflows/{organization}":
    get:
      tags:
        - extendedGA4GH
      summary: List workflows of an organization
      description: "This endpoint returns workflows of an organization. "
      operationId: workflowsOrgGet
      parameters:
        - name: organization
          in: path
          description: An organization, for example `cancercollaboratory`
          required: true
          schema:
            type: string
      responses:
        "200":
          description: An array of Tools of the input organization.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolV1"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolV1"
  "/api/ga4gh/v2/extended/{id}/versions/{version_id}/{type}/tests/{relative_path}":
    post:
      tags:
        - extendedGA4GH
      summary: Annotate test JSON with information on whether it ran successfully on
        particular platforms plus metadata
      description: "Test JSON can be annotated with whether they ran correctly keyed by
        platform and associated with some metadata "
      operationId: toolsIdVersionsVersionIdTypeTestsPost
      parameters:
        - name: type
          in: path
          description: The type of the underlying descriptor. Allowable values include
            "CWL", "WDL", "NFL".
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`
          required: true
          schema:
            type: string
        - name: version_id
          in: path
          description: An identifier of the tool version for this particular tool registry,
            for example `v1`
          required: true
          schema:
            type: string
        - name: relative_path
          in: path
          description: A relative path to the test json as retrieved from the files
            endpoint or the tests endpoint
          required: true
          schema:
            type: string
            pattern: .+
        - name: platform
          in: query
          description: Platform to report on
          required: true
          schema:
            type: string
        - name: platform_version
          in: query
          description: Version of the platform to report on
          required: true
          schema:
            type: string
        - name: verified
          in: query
          description: Verification status, omit to delete key
          required: false
          schema:
            type: boolean
        - name: metadata
          in: query
          description: Additional information on the verification (notes, explanation)
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The tool test JSON response.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
        "401":
          description: Credentials not provided or incorrect
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: The tool test cannot be found to annotate.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - BEARER:
            []
  /api/ga4gh/v2/metadata:
    get:
      tags:
        - GA4GH
      summary: Return some metadata that is useful for describing this registry
      description: Return some metadata that is useful for describing this registry
      operationId: metadataGet
      responses:
        "200":
          description: A Metadata object describing this service.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Metadata"
            text/plain:
              schema:
                $ref: "#/components/schemas/Metadata"
  /api/ga4gh/v2/toolClasses:
    get:
      tags:
        - GA4GH
      summary: List all tool types
      description: "This endpoint returns all tool-classes available "
      operationId: toolClassesGet
      responses:
        "200":
          description: A list of potential tool classes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolClass"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolClass"
  /api/ga4gh/v2/tools:
    get:
      tags:
        - GA4GH
      summary: List all tools
      description: "This endpoint returns all tools available or a filtered subset using
        metadata query parameters. "
      operationId: toolsGet
      parameters:
        - name: id
          in: query
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`
          required: false
          schema:
            type: string
        - name: alias
          in: query
          description: OPTIONAL for tool registries that support aliases. If provided will
            only return entries with the given alias.
          required: false
          schema:
            type: string
        - name: registry
          in: query
          description: The image registry that contains the image.
          required: false
          schema:
            type: string
        - name: organization
          in: query
          description: The organization in the registry that published the image.
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: The name of the image.
          required: false
          schema:
            type: string
        - name: toolname
          in: query
          description: The name of the tool.
          required: false
          schema:
            type: string
        - name: description
          in: query
          description: The description of the tool.
          required: false
          schema:
            type: string
        - name: author
          in: query
          description: The author of the tool (TODO a thought occurs, are we assuming that
            the author of the CWL and the image are the same?).
          required: false
          schema:
            type: string
        - name: checker
          in: query
          description: Return only checker workflows
          required: false
          schema:
            type: boolean
        - name: offset
          in: query
          description: Start index of paging. Pagination results can be based on numbers or
            other values chosen by the registry implementor (for example, SHA
            values). If this exceeds the current result set return an empty
            set.  If not specified in the request, this will start at the
            beginning of the results.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Amount of records to return in a given page.
          required: false
          schema:
            type: integer
            format: int32
            default: 1000
      responses:
        "200":
          description: An array of Tools that match the filter.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tool"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tool"
  "/api/ga4gh/v2/tools/{id}":
    get:
      tags:
        - GA4GH
      summary: List one specific tool, acts as an anchor for self references
      description: This endpoint returns one specific tool (which has ToolVersions nested
        inside it)
      operationId: toolsIdGet
      parameters:
        - name: id
          in: path
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A tool.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tool"
            text/plain:
              schema:
                $ref: "#/components/schemas/Tool"
        "404":
          description: The tool can not be found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
  "/api/ga4gh/v2/tools/{id}/versions":
    get:
      tags:
        - GA4GH
      summary: List versions of a tool
      description: Returns all versions of the specified tool
      operationId: toolsIdVersionsGet
      parameters:
        - name: id
          in: path
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`
          required: true
          schema:
            type: string
      responses:
        "200":
          description: An array of tool versions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolVersion"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolVersion"
  "/api/ga4gh/v2/tools/{id}/versions/{version_id}":
    get:
      tags:
        - GA4GH
      summary: List one specific tool version, acts as an anchor for self references
      description: This endpoint returns one specific tool version
      operationId: toolsIdVersionsVersionIdGet
      parameters:
        - name: id
          in: path
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`
          required: true
          schema:
            type: string
        - name: version_id
          in: path
          description: An identifier of the tool version, scoped to this registry, for
            example `v1`
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A tool version.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ToolVersion"
            text/plain:
              schema:
                $ref: "#/components/schemas/ToolVersion"
        "404":
          description: The tool can not be found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
  "/api/ga4gh/v2/tools/{id}/versions/{version_id}/containerfile":
    get:
      tags:
        - GA4GH
      summary: Get the container specification(s) for the specified image.
      description: Returns the container specifications(s) for the specified image. For
        example, a CWL CommandlineTool can be associated with one specification
        for a container, a CWL Workflow can be associated with multiple
        specifications for containers
      operationId: toolsIdVersionsVersionIdContainerfileGet
      parameters:
        - name: id
          in: path
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`
          required: true
          schema:
            type: string
        - name: version_id
          in: path
          description: An identifier of the tool version for this particular tool registry,
            for example `v1`
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The tool payload.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FileWrapper"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FileWrapper"
        "404":
          description: There are no container specifications for this tool
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
  "/api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/descriptor":
    get:
      tags:
        - GA4GH
      summary: Get the tool descriptor for the specified tool
      description: Returns the descriptor for the specified tool (examples include CWL,
        WDL, or Nextflow documents).
      operationId: toolsIdVersionsVersionIdTypeDescriptorGet
      parameters:
        - name: type
          in: path
          description: The output type of the descriptor. If not specified, it is up to the
            underlying implementation to determine which output type to return.
            Plain types return the bare descriptor while the "non-plain" types
            return a descriptor wrapped with metadata. Allowable values include
            "CWL", "WDL", "NFL", "PLAIN_CWL", "PLAIN_WDL", "PLAIN_NFL".
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`
          required: true
          schema:
            type: string
        - name: version_id
          in: path
          description: An identifier of the tool version, scoped to this registry, for
            example `v1`
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The tool descriptor.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileWrapper"
            text/plain:
              schema:
                $ref: "#/components/schemas/FileWrapper"
        "404":
          description: The tool descriptor can not be found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
  "/api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}":
    get:
      tags:
        - GA4GH
      summary: Get additional tool descriptor files relative to the main file
      description: "Descriptors can often include imports that refer to additional
        descriptors. This returns additional descriptors for the specified tool
        in the same or other directories that can be reached as a relative path.
        This endpoint can be useful for workflow engine implementations like
        cwltool to programmatically download all the descriptors for a tool and
        run it. This can optionally include other files described with
        FileWrappers such as test parameters and containerfiles. "
      operationId: toolsIdVersionsVersionIdTypeDescriptorRelativePathGet
      parameters:
        - name: type
          in: path
          description: The output type of the descriptor. If not specified, it is up to the
            underlying implementation to determine which output type to return.
            Plain types return the bare descriptor while the "non-plain" types
            return a descriptor wrapped with metadata. Allowable values are
            "CWL", "WDL", "NFL", "PLAIN_CWL", "PLAIN_WDL", "PLAIN_NFL".
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`
          required: true
          schema:
            type: string
        - name: version_id
          in: path
          description: An identifier of the tool version for this particular tool registry,
            for example `v1`
          required: true
          schema:
            type: string
        - name: relative_path
          in: path
          description: A relative path to the additional file (same directory or
            subdirectories), for example 'foo.cwl' would return a 'foo.cwl' from
            the same directory as the main descriptor. 'nestedDirectory/foo.cwl'
            would return the file  from a nested subdirectory.  Unencoded paths
            such 'sampleDirectory/foo.cwl' should also be allowed
          required: true
          schema:
            type: string
            pattern: .+
      responses:
        "200":
          description: The tool descriptor.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileWrapper"
            text/plain:
              schema:
                $ref: "#/components/schemas/FileWrapper"
        "404":
          description: The tool can not be output in the specified type.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
  "/api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/files":
    get:
      tags:
        - GA4GH
      summary: Get a list of objects that contain the relative path and file type
      description: "Get a list of objects that contain the relative path and file type. The
        descriptors are intended for use with the
        /tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path : .+}
        endpoint."
      operationId: toolsIdVersionsVersionIdTypeFilesGet
      parameters:
        - name: type
          in: path
          description: The output type of the descriptor. Examples of allowable values are
            "CWL", "WDL", and "NextFlow."
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`
          required: true
          schema:
            type: string
        - name: version_id
          in: path
          description: An identifier of the tool version for this particular tool registry,
            for example `v1`
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The array of File JSON responses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolFile"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolFile"
        "404":
          description: The tool can not be output in the specified type.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
  "/api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/tests":
    get:
      tags:
        - GA4GH
      summary: Get a list of test JSONs
      description: Get a list of test JSONs (these allow you to execute the tool
        successfully) suitable for use with this descriptor type.
      operationId: toolsIdVersionsVersionIdTypeTestsGet
      parameters:
        - name: type
          in: path
          description: 'The type of the underlying descriptor. Allowable values include
            "CWL", "WDL", "NFL", "PLAIN_CWL", "PLAIN_WDL", "PLAIN_NFL". For
            example, "CWL" would return an list of ToolTests objects while
            "PLAIN_CWL" would return a bare JSON list with the content of the
            tests. '
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`
          required: true
          schema:
            type: string
        - name: version_id
          in: path
          description: An identifier of the tool version for this particular tool registry,
            for example `v1`
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The tool test JSON response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FileWrapper"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FileWrapper"
        "404":
          description: The tool can not be output in the specified type.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/tokens/bitbucket.org:
    get:
      tags:
        - tokens
      summary: Add a new bitbucket.org token, used by quay.io redirect.
      description: This is used as part of the OAuth 2 web flow. Once a user has approved
        permissions for CollaboratoryTheir browser will load the redirect URI
        which should resolve here
      operationId: addBitbucketToken
      parameters:
        - name: code
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
      security:
        - BEARER:
            []
  /auth/tokens/github:
    post:
      tags:
        - tokens
      summary: Allow satellizer to post a new GitHub token to dockstore, used by login,
        can create new users.
      description: A post method is required by saetillizer to send the GitHub token
      operationId: addToken
      requestBody:
        $ref: "#/components/requestBodies/addTokenBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
      security:
        - BEARER:
            []
  /auth/tokens/github.com:
    get:
      tags:
        - tokens
      summary: Add a new github.com token, used by accounts page.
      description: This is used as part of the OAuth 2 web flow. Once a user has approved
        permissions for CollaboratoryTheir browser will load the redirect URI
        which should resolve here
      operationId: addGithubToken
      parameters:
        - name: code
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
      security:
        - BEARER:
            []
  /auth/tokens/gitlab.com:
    get:
      tags:
        - tokens
      summary: Add a new gitlab.com token.
      description: This is used as part of the OAuth 2 web flow. Once a user has approved
        permissions for CollaboratoryTheir browser will load the redirect URI
        which should resolve here
      operationId: addGitlabToken
      parameters:
        - name: code
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
      security:
        - BEARER:
            []
  /auth/tokens/google:
    post:
      tags:
        - tokens
      summary: Allow satellizer to post a new Google token to Dockstore.
      description: A post method is required by satellizer to send the Google token
      operationId: addGoogleToken
      requestBody:
        $ref: "#/components/requestBodies/addTokenBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
      security:
        - BEARER:
            []
  /auth/tokens/quay.io:
    get:
      tags:
        - tokens
      summary: Add a new quay IO token.
      description: This is used as part of the OAuth 2 web flow. Once a user has approved
        permissions for CollaboratoryTheir browser will load the redirect URI
        which should resolve here
      operationId: addQuayToken
      parameters:
        - name: access_token
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
      security:
        - BEARER:
            []
  "/auth/tokens/{tokenId}":
    get:
      tags:
        - tokens
      summary: Get a specific token by id.
      description: ""
      operationId: listToken
      parameters:
        - name: tokenId
          in: path
          description: ID of token to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "400":
          description: Invalid ID supplied
        "404":
          description: Token not found
      security:
        - BEARER:
            []
    delete:
      tags:
        - tokens
      summary: Delete a token.
      description: ""
      operationId: deleteToken
      parameters:
        - name: tokenId
          in: path
          description: Token id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid token value
      security:
        - BEARER:
            []
  /containers/dockerRegistryList:
    get:
      tags:
        - containers
      summary: Get the list of docker registries supported on Dockstore.
      description: Does not need authentication
      operationId: getDockerRegistries
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RegistryBean"
  /containers/hostedEntry:
    post:
      tags:
        - hosted
      summary: Create a hosted tool.
      description: ""
      operationId: createHostedTool
      parameters:
        - name: registry
          in: query
          description: The Docker registry (Tools only)
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: The repository name
          required: true
          schema:
            type: string
        - name: descriptorType
          in: query
          description: The descriptor type (Workflows only)
          required: false
          schema:
            type: string
        - name: namespace
          in: query
          description: The Docker namespace (Tools only)
          required: false
          schema:
            type: string
        - name: entryName
          in: query
          description: Optional entry name (Tools only)
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DockstoreTool"
      security:
        - BEARER:
            []
  "/containers/hostedEntry/{entryId}":
    delete:
      tags:
        - hosted
      summary: Delete a revision of a hosted tool.
      description: ""
      operationId: deleteHostedToolVersion
      parameters:
        - name: entryId
          in: path
          description: Entry to modify.
          required: true
          schema:
            type: integer
            format: int64
        - name: version
          in: query
          description: version
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DockstoreTool"
      security:
        - BEARER:
            []
    patch:
      tags:
        - hosted
      summary: Non-idempotent operation for creating new revisions of hosted tools.
      description: ""
      operationId: editHostedTool
      parameters:
        - name: entryId
          in: path
          description: Entry to modify.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/SourceFileArray"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DockstoreTool"
      security:
        - BEARER:
            []
  "/containers/namespace/{namespace}/published":
    get:
      tags:
        - containers
      summary: List all published tools belonging to the specified namespace.
      description: NO authentication
      operationId: getPublishedContainersByNamespace
      parameters:
        - name: namespace
          in: path
          description: namespace
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DockstoreTool"
  "/containers/path/tool/{repository}":
    get:
      tags:
        - containers
      summary: Get a tool by the specific tool path
      description: Requires full path (including tool name if applicable).
      operationId: getContainerByToolPath
      parameters:
        - name: repository
          in: path
          description: repository path
          required: true
          schema:
            type: string
        - name: include
          in: query
          description: "Comma-delimited list of fields to include: validations"
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DockstoreTool"
      security:
        - BEARER:
            []
  "/containers/path/tool/{repository}/published":
    get:
      tags:
        - containers
      summary: Get a published tool by the specific tool path.
      description: Requires full path (including tool name if applicable).
      operationId: getPublishedContainerByToolPath
      parameters:
        - name: repository
          in: path
          description: repository path
          required: true
          schema:
            type: string
        - name: include
          in: query
          description: "Comma-delimited list of fields to include: validations"
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DockstoreTool"
  "/containers/path/{containerId}/tags":
    get:
      tags:
        - containertags
      summary: Get tags for a tool by id.
      description: ""
      operationId: getTagsByPath
      parameters:
        - name: containerId
          in: path
          description: Tool to modify.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                uniqueItems: true
                items:
                  $ref: "#/components/schemas/Tag"
      security:
        - BEARER:
            []
  "/containers/path/{repository}":
    get:
      tags:
        - containers
      summary: Get a list of tools by path.
      description: Does not require tool name.
      operationId: getContainerByPath
      parameters:
        - name: repository
          in: path
          description: repository path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DockstoreTool"
      security:
        - BEARER:
            []
  "/containers/path/{repository}/published":
    get:
      tags:
        - containers
      summary: Get a list of published tools by path.
      description: NO authentication
      operationId: getPublishedContainerByPath
      parameters:
        - name: repository
          in: path
          description: repository path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DockstoreTool"
  /containers/published:
    get:
      tags:
        - containers
      summary: List all published tools.
      description: NO authentication
      operationId: allPublishedContainers
      parameters:
        - name: offset
          in: query
          description: Start index of paging. Pagination results can be based on numbers or
            other values chosen by the registry implementor (for example, SHA
            values). If this exceeds the current result set return an empty
            set.  If not specified in the request, this will start at the
            beginning of the results.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Amount of records to return in a given page, limited to 100
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 100
        - name: filter
          in: query
          description: Filter, this is a search string that filters the results.
          required: false
          schema:
            type: string
        - name: sortCol
          in: query
          description: Sort column
          required: false
          schema:
            type: string
            default: stars
        - name: sortOrder
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DockstoreTool"
  "/containers/published/{containerId}":
    get:
      tags:
        - containers
      summary: Get a published tool.
      description: NO authentication
      operationId: getPublishedContainer
      parameters:
        - name: containerId
          in: path
          description: Tool ID
          required: true
          schema:
            type: integer
            format: int64
        - name: include
          in: query
          description: "Comma-delimited list of fields to include: validations"
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DockstoreTool"
  /containers/registerManual:
    post:
      tags:
        - containers
      summary: Register a tool manually, along with tags.
      description: ""
      operationId: registerManual
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DockstoreTool"
        description: Tool to be registered
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DockstoreTool"
      security:
        - BEARER:
            []
  "/containers/schema/{containerId}/published":
    get:
      tags:
        - containers
      summary: Get a published tool's schema by ID.
      description: NO authentication
      operationId: getPublishedContainerSchema
      parameters:
        - name: containerId
          in: path
          description: Tool ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    type: object
  "/containers/{containerId}":
    get:
      tags:
        - containers
      summary: Retrieve a tool.
      description: This is one of the few endpoints that returns the user object with
        populated properties (minus the userProfiles property)
      operationId: getContainer
      parameters:
        - name: containerId
          in: path
          description: Tool ID
          required: true
          schema:
            type: integer
            format: int64
        - name: include
          in: query
          description: "Comma-delimited list of fields to include: validations"
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DockstoreTool"
      security:
        - BEARER:
            []
    put:
      tags:
        - containers
      summary: Update the tool with the given tool.
      description: Updates default descriptor paths, default Docker paths, default test
        parameter paths, git url, and default version. Also updates tool
        maintainer email, and private access for manual tools.
      operationId: updateContainer
      parameters:
        - name: containerId
          in: path
          description: Tool to modify.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/DockstoreTool"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DockstoreTool"
      security:
        - BEARER:
            []
    delete:
      tags:
        - containers
      summary: Delete a tool.
      description: ""
      operationId: deleteContainer
      parameters:
        - name: containerId
          in: path
          description: Tool id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: "Invalid "
      security:
        - BEARER:
            []
  "/containers/{containerId}/cwl":
    get:
      tags:
        - containers
      summary: Get the primary CWL descriptor file on Github.
      description: Does not require authentication for published tools, authentication can
        be provided for restricted tools
      operationId: cwl
      parameters:
        - name: containerId
          in: path
          description: Tool id
          required: true
          schema:
            type: integer
            format: int64
        - name: tag
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceFile"
      security:
        - BEARER:
            []
  "/containers/{containerId}/cwl/{relative-path}":
    get:
      tags:
        - containers
      summary: Get the corresponding CWL descriptor file on Github.
      description: Does not require authentication for published tools, authentication can
        be provided for restricted tools
      operationId: secondaryCwlPath
      parameters:
        - name: containerId
          in: path
          description: Tool id
          required: true
          schema:
            type: integer
            format: int64
        - name: tag
          in: query
          required: false
          schema:
            type: string
        - name: relative-path
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceFile"
      security:
        - BEARER:
            []
  "/containers/{containerId}/dockerfile":
    get:
      tags:
        - containers
      summary: Get the corresponding Dockerfile on Github.
      description: Does not require authentication for published tools, authentication can
        be provided for restricted tools
      operationId: dockerfile
      parameters:
        - name: containerId
          in: path
          description: Tool id
          required: true
          schema:
            type: integer
            format: int64
        - name: tag
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceFile"
      security:
        - BEARER:
            []
  "/containers/{containerId}/labels":
    put:
      tags:
        - containers
      summary: Update the labels linked to a tool.
      description: Labels are alphanumerical (case-insensitive and may contain internal
        hyphens), given in a comma-delimited list.
      operationId: updateLabels
      parameters:
        - name: containerId
          in: path
          description: Tool to modify.
          required: true
          schema:
            type: integer
            format: int64
        - name: labels
          in: query
          description: Comma-delimited list of labels.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/updateLabelsBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DockstoreTool"
      security:
        - BEARER:
            []
  "/containers/{containerId}/publish":
    post:
      tags:
        - containers
      summary: Publish or unpublish a tool.
      description: ""
      operationId: publish
      parameters:
        - name: containerId
          in: path
          description: Tool id to publish
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/PublishRequest"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DockstoreTool"
      security:
        - BEARER:
            []
  "/containers/{containerId}/refresh":
    get:
      tags:
        - containers
      summary: Refresh one particular tool.
      description: ""
      operationId: refresh
      parameters:
        - name: containerId
          in: path
          description: Tool ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DockstoreTool"
      security:
        - BEARER:
            []
  "/containers/{containerId}/requestDOI/{tagId}":
    post:
      tags:
        - containertags
      summary: Request a DOI for this version of a tool.
      description: ""
      operationId: requestDOIForToolTag
      parameters:
        - name: containerId
          in: path
          description: Tool to modify.
          required: true
          schema:
            type: integer
            format: int64
        - name: tagId
          in: path
          description: Tag to verify.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
      security:
        - BEARER:
            []
  "/containers/{containerId}/secondaryCwl":
    get:
      tags:
        - containers
      summary: Get a list of secondary CWL files from Git.
      description: Does not require authentication for published tools, authentication can
        be provided for restricted tools
      operationId: secondaryCwl
      parameters:
        - name: containerId
          in: path
          description: Tool id
          required: true
          schema:
            type: integer
            format: int64
        - name: tag
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SourceFile"
      security:
        - BEARER:
            []
  "/containers/{containerId}/secondaryWdl":
    get:
      tags:
        - containers
      summary: Get a list of secondary WDL files from Git.
      description: Does not require authentication for published tools, authentication can
        be provided for restricted tools
      operationId: secondaryWdl
      parameters:
        - name: containerId
          in: path
          description: Tool id
          required: true
          schema:
            type: integer
            format: int64
        - name: tag
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SourceFile"
      security:
        - BEARER:
            []
  "/containers/{containerId}/star":
    put:
      tags:
        - containers
      summary: Star a tool.
      description: ""
      operationId: starEntry
      parameters:
        - name: containerId
          in: path
          description: Tool to star.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/StarRequest"
      responses:
        default:
          description: successful operation
      security:
        - BEARER:
            []
  "/containers/{containerId}/starredUsers":
    get:
      tags:
        - containers
      summary: Returns list of users who starred a tool.
      description: ""
      operationId: getStarredUsers
      parameters:
        - name: containerId
          in: path
          description: Tool to grab starred users for.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  "/containers/{containerId}/tags":
    post:
      tags:
        - containertags
      summary: Add new tags linked to a tool.
      description: ""
      operationId: addTags
      parameters:
        - name: containerId
          in: path
          description: Tool to modify.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Tag"
        description: List of new tags
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
      security:
        - BEARER:
            []
    put:
      tags:
        - containertags
      summary: Update the tags linked to a tool.
      description: ""
      operationId: updateTags
      parameters:
        - name: containerId
          in: path
          description: Tool to modify.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Tag"
        description: List of modified tags
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
      security:
        - BEARER:
            []
  "/containers/{containerId}/tags/{tagId}":
    delete:
      tags:
        - containertags
      summary: Delete tag linked to a tool.
      description: ""
      operationId: deleteTags
      parameters:
        - name: containerId
          in: path
          description: Tool to modify.
          required: true
          schema:
            type: integer
            format: int64
        - name: tagId
          in: path
          description: Tag to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: successful operation
      security:
        - BEARER:
            []
  "/containers/{containerId}/testParameterFiles":
    get:
      tags:
        - containers
      summary: Get the corresponding wdl test parameter files.
      description: Does not require authentication for published tools, authentication can
        be provided for restricted tools
      operationId: getTestParameterFiles
      parameters:
        - name: containerId
          in: path
          description: Tool id
          required: true
          schema:
            type: integer
            format: int64
        - name: tag
          in: query
          required: false
          schema:
            type: string
        - name: descriptorType
          in: query
          description: Descriptor Type
          required: true
          schema:
            type: string
            enum:
              - CWL
              - WDL
              - NFL
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SourceFile"
      security:
        - BEARER:
            []
    put:
      tags:
        - containers
      summary: Add test parameter files to a tag.
      description: ""
      operationId: addTestParameterFiles
      parameters:
        - name: containerId
          in: path
          description: Tool to modify.
          required: true
          schema:
            type: integer
            format: int64
        - name: testParameterPaths
          in: query
          description: List of paths.
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: tagName
          in: query
          required: false
          schema:
            type: string
        - name: descriptorType
          in: query
          description: Descriptor Type
          required: true
          schema:
            type: string
            enum:
              - CWL
              - WDL
      requestBody:
        $ref: "#/components/requestBodies/updateLabelsBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                uniqueItems: true
                items:
                  $ref: "#/components/schemas/SourceFile"
      security:
        - BEARER:
            []
    delete:
      tags:
        - containers
      summary: Delete test parameter files to a tag.
      description: ""
      operationId: deleteTestParameterFiles
      parameters:
        - name: containerId
          in: path
          description: Tool to modify.
          required: true
          schema:
            type: integer
            format: int64
        - name: testParameterPaths
          in: query
          description: List of paths.
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: tagName
          in: query
          required: false
          schema:
            type: string
        - name: descriptorType
          in: query
          description: Descriptor Type
          required: true
          schema:
            type: string
            enum:
              - CWL
              - WDL
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                uniqueItems: true
                items:
                  $ref: "#/components/schemas/SourceFile"
      security:
        - BEARER:
            []
  "/containers/{containerId}/unstar":
    delete:
      tags:
        - containers
      summary: Unstar a tool.
      description: ""
      operationId: unstarEntry
      parameters:
        - name: containerId
          in: path
          description: Tool to unstar.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: successful operation
      security:
        - BEARER:
            []
  "/containers/{containerId}/updateTagPaths":
    put:
      tags:
        - containers
      summary: Change the tool paths.
      description: Resets the descriptor paths and dockerfile path of all versions to match
        the default paths from the tool object passed.
      operationId: updateTagContainerPath
      parameters:
        - name: containerId
          in: path
          description: Tool to modify.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/DockstoreTool"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DockstoreTool"
      security:
        - BEARER:
            []
  "/containers/{containerId}/users":
    get:
      tags:
        - containers
      summary: Get users of a tool.
      description: ""
      operationId: getUsers
      parameters:
        - name: containerId
          in: path
          description: Tool ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
      security:
        - BEARER:
            []
  "/containers/{containerId}/verifiedSources":
    get:
      tags:
        - containers
      summary: Get the sources that verified a tool.
      description: NO authentication
      operationId: verifiedSources
      parameters:
        - name: containerId
          in: path
          description: Tool id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
  "/containers/{containerId}/verify/{tagId}":
    put:
      tags:
        - containertags
      summary: Verify or unverify a version . ADMIN ONLY
      description: ""
      operationId: verifyToolTag
      parameters:
        - name: containerId
          in: path
          description: Tool to modify.
          required: true
          schema:
            type: integer
            format: int64
        - name: tagId
          in: path
          description: Tag to verify.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/VerifyRequest"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
      security:
        - BEARER:
            []
  "/containers/{containerId}/wdl":
    get:
      tags:
        - containers
      summary: Get the primary WDL descriptor file on Github.
      description: Does not require authentication for published tools, authentication can
        be provided for restricted tools
      operationId: wdl
      parameters:
        - name: containerId
          in: path
          description: Tool id
          required: true
          schema:
            type: integer
            format: int64
        - name: tag
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceFile"
      security:
        - BEARER:
            []
  "/containers/{containerId}/wdl/{relative-path}":
    get:
      tags:
        - containers
      summary: Get the corresponding WDL descriptor file on Github.
      description: Does not require authentication for published tools, authentication can
        be provided for restricted tools
      operationId: secondaryWdlPath
      parameters:
        - name: containerId
          in: path
          description: Tool id
          required: true
          schema:
            type: integer
            format: int64
        - name: tag
          in: query
          required: false
          schema:
            type: string
        - name: relative-path
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceFile"
      security:
        - BEARER:
            []
  "/containers/{toolId}/defaultVersion":
    put:
      tags:
        - containers
      summary: Update the default version of the given tool.
      description: ""
      operationId: updateToolDefaultVersion
      parameters:
        - name: toolId
          in: path
          description: Tool to modify.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Tag name to set as default.
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DockstoreTool"
      security:
        - BEARER:
            []
  "/containers/{toolId}/zip/{tagId}":
    get:
      tags:
        - containers
      summary: Download a ZIP file of a tool and all associated files.
      description: ""
      operationId: getToolZip
      parameters:
        - name: toolId
          in: path
          description: toolId
          required: true
          schema:
            type: integer
            format: int64
        - name: tagId
          in: path
          description: tagId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: successful operation
      security:
        - BEARER:
            []
  "/entries/{id}/aliases":
    put:
      tags:
        - entries
      summary: Update the aliases linked to a entry in Dockstore.
      description: Aliases are alphanumerical (case-insensitive and may contain internal
        hyphens), given in a comma-delimited list.
      operationId: updateAliases
      parameters:
        - name: id
          in: path
          description: Entry to modify.
          required: true
          schema:
            type: integer
            format: int64
        - name: aliases
          in: query
          description: Comma-delimited list of aliases.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/updateLabelsBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entry"
      security:
        - BEARER:
            []
  "/entries/{id}/collections":
    get:
      tags:
        - entries
      summary: Get the collections and organizations that contain the published entry
      description: Entry must be published
      operationId: entryCollections
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CollectionOrganization"
  /metadata/descriptorLanguageList:
    get:
      tags:
        - metadata
      summary: Get the list of descriptor languages supported on Dockstore.
      description: NO authentication
      operationId: getDescriptorLanguages
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DescriptorLanguageBean"
  /metadata/dockerRegistryList:
    get:
      tags:
        - metadata
      summary: Get the list of docker registries supported on Dockstore.
      description: NO authentication
      operationId: getDockerRegistries
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RegistryBean"
  /metadata/elasticSearch:
    get:
      tags:
        - metadata
      summary: Successful response if elastic search is up and running.
      description: NO authentication
      operationId: checkElasticSearch
      responses:
        default:
          description: successful operation
  /metadata/okHttpCachePerformance:
    get:
      tags:
        - metadata
      summary: Get measures of cache performance.
      description: NO authentication
      operationId: getCachePerformance
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: object
  /metadata/rss:
    get:
      tags:
        - metadata
      summary: List all published tools and workflows in creation order.
      description: NO authentication
      operationId: rssFeed
      responses:
        "200":
          description: successful operation
          content:
            text/xml:
              schema:
                type: string
  /metadata/runner_dependencies:
    get:
      tags:
        - metadata
      summary: Returns the file containing runner dependencies.
      description: ""
      operationId: getRunnerDependencies
      parameters:
        - name: client_version
          in: query
          description: The Dockstore client version
          required: false
          schema:
            type: string
        - name: python_version
          in: query
          description: Python version, only relevant for the cwltool runner
          required: false
          schema:
            type: string
            default: "2"
        - name: runner
          in: query
          description: The tool runner
          required: false
          schema:
            type: string
            enum:
              - cwltool
            default: cwltool
        - name: output
          in: query
          description: Response type
          required: false
          schema:
            type: string
            enum:
              - json
              - text
            default: text
      responses:
        "200":
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
  /metadata/sitemap:
    get:
      tags:
        - metadata
      summary: List all published workflow and tool paths.
      description: NO authentication
      operationId: sitemap
      responses:
        "200":
          description: successful operation
          content:
            text/html:
              schema:
                type: string
            text/xml:
              schema:
                type: string
  /metadata/sourceControlList:
    get:
      tags:
        - metadata
      summary: Get the list of source controls supported on Dockstore.
      description: NO authentication
      operationId: getSourceControlList
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SourceControlBean"
  /organizations:
    get:
      tags:
        - organizations
      summary: List all available organizations.
      description: NO Authentication
      operationId: getApprovedOrganizations
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organization"
    post:
      tags:
        - organizations
      summary: Create an organization.
      description: Organization requires approval by an admin before being made public.
      operationId: createOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
        description: Organization to register.
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
      security:
        - BEARER:
            []
  /organizations/all:
    get:
      tags:
        - organizations
      summary: List all organizations.
      description: Admin/curator only
      operationId: getAllOrganizations
      parameters:
        - name: type
          in: query
          description: Filter to apply to organizations.
          required: true
          schema:
            type: string
            enum:
              - all
              - pending
              - rejected
              - approved
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organization"
      security:
        - BEARER:
            []
  "/organizations/collections/{alias}/aliases":
    get:
      tags:
        - organizations
      summary: Retrieves a collection by alias.
      description: ""
      operationId: getCollectionByAlias
      parameters:
        - name: alias
          in: path
          description: Alias
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
  "/organizations/collections/{collectionId}/aliases":
    put:
      tags:
        - organizations
      summary: Update the aliases linked to a Collection in Dockstore.
      description: Aliases are alphanumerical (case-insensitive and may contain internal
        hyphens), given in a comma-delimited list.
      operationId: updateCollectionAliases
      parameters:
        - name: collectionId
          in: path
          description: Entry to modify.
          required: true
          schema:
            type: integer
            format: int64
        - name: aliases
          in: query
          description: Comma-delimited list of aliases.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/updateLabelsBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
      security:
        - BEARER:
            []
  "/organizations/name/{name}":
    get:
      tags:
        - organizations
      summary: Retrieves an organization by name.
      description: Does not require authentication for approved organizations,
        authentication can be provided for unapproved organizations
      operationId: getOrganizationByName
      parameters:
        - name: name
          in: path
          description: Organization name.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
      security:
        - BEARER:
            []
  "/organizations/{alias}/aliases":
    get:
      tags:
        - organizations
      summary: Retrieves a collection by alias.
      description: ""
      operationId: getOrganizationByAlias
      parameters:
        - name: alias
          in: path
          description: Alias
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
  "/organizations/{organizationId}":
    get:
      tags:
        - organizations
      summary: Retrieves an organization by ID.
      description: Does not require authentication for approved organizations,
        authentication can be provided for unapproved organizations
      operationId: getOrganizationById
      parameters:
        - name: organizationId
          in: path
          description: Organization ID.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
      security:
        - BEARER:
            []
    put:
      tags:
        - organizations
      summary: Update an organization.
      description: Currently only name, description, email, link, avatarUrl, and location
        can be updated.
      operationId: updateOrganization
      parameters:
        - name: organizationId
          in: path
          description: Organization ID.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
        description: Organization to update with.
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
      security:
        - BEARER:
            []
  "/organizations/{organizationId}/aliases":
    put:
      tags:
        - organizations
      summary: Update the aliases linked to a listing in Dockstore.
      description: Aliases are alphanumerical (case-insensitive and may contain internal
        hyphens), given in a comma-delimited list.
      operationId: updateOrganizationAliases
      parameters:
        - name: organizationId
          in: path
          description: Entry to modify.
          required: true
          schema:
            type: integer
            format: int64
        - name: aliases
          in: query
          description: Comma-delimited list of aliases.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/updateLabelsBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
      security:
        - BEARER:
            []
  "/organizations/{organizationId}/approve":
    post:
      tags:
        - organizations
      summary: Approves an organization.
      description: Admin/curator only
      operationId: approveOrganization
      parameters:
        - name: organizationId
          in: path
          description: Organization ID.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
      security:
        - BEARER:
            []
  "/organizations/{organizationId}/collections":
    get:
      tags:
        - organizations
      summary: Retrieve all collections for an organization.
      description: Does not require authentication for approved organizations,
        authentication can be provided for unapproved organizations
      operationId: getCollectionsFromOrganization
      parameters:
        - name: organizationId
          in: path
          description: Organization ID.
          required: true
          schema:
            type: integer
            format: int64
        - name: include
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Collection"
      security:
        - BEARER:
            []
    put:
      tags:
        - organizations
      summary: Create a collection in the given organization.
      description: ""
      operationId: createCollection
      parameters:
        - name: organizationId
          in: path
          description: Organization ID.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Collection"
        description: Collection to register.
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
      security:
        - BEARER:
            []
  "/organizations/{organizationId}/collections/{collectionId}":
    get:
      tags:
        - organizations
      summary: Retrieves a collection by ID.
      description: Does not require authentication for approved organizations,
        authentication can be provided for unapproved organizations
      operationId: getCollectionById
      parameters:
        - name: organizationId
          in: path
          description: Organization ID.
          required: true
          schema:
            type: integer
            format: int64
        - name: collectionId
          in: path
          description: Collection ID.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
      security:
        - BEARER:
            []
    post:
      tags:
        - organizations
      summary: Update a collection.
      description: Currently only name and description can be updated.
      operationId: updateCollection
      parameters:
        - name: organizationId
          in: path
          description: Organization ID.
          required: true
          schema:
            type: integer
            format: int64
        - name: collectionId
          in: path
          description: Collection ID.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Collection"
        description: Collection to update with.
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
      security:
        - BEARER:
            []
  "/organizations/{organizationId}/collections/{collectionId}/description":
    get:
      tags:
        - organizations
      summary: Retrieves a collection description by organization ID and collection ID.
      description: Does not require authentication for approved organizations,
        authentication can be provided for unapproved organizations
      operationId: getCollectionDescription
      parameters:
        - name: organizationId
          in: path
          description: Organization ID
          required: true
          schema:
            type: integer
            format: int64
        - name: collectionId
          in: path
          description: Collection ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
      security:
        - BEARER:
            []
    put:
      tags:
        - organizations
      summary: Update a collection's description.
      description: Description in markdown
      operationId: updateCollectionDescription
      parameters:
        - name: organizationId
          in: path
          description: Organization ID
          required: true
          schema:
            type: integer
            format: int64
        - name: collectionId
          in: path
          description: Collection ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Collections's description in markdown
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
      security:
        - BEARER:
            []
  "/organizations/{organizationId}/collections/{collectionId}/entry":
    post:
      tags:
        - organizations
      summary: Add an entry to a collection.
      description: ""
      operationId: addEntryToCollection
      parameters:
        - name: organizationId
          in: path
          description: Organization ID.
          required: true
          schema:
            type: integer
            format: int64
        - name: collectionId
          in: path
          description: Collection ID.
          required: true
          schema:
            type: integer
            format: int64
        - name: entryId
          in: query
          description: Entry ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
      security:
        - BEARER:
            []
    delete:
      tags:
        - organizations
      summary: Delete an entry from a collection.
      description: ""
      operationId: deleteEntryFromCollection
      parameters:
        - name: organizationId
          in: path
          description: Organization ID.
          required: true
          schema:
            type: integer
            format: int64
        - name: collectionId
          in: path
          description: Collection ID.
          required: true
          schema:
            type: integer
            format: int64
        - name: entryId
          in: query
          description: Entry ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
      security:
        - BEARER:
            []
  "/organizations/{organizationId}/description":
    get:
      tags:
        - organizations
      summary: Retrieves an organization description by organization ID.
      description: Does not require authentication for approved organizations,
        authentication can be provided for unapproved organizations
      operationId: getOrganizationDescription
      parameters:
        - name: organizationId
          in: path
          description: Organization ID.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
      security:
        - BEARER:
            []
    put:
      tags:
        - organizations
      summary: Update an organization's description.
      description: Description in markdown
      operationId: updateOrganizationDescription
      parameters:
        - name: organizationId
          in: path
          description: Organization to update description.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Organization's description in markdown
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
      security:
        - BEARER:
            []
  "/organizations/{organizationId}/events":
    get:
      tags:
        - organizations
      summary: Retrieves all events for an organization.
      description: Does not require authentication for approved organizations,
        authentication can be provided for unapproved organizations
      operationId: getOrganizationEvents
      parameters:
        - name: organizationId
          in: path
          description: Organization ID.
          required: true
          schema:
            type: integer
            format: int64
        - name: offset
          in: query
          description: Start index of paging.  If this exceeds the current result set
            return an empty set.  If not specified in the request, this will
            start at the beginning of the results.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          description: Amount of records to return in a given page, limited to 100
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 100
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
      security:
        - BEARER:
            []
  "/organizations/{organizationId}/invitation":
    post:
      tags:
        - organizations
      summary: Accept or reject an organization invitation.
      description: True accepts the invitation, false rejects the invitation.
      operationId: acceptOrRejectInvitation
      parameters:
        - name: organizationId
          in: path
          description: Organization ID.
          required: true
          schema:
            type: integer
            format: int64
        - name: accept
          in: query
          description: Accept or reject
          required: true
          schema:
            type: boolean
      responses:
        default:
          description: successful operation
      security:
        - BEARER:
            []
  "/organizations/{organizationId}/members":
    get:
      tags:
        - organizations
      summary: Retrieves all members for an organization.
      description: Does not require authentication for approved organizations,
        authentication can be provided for unapproved organizations
      operationId: getOrganizationMembers
      parameters:
        - name: organizationId
          in: path
          description: Organization ID.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                uniqueItems: true
                items:
                  $ref: "#/components/schemas/OrganizationUser"
      security:
        - BEARER:
            []
  "/organizations/{organizationId}/reject":
    post:
      tags:
        - organizations
      summary: Rejects an organization.
      description: Admin/curator only
      operationId: rejectOrganization
      parameters:
        - name: organizationId
          in: path
          description: Organization ID.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
      security:
        - BEARER:
            []
  "/organizations/{organizationId}/user":
    post:
      tags:
        - organizations
      summary: Updates a user role in an organization.
      description: ""
      operationId: updateUserRole
      parameters:
        - name: role
          in: query
          description: Role of user.
          required: true
          schema:
            type: string
            enum:
              - MAINTAINER
              - MEMBER
        - name: userId
          in: query
          description: User to add to org.
          required: true
          schema:
            type: integer
            format: int64
        - name: organizationId
          in: path
          description: Organization ID.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationUser"
      security:
        - BEARER:
            []
    put:
      tags:
        - organizations
      summary: Adds a user role to an organization.
      description: ""
      operationId: addUserToOrg
      parameters:
        - name: role
          in: query
          description: Role of user.
          required: true
          schema:
            type: string
            enum:
              - MAINTAINER
              - MEMBER
        - name: userId
          in: query
          description: User to add to org.
          required: true
          schema:
            type: integer
            format: int64
        - name: organizationId
          in: path
          description: Organization ID.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/updateLabelsBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationUser"
      security:
        - BEARER:
            []
    delete:
      tags:
        - organizations
      summary: Remove a user from an organization.
      description: ""
      operationId: deleteUserRole
      parameters:
        - name: userId
          in: query
          description: User to add to org.
          required: true
          schema:
            type: integer
            format: int64
        - name: organizationId
          in: path
          description: Organization ID.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: successful operation
      security:
        - BEARER:
            []
  "/organizations/{organizationId}/users/{username}":
    put:
      tags:
        - organizations
      summary: Adds a user role to an organization.
      description: ""
      operationId: addUserToOrgByUsername
      parameters:
        - name: username
          in: path
          description: User to add to org.
          required: true
          schema:
            type: string
        - name: organizationId
          in: path
          description: Organization ID.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Role of user. "MAINTAINER" or "MEMBER"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationUser"
      security:
        - BEARER:
            []
  "/organizations/{organizationName}/collections/{collectionName}/name":
    get:
      tags:
        - organizations
      summary: Retrieves a collection by ID.
      description: Does not require authentication for approved organizations,
        authentication can be provided for unapproved organizations
      operationId: getCollectionByName
      parameters:
        - name: organizationName
          in: path
          description: Organization name.
          required: true
          schema:
            type: string
        - name: collectionName
          in: path
          description: Collection name.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
      security:
        - BEARER:
            []
  "/users/checkUser/{username}":
    get:
      tags:
        - users
      summary: Check if user with some username exists.
      description: ""
      operationId: checkUserExists
      parameters:
        - name: username
          in: path
          description: User name to check
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: boolean
      security:
        - BEARER:
            []
  /users/starredTools:
    get:
      tags:
        - users
      summary: Get the logged-in user's starred tools.
      description: ""
      operationId: getStarredTools
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Entry"
      security:
        - BEARER:
            []
  /users/starredWorkflows:
    get:
      tags:
        - users
      summary: Get the logged-in user's starred workflows.
      description: ""
      operationId: getStarredWorkflows
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Entry"
      security:
        - BEARER:
            []
  /users/updateUserMetadata:
    get:
      tags:
        - users
      summary: Update metadata of all users.
      description: Admin only.
      operationId: updateUserMetadata
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
      security:
        - BEARER:
            []
  /users/user:
    get:
      tags:
        - users
      summary: Get the logged-in user.
      description: ""
      operationId: getUser
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      security:
        - BEARER:
            []
    delete:
      tags:
        - users
      summary: Delete user if possible.
      description: ""
      operationId: selfDestruct
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: boolean
      security:
        - BEARER:
            []
  /users/user/changeUsername:
    post:
      tags:
        - users
      summary: Change username if possible.
      description: ""
      operationId: changeUsername
      parameters:
        - name: username
          in: query
          description: Username to change to
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      security:
        - BEARER:
            []
  /users/user/extended:
    get:
      tags:
        - users
      summary: Get additional information about the logged-in user.
      description: ""
      operationId: getExtendedUserData
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExtendedUserData"
      security:
        - BEARER:
            []
  /users/user/memberships:
    get:
      tags:
        - users
      summary: Get the logged-in users memberships.
      description: ""
      operationId: getUserMemberships
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                uniqueItems: true
                items:
                  $ref: "#/components/schemas/OrganizationUser"
      security:
        - BEARER:
            []
  /users/user/updateUserMetadata:
    get:
      tags:
        - users
      summary: Update metadata for logged in user.
      description: ""
      operationId: updateLoggedInUserMetadata
      parameters:
        - name: source
          in: query
          description: Token source
          required: false
          schema:
            type: string
            enum:
              - google.com
              - github.com
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      security:
        - BEARER:
            []
  "/users/user/{userId}/limits":
    get:
      tags:
        - users
      summary: Returns the specified user's limits. ADMIN or CURATOR only
      description: ""
      operationId: getUserLimits
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Limits"
      security:
        - BEARER:
            []
    put:
      tags:
        - users
      summary: Update the specified user's limits. ADMIN or CURATOR only
      description: ""
      operationId: setUserLimits
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Limits"
        description: Limits to set for a user
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Limits"
      security:
        - BEARER:
            []
  "/users/username/{username}":
    get:
      tags:
        - users
      summary: Get a user by username.
      description: ""
      operationId: listUser
      parameters:
        - name: username
          in: path
          description: Username of user to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      security:
        - BEARER:
            []
  "/users/{userId}":
    get:
      tags:
        - users
      summary: Get user by id.
      description: ""
      operationId: getUser
      parameters:
        - name: userId
          in: path
          description: User to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      security:
        - BEARER:
            []
  "/users/{userId}/containers":
    get:
      tags:
        - users
      summary: List all tools owned by the logged-in user.
      description: ""
      operationId: userContainers
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DockstoreTool"
      security:
        - BEARER:
            []
  "/users/{userId}/containers/published":
    get:
      tags:
        - users
      summary: List all published tools from a user.
      description: ""
      operationId: userPublishedContainers
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DockstoreTool"
      security:
        - BEARER:
            []
  "/users/{userId}/containers/refresh":
    get:
      tags:
        - users
      summary: Refresh all tools owned by the logged-in user.
      description: ""
      operationId: refresh
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DockstoreTool"
      security:
        - BEARER:
            []
  "/users/{userId}/containers/{organization}/refresh":
    get:
      tags:
        - users
      summary: Refresh all tools owned by the logged-in user with specified
        organization.
      description: ""
      operationId: refreshToolsByOrganization
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
        - name: organization
          in: path
          description: Organization
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DockstoreTool"
      security:
        - BEARER:
            []
  "/users/{userId}/tokens":
    get:
      tags:
        - users
      summary: Get tokens with user id.
      description: ""
      operationId: getUserTokens
      parameters:
        - name: userId
          in: path
          description: User to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Token"
      security:
        - BEARER:
            []
  "/users/{userId}/tokens/dockstore":
    get:
      tags:
        - users
      summary: Get Dockstore tokens with user id.
      description: ""
      operationId: getDockstoreUserTokens
      parameters:
        - name: userId
          in: path
          description: User to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Token"
      security:
        - BEARER:
            []
  "/users/{userId}/tokens/github.com":
    get:
      tags:
        - users
      summary: Get Github tokens with user id.
      description: ""
      operationId: getGithubUserTokens
      parameters:
        - name: userId
          in: path
          description: User to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Token"
      security:
        - BEARER:
            []
  "/users/{userId}/tokens/gitlab.com":
    get:
      tags:
        - users
      summary: Get Gitlab tokens with user id.
      description: ""
      operationId: getGitlabUserTokens
      parameters:
        - name: userId
          in: path
          description: User to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Token"
      security:
        - BEARER:
            []
  "/users/{userId}/tokens/quay.io":
    get:
      tags:
        - users
      summary: Get Quay tokens with user id.
      description: ""
      operationId: getQuayUserTokens
      parameters:
        - name: userId
          in: path
          description: User to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Token"
      security:
        - BEARER:
            []
  "/users/{userId}/workflows":
    get:
      tags:
        - users
      summary: List all workflows owned by the logged-in user.
      description: ""
      operationId: userWorkflows
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Workflow"
      security:
        - BEARER:
            []
  "/users/{userId}/workflows/published":
    get:
      tags:
        - users
      summary: List all published workflows from a user.
      description: ""
      operationId: userPublishedWorkflows
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Workflow"
      security:
        - BEARER:
            []
  "/users/{userId}/workflows/refresh":
    get:
      tags:
        - users
      summary: Refresh all workflows owned by the logged-in user.
      description: ""
      operationId: refreshWorkflows
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Workflow"
      security:
        - BEARER:
            []
  "/users/{userId}/workflows/{organization}/refresh":
    get:
      tags:
        - users
      summary: Refresh all workflows owned by the logged-in user with specified
        organization.
      description: ""
      operationId: refreshWorkflowsByOrganization
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
        - name: organization
          in: path
          description: Organization
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Workflow"
      security:
        - BEARER:
            []
  /workflows/hostedEntry:
    post:
      tags:
        - hosted
      summary: Create a hosted workflow.
      description: ""
      operationId: createHostedWorkflow
      parameters:
        - name: registry
          in: query
          description: The Docker registry (Tools only)
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: The repository name
          required: true
          schema:
            type: string
        - name: descriptorType
          in: query
          description: The descriptor type (Workflows only)
          required: false
          schema:
            type: string
        - name: namespace
          in: query
          description: The Docker namespace (Tools only)
          required: false
          schema:
            type: string
        - name: entryName
          in: query
          description: Optional entry name (Tools only)
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
      security:
        - BEARER:
            []
  "/workflows/hostedEntry/{entryId}":
    post:
      tags:
        - hosted
      summary: Creates a new revision of a hosted workflow from a zip
      description: ""
      operationId: addZip
      parameters:
        - name: entryId
          in: path
          description: hosted entry ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
      security:
        - BEARER:
            []
    delete:
      tags:
        - hosted
      summary: Delete a revision of a hosted workflow
      description: ""
      operationId: deleteHostedWorkflowVersion
      parameters:
        - name: entryId
          in: path
          description: Entry to modify.
          required: true
          schema:
            type: integer
            format: int64
        - name: version
          in: query
          description: version
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
      security:
        - BEARER:
            []
    patch:
      tags:
        - hosted
      summary: Non-idempotent operation for creating new revisions of hosted workflows
      description: ""
      operationId: editHostedWorkflow
      parameters:
        - name: entryId
          in: path
          description: Entry to modify.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/SourceFileArray"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
      security:
        - BEARER:
            []
  /workflows/manualRegister:
    post:
      tags:
        - workflows
      summary: Manually register a workflow.
      description: Manually register workflow (public or private).
      operationId: manualRegister
      parameters:
        - name: workflowRegistry
          in: query
          description: Workflow registry
          required: true
          schema:
            type: string
        - name: workflowPath
          in: query
          description: Workflow repository
          required: true
          schema:
            type: string
        - name: defaultWorkflowPath
          in: query
          description: Workflow container new descriptor path (CWL or WDL) and/or name
          required: true
          schema:
            type: string
        - name: workflowName
          in: query
          description: Workflow name, set to empty if none required
          required: true
          schema:
            type: string
        - name: descriptorType
          in: query
          description: Descriptor type
          required: true
          schema:
            type: string
        - name: defaultTestParameterFilePath
          in: query
          description: Default test parameter file path
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
      security:
        - BEARER:
            []
  "/workflows/organization/{organization}/published":
    get:
      tags:
        - workflows
      summary: List all published workflows of an organization.
      description: NO authentication
      operationId: getPublishedWorkflowsByOrganization
      parameters:
        - name: organization
          in: path
          description: organization
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Workflow"
  "/workflows/path/entry/{repository}":
    get:
      tags:
        - workflows
      summary: Get an entry by path.
      description: Requires full path (including entry name if applicable).
      operationId: getEntryByPath
      parameters:
        - name: repository
          in: path
          description: repository path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entry"
      security:
        - BEARER:
            []
  "/workflows/path/entry/{repository}/published":
    get:
      tags:
        - workflows
      summary: Get a published entry by path.
      description: Requires full path (including entry name if applicable).
      operationId: getPublishedEntryByPath
      parameters:
        - name: repository
          in: path
          description: repository path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entry"
  "/workflows/path/workflow/{repository}":
    get:
      tags:
        - workflows
      summary: Get a workflow by path.
      description: Requires full path (including workflow name if applicable).
      operationId: getWorkflowByPath
      parameters:
        - name: repository
          in: path
          description: repository path
          required: true
          schema:
            type: string
        - name: include
          in: query
          description: "Comma-delimited list of fields to include: validations"
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
      security:
        - BEARER:
            []
  "/workflows/path/workflow/{repository}/actions":
    get:
      tags:
        - workflows
      summary: Gets all actions a user can perform on a workflow.
      description: ""
      operationId: getWorkflowActions
      parameters:
        - name: repository
          in: path
          description: repository path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  enum:
                    - WRITE
                    - READ
                    - DELETE
                    - SHARE
      security:
        - BEARER:
            []
  "/workflows/path/workflow/{repository}/permissions":
    get:
      tags:
        - workflows
      summary: Get all permissions for a workflow.
      description: The user must be the workflow owner.
      operationId: getWorkflowPermissions
      parameters:
        - name: repository
          in: path
          description: repository path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Permission"
      security:
        - BEARER:
            []
    delete:
      tags:
        - workflows
      summary: Remove the specified user role for a workflow.
      description: The user must be the workflow owner.
      operationId: removeWorkflowRole
      parameters:
        - name: repository
          in: path
          description: repository path
          required: true
          schema:
            type: string
        - name: email
          in: query
          description: user email
          required: true
          schema:
            type: string
        - name: role
          in: query
          description: role
          required: true
          schema:
            type: string
            enum:
              - OWNER
              - WRITER
              - READER
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Permission"
      security:
        - BEARER:
            []
    patch:
      tags:
        - workflows
      summary: Set the specified permission for a user on a workflow.
      description: The user must be the workflow owner. Currently only supported on hosted
        workflows.
      operationId: addWorkflowPermission
      parameters:
        - name: repository
          in: path
          description: repository path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Permission"
        description: user permission
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Permission"
      security:
        - BEARER:
            []
  "/workflows/path/workflow/{repository}/published":
    get:
      tags:
        - workflows
      summary: Get a published workflow by path
      description: Does not require workflow name.
      operationId: getPublishedWorkflowByPath
      parameters:
        - name: repository
          in: path
          description: repository path
          required: true
          schema:
            type: string
        - name: include
          in: query
          description: "Comma-delimited list of fields to include: validations"
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
  "/workflows/path/{repository}":
    get:
      tags:
        - workflows
      summary: Get a list of workflows by path.
      description: Does not require workflow name.
      operationId: getAllWorkflowByPath
      parameters:
        - name: repository
          in: path
          description: repository path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Workflow"
      security:
        - BEARER:
            []
  /workflows/published:
    get:
      tags:
        - workflows
      summary: List all published workflows.
      description: NO authentication
      operationId: allPublishedWorkflows
      parameters:
        - name: offset
          in: query
          description: Start index of paging. Pagination results can be based on numbers or
            other values chosen by the registry implementor (for example, SHA
            values). If this exceeds the current result set return an empty
            set.  If not specified in the request, this will start at the
            beginning of the results.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Amount of records to return in a given page, limited to 100
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 100
        - name: filter
          in: query
          description: Filter, this is a search string that filters the results.
          required: false
          schema:
            type: string
        - name: sortCol
          in: query
          description: Sort column
          required: false
          schema:
            type: string
            default: stars
        - name: sortOrder
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Workflow"
  "/workflows/published/{workflowId}":
    get:
      tags:
        - workflows
      summary: Get a published workflow.
      description: Hidden versions will not be visible. NO authentication
      operationId: getPublishedWorkflow
      parameters:
        - name: workflowId
          in: path
          description: Workflow ID
          required: true
          schema:
            type: integer
            format: int64
        - name: include
          in: query
          description: "Comma-delimited list of fields to include: validations"
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
  /workflows/shared:
    get:
      tags:
        - workflows
      summary: Retrieve all workflows shared with user.
      description: ""
      operationId: sharedWorkflows
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SharedWorkflows"
      security:
        - BEARER:
            []
  "/workflows/{entryId}/registerCheckerWorkflow/{descriptorType}":
    post:
      tags:
        - workflows
      summary: Register a checker workflow and associates it with the given
        tool/workflow.
      description: ""
      operationId: registerCheckerWorkflow
      parameters:
        - name: checkerWorkflowPath
          in: query
          description: Path of the main descriptor of the checker workflow (located in
            associated tool/workflow repository)
          required: true
          schema:
            type: string
        - name: testParameterPath
          in: query
          description: Default path to test parameter files for the checker workflow. If
            not specified will use that of the entry.
          required: false
          schema:
            type: string
        - name: entryId
          in: path
          description: Entry Id of parent tool/workflow.
          required: true
          schema:
            type: integer
            format: int64
        - name: descriptorType
          in: path
          description: Descriptor type of the workflow, either cwl or wdl.
          required: true
          schema:
            type: string
            enum:
              - cwl
              - wdl
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entry"
      security:
        - BEARER:
            []
  "/workflows/{workflowId}":
    get:
      tags:
        - workflows
      summary: Retrieve a workflow
      description: This is one of the few endpoints that returns the user object with
        populated properties (minus the userProfiles property)
      operationId: getWorkflow
      parameters:
        - name: workflowId
          in: path
          description: workflow ID
          required: true
          schema:
            type: integer
            format: int64
        - name: include
          in: query
          description: "Comma-delimited list of fields to include: validations"
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
      security:
        - BEARER:
            []
    put:
      tags:
        - workflows
      summary: Update the workflow with the given workflow.
      description: Updates descriptor type (if stub), default workflow path, default file
        path, and default version
      operationId: updateWorkflow
      parameters:
        - name: workflowId
          in: path
          description: Workflow to modify.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/Workflow"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/cwl":
    get:
      tags:
        - workflows
      summary: Get the primary CWL descriptor file on Github.
      description: Does not require authentication for published workflows, authentication
        can be provided for restricted workflows
      operationId: cwl
      parameters:
        - name: workflowId
          in: path
          description: Workflow id
          required: true
          schema:
            type: integer
            format: int64
        - name: tag
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceFile"
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/cwl/{relative-path}":
    get:
      tags:
        - workflows
      summary: Get the corresponding CWL descriptor file on Github.
      description: Does not require authentication for published workflows, authentication
        can be provided for restricted workflows
      operationId: secondaryCwlPath
      parameters:
        - name: workflowId
          in: path
          description: Workflow id
          required: true
          schema:
            type: integer
            format: int64
        - name: tag
          in: query
          required: false
          schema:
            type: string
        - name: relative-path
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceFile"
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/dag/{workflowVersionId}":
    get:
      tags:
        - workflows
      summary: Get the DAG for a given workflow version.
      description: Does not require authentication for published workflows, authentication
        can be provided for restricted workflows
      operationId: getWorkflowDag
      parameters:
        - name: workflowId
          in: path
          description: workflowId
          required: true
          schema:
            type: integer
            format: int64
        - name: workflowVersionId
          in: path
          description: workflowVersionId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/defaultVersion":
    put:
      tags:
        - workflows
      summary: Update the default version of a workflow.
      description: ""
      operationId: updateWorkflowDefaultVersion
      parameters:
        - name: workflowId
          in: path
          description: Workflow to modify.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Version name to set as default
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/labels":
    put:
      tags:
        - workflows
      summary: Update the labels linked to a workflow.
      description: Labels are alphanumerical (case-insensitive and may contain internal
        hyphens), given in a comma-delimited list.
      operationId: updateLabels
      parameters:
        - name: workflowId
          in: path
          description: Tool to modify.
          required: true
          schema:
            type: integer
            format: int64
        - name: labels
          in: query
          description: Comma-delimited list of labels.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/updateLabelsBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/nextflow":
    get:
      tags:
        - workflows
      summary: Get the nextflow.config file on Github.
      description: Does not require authentication for published workflows, authentication
        can be provided for restricted workflows
      operationId: nextflow
      parameters:
        - name: workflowId
          in: path
          description: Workflow id
          required: true
          schema:
            type: integer
            format: int64
        - name: tag
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceFile"
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/nextflow/{relative-path}":
    get:
      tags:
        - workflows
      summary: Get the corresponding nextflow documents on Github.
      description: Does not require authentication for published workflows, authentication
        can be provided for restricted workflows
      operationId: secondaryNextFlowPath
      parameters:
        - name: workflowId
          in: path
          description: Workflow id
          required: true
          schema:
            type: integer
            format: int64
        - name: tag
          in: query
          required: false
          schema:
            type: string
        - name: relative-path
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceFile"
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/publish":
    post:
      tags:
        - workflows
      summary: Publish or unpublish a workflow.
      description: Publish/publish a workflow (public or private).
      operationId: publish
      parameters:
        - name: workflowId
          in: path
          description: Workflow id to publish/unpublish
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/PublishRequest"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/refresh":
    get:
      tags:
        - workflows
      summary: Refresh one particular workflow.
      description: Full refresh
      operationId: refresh
      parameters:
        - name: workflowId
          in: path
          description: workflow ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/requestDOI/{workflowVersionId}":
    put:
      tags:
        - workflows
      summary: Request a DOI for this version of a workflow.
      description: ""
      operationId: requestDOIForWorkflowVersion
      parameters:
        - name: workflowId
          in: path
          description: Workflow to modify.
          required: true
          schema:
            type: integer
            format: int64
        - name: workflowVersionId
          in: path
          description: workflowVersionId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkflowVersion"
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/resetVersionPaths":
    put:
      tags:
        - workflows
      summary: Reset the workflow paths.
      description: Resets the workflow paths of all versions to match the default workflow
        path from the workflow object passed.
      operationId: updateWorkflowPath
      parameters:
        - name: workflowId
          in: path
          description: Workflow to modify.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/Workflow"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/restub":
    get:
      tags:
        - workflows
      summary: Restub a workflow
      description: Restubs a full, unpublished workflow.
      operationId: restub
      parameters:
        - name: workflowId
          in: path
          description: workflow ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/secondaryCwl":
    get:
      tags:
        - workflows
      summary: Get the corresponding cwl documents on Github.
      description: Does not require authentication for published workflows, authentication
        can be provided for restricted workflows
      operationId: secondaryCwl
      parameters:
        - name: workflowId
          in: path
          description: Workflow id
          required: true
          schema:
            type: integer
            format: int64
        - name: tag
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SourceFile"
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/secondaryNextflow":
    get:
      tags:
        - workflows
      summary: Get the corresponding Nextflow documents on Github.
      description: Does not require authentication for published workflows, authentication
        can be provided for restricted workflows
      operationId: secondaryNextflow
      parameters:
        - name: workflowId
          in: path
          description: Workflow id
          required: true
          schema:
            type: integer
            format: int64
        - name: tag
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SourceFile"
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/secondaryWdl":
    get:
      tags:
        - workflows
      summary: Get the corresponding wdl documents on Github.
      description: Does not require authentication for published workflows, authentication
        can be provided for restricted workflows
      operationId: secondaryWdl
      parameters:
        - name: workflowId
          in: path
          description: Workflow id
          required: true
          schema:
            type: integer
            format: int64
        - name: tag
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SourceFile"
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/star":
    put:
      tags:
        - workflows
      summary: Star a workflow.
      description: ""
      operationId: starEntry
      parameters:
        - name: workflowId
          in: path
          description: Tool to star.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/StarRequest"
      responses:
        default:
          description: successful operation
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/starredUsers":
    get:
      tags:
        - workflows
      summary: Returns list of users who starred the given workflow.
      description: ""
      operationId: getStarredUsers
      parameters:
        - name: workflowId
          in: path
          description: Workflow to grab starred users for.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  "/workflows/{workflowId}/testParameterFiles":
    get:
      tags:
        - workflows
      summary: Get the corresponding test parameter files.
      description: Does not require authentication for published workflows, authentication
        can be provided for restricted workflows
      operationId: getTestParameterFiles
      parameters:
        - name: workflowId
          in: path
          description: Workflow id
          required: true
          schema:
            type: integer
            format: int64
        - name: version
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SourceFile"
      security:
        - BEARER:
            []
    put:
      tags:
        - workflows
      summary: Add test parameter files for a given version.
      description: ""
      operationId: addTestParameterFiles
      parameters:
        - name: workflowId
          in: path
          description: Workflow to modify.
          required: true
          schema:
            type: integer
            format: int64
        - name: testParameterPaths
          in: query
          description: List of paths.
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: version
          in: query
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/updateLabelsBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                uniqueItems: true
                items:
                  $ref: "#/components/schemas/SourceFile"
      security:
        - BEARER:
            []
    delete:
      tags:
        - workflows
      summary: Delete test parameter files for a given version.
      description: ""
      operationId: deleteTestParameterFiles
      parameters:
        - name: workflowId
          in: path
          description: Workflow to modify.
          required: true
          schema:
            type: integer
            format: int64
        - name: testParameterPaths
          in: query
          description: List of paths.
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: version
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                uniqueItems: true
                items:
                  $ref: "#/components/schemas/SourceFile"
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/tools/{workflowVersionId}":
    get:
      tags:
        - workflows
      summary: Get the Tools for a given workflow version.
      description: Does not require authentication for published workflows, authentication
        can be provided for restricted workflows
      operationId: getTableToolContent
      parameters:
        - name: workflowId
          in: path
          description: workflowId
          required: true
          schema:
            type: integer
            format: int64
        - name: workflowVersionId
          in: path
          description: workflowVersionId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/unstar":
    delete:
      tags:
        - workflows
      summary: Unstar a workflow.
      description: ""
      operationId: unstarEntry
      parameters:
        - name: workflowId
          in: path
          description: Workflow to unstar.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: successful operation
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/users":
    get:
      tags:
        - workflows
      summary: Get users of a workflow.
      description: ""
      operationId: getUsers
      parameters:
        - name: workflowId
          in: path
          description: workflow ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/verifiedSources":
    get:
      tags:
        - workflows
      summary: Get a semicolon delimited list of verified sources.
      description: NO authentication
      operationId: verifiedSources
      parameters:
        - name: workflowId
          in: path
          description: Workflow id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
  "/workflows/{workflowId}/verify/{workflowVersionId}":
    put:
      tags:
        - workflows
      summary: Verify or unverify a workflow. ADMIN ONLY
      description: ""
      operationId: verifyWorkflowVersion
      parameters:
        - name: workflowId
          in: path
          description: Workflow to modify.
          required: true
          schema:
            type: integer
            format: int64
        - name: workflowVersionId
          in: path
          description: workflowVersionId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/VerifyRequest"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkflowVersion"
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/wdl":
    get:
      tags:
        - workflows
      summary: Get the primary WDL descriptor file on Github.
      description: Does not require authentication for published workflows, authentication
        can be provided for restricted workflows
      operationId: wdl
      parameters:
        - name: workflowId
          in: path
          description: Workflow id
          required: true
          schema:
            type: integer
            format: int64
        - name: tag
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceFile"
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/wdl/{relative-path}":
    get:
      tags:
        - workflows
      summary: Get the corresponding WDL descriptor file on Github.
      description: Does not require authentication for published workflows, authentication
        can be provided for restricted workflows
      operationId: secondaryWdlPath
      parameters:
        - name: workflowId
          in: path
          description: Workflow id
          required: true
          schema:
            type: integer
            format: int64
        - name: tag
          in: query
          required: false
          schema:
            type: string
        - name: relative-path
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceFile"
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/workflowVersions":
    put:
      tags:
        - workflows
      summary: Update the workflow versions linked to a workflow.
      description: Updates workflow path, reference, and hidden attributes.
      operationId: updateWorkflowVersion
      parameters:
        - name: workflowId
          in: path
          description: Workflow to modify.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WorkflowVersion"
        description: List of modified workflow versions
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkflowVersion"
      security:
        - BEARER:
            []
  "/workflows/{workflowId}/zip/{workflowVersionId}":
    get:
      tags:
        - workflows
      summary: Download a ZIP file of a workflow and all associated files.
      description: ""
      operationId: getWorkflowZip
      parameters:
        - name: workflowId
          in: path
          description: workflowId
          required: true
          schema:
            type: integer
            format: int64
        - name: workflowVersionId
          in: path
          description: workflowVersionId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: successful operation
      security:
        - BEARER:
            []
externalDocs:
  description: Dockstore documentation
  url: https://www.dockstore.org/docs/getting-started
servers:
  - url: https://dockstore.org:8443
components:
  requestBodies:
    PublishRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PublishRequest"
      description: PublishRequest to refresh the list of repos for a user
      required: true
    updateLabelsBody:
      content:
        application/json:
          schema:
            type: string
      description: This is here to appease Swagger. It requires PUT methods to have a body,
        even if it is empty. Please leave it empty.
    addTokenBody:
      content:
        application/json:
          schema:
            type: string
      description: code
    Workflow:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Workflow"
      description: Workflow with updated information
      required: true
    DockstoreTool:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DockstoreTool"
      description: Tool with updated information
      required: true
    SourceFileArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/SourceFile"
      description: Set of updated sourcefiles, add files by adding new files with unknown
        paths, delete files by including them with emptied content
      required: true
    StarRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/StarRequest"
      description: StarRequest to star a repo for a user
      required: true
    VerifyRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/VerifyRequest"
      description: Object containing verification information.
      required: true
  securitySchemes:
    BEARER:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    Alias:
      type: object
      properties:
        content:
          type: string
    Collection:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
          description: Implementation specific ID for the collection in this web service
        entries:
          type: array
          uniqueItems: true
          items:
            $ref: "#/components/schemas/Entry"
        organizationID:
          type: integer
          format: int64
        aliases:
          type: object
          description: aliases can be used as an alternate unique id for collections
          additionalProperties:
            $ref: "#/components/schemas/Alias"
        dbCreateDate:
          type: string
          format: date-time
        dbUpdateDate:
          type: string
          format: date-time
        organizationName:
          type: string
          description: The name of the organization the collection belongs to
          readOnly: true
        name:
          type: string
          example: Alignment
          description: Name of the collection.
          minLength: 3
          maxLength: 39
          pattern: "[a-zA-Z][a-zA-Z\\d]*"
        description:
          type: string
          description: Description of the collection
        displayName:
          type: string
          description: Display name for a collection (Ex. Recommended Alignment
            Algorithms). Not used for links.
          minLength: 3
          maxLength: 50
          pattern: "[\\w ,_\\-&()']*"
        topic:
          type: string
          description: Short description of the collection
    CollectionOrganization:
      type: object
      properties:
        collectionId:
          type: integer
          format: int64
        collectionName:
          type: string
        organizationId:
          type: integer
          format: int64
        organizationName:
          type: string
    DescriptorLanguageBean:
      type: object
      properties:
        value:
          type: string
        friendlyName:
          type: string
    DockstoreTool:
      type: object
      required:
        - defaultCWLTestParameterFile
        - defaultWDLTestParameterFile
        - default_cwl_path
        - default_dockerfile_path
        - default_wdl_path
        - gitUrl
        - mode
        - name
        - namespace
        - private_access
        - registry_string
      properties:
        id:
          type: integer
          format: int64
          description: Implementation specific ID for the container in this web service
        aliases:
          type: object
          description: aliases can be used as an alternate unique id for entries
          additionalProperties:
            $ref: "#/components/schemas/Alias"
        dbCreateDate:
          type: string
          format: date-time
        dbUpdateDate:
          type: string
          format: date-time
        custom_docker_registry_path:
          type: string
          readOnly: true
        last_modified_date:
          type: string
          format: date-time
          readOnly: true
        has_checker:
          type: boolean
          readOnly: true
        input_file_formats:
          type: array
          readOnly: true
          uniqueItems: true
          items:
            $ref: "#/components/schemas/FileFormat"
        output_file_formats:
          type: array
          readOnly: true
          uniqueItems: true
          items:
            $ref: "#/components/schemas/FileFormat"
        author:
          type: string
          description: This is the name of the author stated in the Dockstore.cwl
        description:
          type: string
          description: This is a human-readable description of this container and what it
            is trying to accomplish, required GA4GH
        labels:
          type: array
          description: Labels (i.e. meta tags) for describing the purpose and contents of
            containers
          uniqueItems: true
          items:
            $ref: "#/components/schemas/Label"
        users:
          type: array
          description: This indicates the users that have control over this entry,
            dockstore specific
          uniqueItems: true
          items:
            $ref: "#/components/schemas/User"
        starredUsers:
          type: array
          description: This indicates the users that have starred this entry, dockstore
            specific
          uniqueItems: true
          items:
            $ref: "#/components/schemas/User"
        email:
          type: string
          description: This is the email of the git organization
        defaultVersion:
          type: string
          description: This is the default version of the entry
        is_published:
          type: boolean
          description: Implementation specific visibility in this web service
        last_modified:
          type: integer
          format: int32
          description: Implementation specific timestamp for last modified
        lastUpdated:
          type: string
          format: date-time
          description: Implementation specific timestamp for last updated on webservice
        gitUrl:
          type: string
          description: This is a link to the associated repo with a descriptor, required
            GA4GH
        checker_id:
          type: integer
          format: int64
          description: The id of the associated checker workflow
          readOnly: true
        mode:
          type: string
          description: This indicates what mode this is in which informs how we do things
            like refresh, dockstore specific
          enum:
            - AUTO_DETECT_QUAY_TAGS_AUTOMATED_BUILDS
            - AUTO_DETECT_QUAY_TAGS_WITH_MIXED
            - MANUAL_IMAGE_PATH
            - HOSTED
        name:
          type: string
          description: "This is the name of the container, required: GA4GH"
        default_dockerfile_path:
          type: string
          description: "This indicates for the associated git repository, the default path
            to the Dockerfile, required: GA4GH"
        default_cwl_path:
          type: string
          description: "This indicates for the associated git repository, the default path
            to the CWL document, required: GA4GH"
        default_wdl_path:
          type: string
          description: This indicates for the associated git repository, the default path
            to the WDL document
        defaultCWLTestParameterFile:
          type: string
          description: This indicates for the associated git repository, the default path
            to the CWL test parameter file
        defaultWDLTestParameterFile:
          type: string
          description: This indicates for the associated git repository, the default path
            to the WDL test parameter file
        tool_maintainer_email:
          type: string
          description: The email address of the tool maintainer. Required for private
            repositories
        private_access:
          type: boolean
          description: Is the docker image private or not.
        toolname:
          type: string
          description: 'This is the tool name of the container, when not-present this will
            function just like 0.1 dockstorewhen present, this can be used to
            distinguish between two containers based on the same image, but
            associated with different CWL and Dockerfile documents. i.e. two
            containers with the same registry+namespace+name but different
            toolnames will be two different entries in the dockstore
            registry/namespace/name/tool, different options to edit tags, and
            only the same insofar as they would "docker pull" the same image,
            required: GA4GH'
        namespace:
          type: string
          description: "This is a docker namespace for the container, required: GA4GH"
        registry_string:
          type: string
          description: "This is a specific docker provider like quay.io or dockerhub or
            n/a?, required: GA4GH"
        lastBuild:
          type: string
          format: date-time
          description: Implementation specific timestamp for last built
        tags:
          type: array
          description: Implementation specific tracking of valid build tags for the docker
            container
          uniqueItems: true
          items:
            $ref: "#/components/schemas/Tag"
        path:
          type: string
        descriptorType:
          type: array
          readOnly: true
          items:
            type: string
        tool_path:
          type: string
          readOnly: true
        registry:
          type: string
          enum:
            - QUAY_IO
            - DOCKER_HUB
            - GITLAB
            - AMAZON_ECR
            - SEVEN_BRIDGES
      description: >-
        This describes one entry in the dockstore. Logically, this currently
        means one tuple of registry (either quay or docker hub), organization,
        image name, and toolname which can be
         * associated with CWL and Dockerfile documents
    Entry:
      type: object
      required:
        - gitUrl
      properties:
        id:
          type: integer
          format: int64
          description: Implementation specific ID for the container in this web service
        aliases:
          type: object
          description: aliases can be used as an alternate unique id for entries
          additionalProperties:
            $ref: "#/components/schemas/Alias"
        dbCreateDate:
          type: string
          format: date-time
        dbUpdateDate:
          type: string
          format: date-time
        last_modified_date:
          type: string
          format: date-time
          readOnly: true
        has_checker:
          type: boolean
          readOnly: true
        input_file_formats:
          type: array
          readOnly: true
          uniqueItems: true
          items:
            $ref: "#/components/schemas/FileFormat"
        output_file_formats:
          type: array
          readOnly: true
          uniqueItems: true
          items:
            $ref: "#/components/schemas/FileFormat"
        author:
          type: string
          description: This is the name of the author stated in the Dockstore.cwl
        description:
          type: string
          description: This is a human-readable description of this container and what it
            is trying to accomplish, required GA4GH
        labels:
          type: array
          description: Labels (i.e. meta tags) for describing the purpose and contents of
            containers
          uniqueItems: true
          items:
            $ref: "#/components/schemas/Label"
        users:
          type: array
          description: This indicates the users that have control over this entry,
            dockstore specific
          uniqueItems: true
          items:
            $ref: "#/components/schemas/User"
        starredUsers:
          type: array
          description: This indicates the users that have starred this entry, dockstore
            specific
          uniqueItems: true
          items:
            $ref: "#/components/schemas/User"
        email:
          type: string
          description: This is the email of the git organization
        defaultVersion:
          type: string
          description: This is the default version of the entry
        is_published:
          type: boolean
          description: Implementation specific visibility in this web service
        last_modified:
          type: integer
          format: int32
          description: Implementation specific timestamp for last modified
        lastUpdated:
          type: string
          format: date-time
          description: Implementation specific timestamp for last updated on webservice
        gitUrl:
          type: string
          description: This is a link to the associated repo with a descriptor, required
            GA4GH
        checker_id:
          type: integer
          format: int64
          description: The id of the associated checker workflow
          readOnly: true
    Error:
      type: object
      required:
        - code
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Event:
      type: object
      required:
        - type
      properties:
        id:
          type: integer
          format: int64
          description: Implementation specific ID for the event in this web service
        dbCreateDate:
          type: string
          format: date-time
        dbUpdateDate:
          type: string
          format: date-time
        user:
          $ref: "#/components/schemas/User"
        organization:
          $ref: "#/components/schemas/Organization"
        tool:
          $ref: "#/components/schemas/DockstoreTool"
        workflow:
          $ref: "#/components/schemas/Workflow"
        collection:
          $ref: "#/components/schemas/Collection"
        initiatorUser:
          $ref: "#/components/schemas/User"
        type:
          type: string
          description: The event type.
          enum:
            - CREATE_ORG
            - DELETE_ORG
            - MODIFY_ORG
            - APPROVE_ORG
            - REJECT_ORG
            - ADD_USER_TO_ORG
            - REMOVE_USER_FROM_ORG
            - MODIFY_USER_ROLE_ORG
            - APPROVE_ORG_INVITE
            - REJECT_ORG_INVITE
            - CREATE_COLLECTION
            - MODIFY_COLLECTION
            - REMOVE_FROM_COLLECTION
            - ADD_TO_COLLECTION
      description: This describes events that occur on the Dockstore site.
    ExtendedUserData:
      type: object
      properties:
        canChangeUsername:
          type: boolean
          description: Whether a user can change their username
          readOnly: true
      description: Contains expensive data for end users for the dockstore
    FileFormat:
      type: object
      required:
        - value
      properties:
        value:
          type: string
          description: String representation of the file format
      description: This describes an input or output file format that is associated with an
        entry in the dockstore
    FileWrapper:
      type: object
      properties:
        content:
          type: string
          description: The content of the file itself. One of url or content is required.
        url:
          type: string
          description: Optional url to the underlying content, should include version
            information, and can include a git hash.  Note that this URL should
            resolve to the raw unwrapped content that would otherwise be
            available in content. One of url or content is required.
      description: "A file provides content for one of - A tool descriptor is a metadata
        document that describes one or more tools. - A tool document that
        describes how to test with one or more sample test JSON. - A
        containerfile is a document that describes how to build a particular
        container image. Examples include Dockerfiles for creating Docker images
        and Singularity recipes for Singularity images "
    Label:
      type: object
      required:
        - value
      properties:
        id:
          type: integer
          format: int64
          description: Implementation specific ID for the container in this web service
          readOnly: true
        value:
          type: string
          description: String representation of the tag
      description: This describes a descriptive label that can be placed on an entry in the
        dockstore
    Limits:
      type: object
      properties:
        hostedEntryCountLimit:
          type: integer
          format: int32
        hostedEntryVersionLimit:
          type: integer
          format: int32
    Metadata:
      type: object
      required:
        - api_version
        - version
      properties:
        version:
          type: string
          description: The version of this registry
        api_version:
          type: string
          description: The version of the GA4GH tool-registry API supported by this registry
        country:
          type: string
          description: A country code for the registry (ISO 3166-1 alpha-3)
        friendly_name:
          type: string
          description: A friendly name that can be used in addition to the hostname to
            describe a registry
      description: Describes this registry to better allow for mirroring and indexing.
    MetadataV1:
      type: object
      properties:
        version:
          type: string
        api-version:
          type: string
        country:
          type: string
        friendly-name:
          type: string
      description: Describes this registry to better allow for mirroring and indexing.
    Organization:
      type: object
      required:
        - name
        - status
        - users
      properties:
        id:
          type: integer
          format: int64
          description: Implementation specific ID for the organization in this web service
        aliases:
          type: object
          description: aliases can be used as an alternate unique id for organizations
          additionalProperties:
            $ref: "#/components/schemas/Alias"
        dbCreateDate:
          type: string
          format: date-time
        dbUpdateDate:
          type: string
          format: date-time
        name:
          type: string
          example: OICR
          description: Name of the organization (ex. OICR)
          minLength: 3
          maxLength: 39
          pattern: "[a-zA-Z][a-zA-Z\\d]*"
        description:
          type: string
          description: Description of the organization
        link:
          type: string
          description: Link to the organization website
        location:
          type: string
          description: Location of the organization
        email:
          type: string
          description: Contact email for the organization
        status:
          type: string
          description: Is the organization approved, pending, or rejected
          enum:
            - PENDING
            - REJECTED
            - APPROVED
        users:
          type: array
          description: Set of users in the organization
          uniqueItems: true
          items:
            $ref: "#/components/schemas/OrganizationUser"
        topic:
          type: string
          description: Short description of the organization
        displayName:
          type: string
          description: Display name for an organization (Ex. Ontario Institute for Cancer
            Research). Not used for links.
          minLength: 3
          maxLength: 50
          pattern: "[\\w ,_\\-&()']*"
        avatarUrl:
          type: string
          description: Logo URL
          pattern: ([^\s]+)(?i)(\.jpg|\.jpeg|\.png|\.gif)
    OrganizationUser:
      type: object
      required:
        - accepted
        - role
      properties:
        id:
          $ref: "#/components/schemas/OrganizationUserId"
        user:
          $ref: "#/components/schemas/User"
        organization:
          $ref: "#/components/schemas/Organization"
        role:
          type: string
          description: The role of the user in the organization
          enum:
            - MAINTAINER
            - MEMBER
        accepted:
          type: boolean
          description: Has the user accepted their membership.
        dbCreateDate:
          type: string
          format: date-time
        dbUpdateDate:
          type: string
          format: date-time
    OrganizationUserId:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        organizationId:
          type: integer
          format: int64
    Permission:
      type: object
      properties:
        email:
          type: string
        role:
          type: string
          enum:
            - OWNER
            - WRITER
            - READER
    Profile:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        avatarURL:
          type: string
        company:
          type: string
        location:
          type: string
        bio:
          type: string
        username:
          type: string
    PublishRequest:
      type: object
      properties:
        publish:
          type: boolean
          readOnly: true
    RegistryBean:
      type: object
      properties:
        dockerPath:
          type: string
        friendlyName:
          type: string
        url:
          type: string
        privateOnly:
          type: string
        customDockerPath:
          type: string
        enum:
          type: string
    SharedWorkflows:
      type: object
      properties:
        role:
          type: string
          enum:
            - OWNER
            - WRITER
            - READER
        workflows:
          type: array
          items:
            $ref: "#/components/schemas/Workflow"
    SourceControlBean:
      type: object
      properties:
        value:
          type: string
        friendlyName:
          type: string
    SourceFile:
      type: object
      required:
        - absolutePath
        - path
        - type
      properties:
        id:
          type: integer
          format: int64
          description: Implementation specific ID for the source file in this web service
        verifiedBySource:
          type: object
          description: maps from platform to whether an entry successfully ran on it using
            this test json
          additionalProperties:
            $ref: "#/components/schemas/VerificationInformation"
        type:
          type: string
          description: Enumerates the type of file
          enum:
            - DOCKSTORE_CWL
            - DOCKSTORE_WDL
            - DOCKERFILE
            - CWL_TEST_JSON
            - WDL_TEST_JSON
            - NEXTFLOW
            - NEXTFLOW_CONFIG
            - NEXTFLOW_TEST_PARAMS
            - DOCKSTORE_YML
        content:
          type: string
          description: Cache for the contents of the target file
        path:
          type: string
          description: Path to sourcefile relative to its parent
        absolutePath:
          type: string
          description: Absolute path of sourcefile in git repo
    StarRequest:
      type: object
      properties:
        star:
          type: boolean
          readOnly: true
    Tag:
      type: object
      required:
        - name
        - reference
      properties:
        id:
          type: integer
          format: int64
          description: Implementation specific ID for the tag in this web service
          readOnly: true
        referenceType:
          type: string
          description: This indicates the type of git (or other source control) reference
          enum:
            - COMMIT
            - TAG
            - BRANCH
            - NOT_APPLICABLE
            - UNSET
        validations:
          type: array
          description: Cached validations for each version.
          uniqueItems: true
          items:
            $ref: "#/components/schemas/Validation"
        last_modified:
          type: string
          format: date-time
          description: The last time this image was modified in the image registry
        reference:
          type: string
          description: git commit/tag/branch
        sourceFiles:
          type: array
          description: Cached files for each version. Includes Dockerfile and Descriptor
            files
          uniqueItems: true
          items:
            $ref: "#/components/schemas/SourceFile"
        hidden:
          type: boolean
          description: Implementation specific, whether this row is visible to other users
            aside from the owner
        valid:
          type: boolean
          description: Implementation specific, whether this tag has valid files from
            source code repo
        name:
          type: string
          description: Implementation specific, can be a quay.io or docker hub tag name
        dirtyBit:
          type: boolean
          description: True if user has altered the tag
        verified:
          type: boolean
          description: Whether this version has been verified or not
        verifiedSource:
          type: string
          description: Verified source for the version
        doiURL:
          type: string
          description: This is a URL for the DOI for the version of the entry
        doiStatus:
          type: string
          description: This indicates the DOI status
          enum:
            - NOT_REQUESTED
            - REQUESTED
            - CREATED
        versionEditor:
          $ref: "#/components/schemas/User"
        size:
          type: integer
          format: int64
          description: Size of the image
        dockerfile_path:
          type: string
          description: Path for the Dockerfile
        cwl_path:
          type: string
          description: Path for the CWL document
        wdl_path:
          type: string
          description: Path for the WDL document
        automated:
          type: boolean
          description: Implementation specific, indicates whether this is an automated
            build on quay.io
        workingDirectory:
          type: string
        image_id:
          type: string
        input_file_formats:
          type: array
          description: File formats for describing the input file formats of versions
            (tag/workflowVersion)
          uniqueItems: true
          items:
            $ref: "#/components/schemas/FileFormat"
        output_file_formats:
          type: array
          description: File formats for describing the output file formats of versions
            (tag/workflowVersion)
          uniqueItems: true
          items:
            $ref: "#/components/schemas/FileFormat"
        commitID:
          type: string
          description: This is the commit id for the source control that the files belong to
      description: This describes one tag associated with a container.
    Token:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Implementation specific ID for the token in this web service
          readOnly: true
        tokenSource:
          type: string
          description: Source website for this token
        content:
          type: string
          description: Contents of the access token
        username:
          type: string
          description: When an integrated service is not aware of the username, we store it
        refreshToken:
          type: string
        userId:
          type: integer
          format: int64
        token:
          type: string
          description: Contents of the access token
          readOnly: true
      description: Access tokens for this web service and integrated services like quay.io
        and github
    Tool:
      type: object
      required:
        - author
        - id
        - organization
        - toolclass
        - url
        - versions
      properties:
        url:
          type: string
          example: http://agora.broadinstitute.org/tools/123456
          description: The URL for this tool in this registry
        id:
          type: string
          example: "123456"
          description: A unique identifier of the tool, scoped to this registry
        aliases:
          type: array
          description: OPTIONAL A list of strings that can be used to identify this tool.
            This can be used to expose alternative ids (such as GUIDs) for a
            tool for registries. Can be used to match tools across registries.
          items:
            type: string
        organization:
          type: string
          description: The organization that published the image.
        toolname:
          type: string
          description: The name of the tool.
        toolclass:
          $ref: "#/components/schemas/ToolClass"
        description:
          type: string
          description: The description of the tool.
        author:
          type: string
          description: Contact information for the author of this tool entry in the
            registry. (More complex authorship information is handled by the
            descriptor)
        meta_version:
          type: string
          description: The version of this tool in the registry. Iterates when fields like
            the description, author, etc. are updated.
        contains:
          type: array
          example: '"https://bio.tools/tool/mytum.de/SNAP2/1"'
          description: An array of IDs for the applications that are stored inside this tool
          items:
            type: string
        has_checker:
          type: boolean
          description: Whether this tool has a checker tool associated with it
        checker_url:
          type: string
          description: Optional url to the checker tool that will exit successfully if this
            tool produced the expected result given test data.
        verified:
          type: boolean
          description: Reports whether this tool has been verified by a specific
            organization or individual
        verified_source:
          type: string
          description: Source of metadata that can support a verified tool, such as an
            email or URL
        signed:
          type: boolean
          description: Reports whether this tool has been signed.
        versions:
          type: array
          description: A list of versions for this tool
          items:
            $ref: "#/components/schemas/ToolVersion"
      description: A tool (or described tool) is defined as a tuple of a descriptor file
        (which potentially consists of multiple files), a set of container
        images, and a set of instructions for creating those images.
    ToolClass:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the class
        name:
          type: string
          description: A short friendly name for the class
        description:
          type: string
          description: A longer explanation of what this class is and what it can accomplish
      description: Describes a class (type) of tool allowing us to categorize workflows,
        tasks, and maybe even other entities (such as services) separately
    ToolDescriptor:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - CWL
            - WDL
            - NFL
        descriptor:
          type: string
          description: The descriptor that represents this version of the tool.
        url:
          type: string
          example: https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/ea2a5db69bd20a42976838790bc29294df3af02b/delly_docker/Delly.cwl
          description: Optional url to the underlying tool descriptor, should include
            version information, and can include a git hash
      description: A tool descriptor is a metadata document that describes one or more
        tools.
    ToolDockerfile:
      type: object
      required:
        - dockerfile
      properties:
        dockerfile:
          type: string
          description: The dockerfile content for this tool.
        url:
          type: string
          description: Optional url to the dockerfile used to build this image, should
            include version information, and can include a git hash  (e.g.
            https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/c83478829802b4d36374870843821abe1b625a71/delly_docker/Dockerfile
            )
      description: A tool dockerfile is a document that describes how to build a particular
        Docker image.
    ToolFile:
      type: object
      properties:
        path:
          type: string
          description: Relative path of the file.  A descriptor's path can be used with the
            GA4GH .../{type}/descriptor/{relative_path} endpoint
        file_type:
          type: string
          enum:
            - TEST_FILE
            - PRIMARY_DESCRIPTOR
            - SECONDARY_DESCRIPTOR
            - CONTAINERFILE
            - OTHER
    ToolTestsV1:
      type: object
      properties:
        test:
          type: string
          description: Optional test JSON content for this tool. (Note that one of test and
            URL are required)
        url:
          type: string
          description: Optional url to the test JSON used to test this tool. Note that this
            URL should resolve to the raw unwrapped content that would otherwise
            be available in test.
      description: A tool document that describes how to test with one or more sample test
        JSON.
    ToolV1:
      type: object
      properties:
        url:
          type: string
        id:
          type: string
        organization:
          type: string
        toolname:
          type: string
        toolclass:
          $ref: "#/components/schemas/ToolClass"
        description:
          type: string
        author:
          type: string
        meta-version:
          type: string
        contains:
          type: array
          items:
            type: string
        verified:
          type: boolean
        verified-source:
          type: string
        signed:
          type: boolean
        versions:
          type: array
          items:
            $ref: "#/components/schemas/ToolVersionV1"
      description: A tool (or described tool) describes one pairing of a tool as described
        in a descriptor file (which potentially describes multiple tools) and a
        Docker image.
    ToolVersion:
      type: object
      required:
        - id
        - url
      properties:
        name:
          type: string
          description: The name of the version.
        url:
          type: string
          example: http://agora.broadinstitute.org/tools/123456/1
          description: The URL for this tool in this registry
        id:
          type: string
          example: v1
          description: An identifier of the version of this tool for this particular tool
            registry
        image:
          type: string
          example: quay.io/seqware/seqware_full/1.1
          description: The docker path to the image (and version) for this tool
        registry_url:
          type: string
          description: A URL to a Singularity registry is provided when a specific type of
            image does not use ids in the Docker format. Used along with
            image_name to locate a specific image.
        image_name:
          type: string
          description: Used in conjunction with a registry_url if provided to locate images
        descriptor_type:
          type: array
          description: The type (or types) of descriptors available.
          items:
            type: string
            enum:
              - CWL
              - WDL
              - NFL
        containerfile:
          type: boolean
          description: Reports if this tool has a containerfile available.
        meta_version:
          type: string
          description: The version of this tool version in the registry. Iterates when
            fields like the description, author, etc. are updated.
        verified:
          type: boolean
          description: Reports whether this tool has been verified by a specific
            organization or individual
        verified_source:
          type: string
          description: Source of metadata that can support a verified tool, such as an
            email or URL
      description: A tool version describes a particular iteration of a tool as described
        by a reference to a specific image and/or documents.
    ToolVersionV1:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        id:
          type: string
        image:
          type: string
        descriptor-type:
          type: array
          items:
            type: string
            enum:
              - CWL
              - WDL
        dockerfile:
          type: boolean
        meta-version:
          type: string
        verified:
          type: boolean
        verified-source:
          type: string
      description: A tool version describes a particular iteration of a tool as described
        by a reference to a specific image and dockerfile.
    User:
      type: object
      required:
        - curator
        - isAdmin
        - setupComplete
      properties:
        id:
          type: integer
          format: int64
          description: Implementation specific ID for the container in this web service
          readOnly: true
        userProfiles:
          type: object
          description: Profile information of the user retrieved from 3rd party sites
            (GitHub, Google, etc)
          additionalProperties:
            $ref: "#/components/schemas/Profile"
        username:
          type: string
          description: Username on dockstore
        isAdmin:
          type: boolean
          description: Indicates whether this user is an admin
        avatarUrl:
          type: string
          description: URL of user avatar on GitHub/Google that can be selected by the user
        name:
          type: string
        curator:
          type: boolean
          description: Indicates whether this user is a curator
        setupComplete:
          type: boolean
          description: Indicates whether this user has accepted their username
      description: End users for the dockstore
    Validation:
      type: object
      required:
        - id
        - message
        - type
        - valid
      properties:
        id:
          type: integer
          format: int64
          description: Implementation specific ID for the source file in this web service
        type:
          type: string
          description: Enumerates the type of file
          enum:
            - DOCKSTORE_CWL
            - DOCKSTORE_WDL
            - DOCKERFILE
            - CWL_TEST_JSON
            - WDL_TEST_JSON
            - NEXTFLOW
            - NEXTFLOW_CONFIG
            - NEXTFLOW_TEST_PARAMS
            - DOCKSTORE_YML
        valid:
          type: boolean
          description: Is the file type valid
        message:
          type: string
          description: Mapping of filepath to validation message
    VerificationInformation:
      type: object
      properties:
        verified:
          type: boolean
        metadata:
          type: string
        platformVersion:
          type: string
    VerifyRequest:
      type: object
      properties:
        verify:
          type: boolean
          readOnly: true
        verifiedSource:
          type: string
          readOnly: true
    Workflow:
      type: object
      required:
        - defaultTestParameterFilePath
        - descriptorType
        - gitUrl
        - mode
        - organization
        - repository
        - sourceControl
        - workflow_path
      properties:
        id:
          type: integer
          format: int64
          description: Implementation specific ID for the container in this web service
        aliases:
          type: object
          description: aliases can be used as an alternate unique id for entries
          additionalProperties:
            $ref: "#/components/schemas/Alias"
        dbCreateDate:
          type: string
          format: date-time
        dbUpdateDate:
          type: string
          format: date-time
        parent_id:
          type: integer
          format: int64
          readOnly: true
        last_modified_date:
          type: string
          format: date-time
          readOnly: true
        has_checker:
          type: boolean
          readOnly: true
        input_file_formats:
          type: array
          readOnly: true
          uniqueItems: true
          items:
            $ref: "#/components/schemas/FileFormat"
        output_file_formats:
          type: array
          readOnly: true
          uniqueItems: true
          items:
            $ref: "#/components/schemas/FileFormat"
        author:
          type: string
          description: This is the name of the author stated in the Dockstore.cwl
        description:
          type: string
          description: This is a human-readable description of this container and what it
            is trying to accomplish, required GA4GH
        labels:
          type: array
          description: Labels (i.e. meta tags) for describing the purpose and contents of
            containers
          uniqueItems: true
          items:
            $ref: "#/components/schemas/Label"
        users:
          type: array
          description: This indicates the users that have control over this entry,
            dockstore specific
          uniqueItems: true
          items:
            $ref: "#/components/schemas/User"
        starredUsers:
          type: array
          description: This indicates the users that have starred this entry, dockstore
            specific
          uniqueItems: true
          items:
            $ref: "#/components/schemas/User"
        email:
          type: string
          description: This is the email of the git organization
        defaultVersion:
          type: string
          description: This is the default version of the entry
        is_published:
          type: boolean
          description: Implementation specific visibility in this web service
        last_modified:
          type: integer
          format: int32
          description: Implementation specific timestamp for last modified
        lastUpdated:
          type: string
          format: date-time
          description: Implementation specific timestamp for last updated on webservice
        gitUrl:
          type: string
          description: This is a link to the associated repo with a descriptor, required
            GA4GH
        checker_id:
          type: integer
          format: int64
          description: The id of the associated checker workflow
          readOnly: true
        mode:
          type: string
          description: This indicates what mode this is in which informs how we do things
            like refresh, dockstore specific
          enum:
            - FULL
            - STUB
            - HOSTED
        workflowName:
          type: string
          description: This is the name of the workflow, not needed when only one workflow
            in a repo
        organization:
          type: string
          description: This is a git organization for the workflow
        repository:
          type: string
          description: This is a git repository name
        sourceControl:
          type: string
          description: "This is a specific source control provider like github or bitbucket
            or n/a?, required: GA4GH"
        descriptorType:
          type: string
          description: This is a descriptor type for the workflow, either CWL or WDL
            (Defaults to CWL)
        workflow_path:
          type: string
          description: This indicates for the associated git repository, the default path
            to the CWL document
        defaultTestParameterFilePath:
          type: string
          description: This indicates for the associated git repository, the default path
            to the test parameter file
        workflowVersions:
          type: array
          description: Implementation specific tracking of valid build workflowVersions for
            the docker container
          uniqueItems: true
          items:
            $ref: "#/components/schemas/WorkflowVersion"
        is_checker:
          type: boolean
        full_workflow_path:
          type: string
          readOnly: true
        path:
          type: string
        source_control_provider:
          type: string
          readOnly: true
      description: This describes one workflow in the dockstore
    WorkflowVersion:
      type: object
      required:
        - name
        - reference
      properties:
        id:
          type: integer
          format: int64
          description: Implementation specific ID for the tag in this web service
          readOnly: true
        referenceType:
          type: string
          description: This indicates the type of git (or other source control) reference
          enum:
            - COMMIT
            - TAG
            - BRANCH
            - NOT_APPLICABLE
            - UNSET
        validations:
          type: array
          description: Cached validations for each version.
          uniqueItems: true
          items:
            $ref: "#/components/schemas/Validation"
        workingDirectory:
          type: string
        last_modified:
          type: string
          format: date-time
          description: The last time this image was modified in the image registry
        reference:
          type: string
          description: git commit/tag/branch
        sourceFiles:
          type: array
          description: Cached files for each version. Includes Dockerfile and Descriptor
            files
          uniqueItems: true
          items:
            $ref: "#/components/schemas/SourceFile"
        hidden:
          type: boolean
          description: Implementation specific, whether this row is visible to other users
            aside from the owner
        valid:
          type: boolean
          description: Implementation specific, whether this tag has valid files from
            source code repo
        name:
          type: string
          description: Implementation specific, can be a quay.io or docker hub tag name
        dirtyBit:
          type: boolean
          description: True if user has altered the tag
        verified:
          type: boolean
          description: Whether this version has been verified or not
        verifiedSource:
          type: string
          description: Verified source for the version
        doiURL:
          type: string
          description: This is a URL for the DOI for the version of the entry
        doiStatus:
          type: string
          description: This indicates the DOI status
          enum:
            - NOT_REQUESTED
            - REQUESTED
            - CREATED
        versionEditor:
          $ref: "#/components/schemas/User"
        workflow_path:
          type: string
          description: Path for the workflow
        input_file_formats:
          type: array
          description: File formats for describing the input file formats of versions
            (tag/workflowVersion)
          uniqueItems: true
          items:
            $ref: "#/components/schemas/FileFormat"
        output_file_formats:
          type: array
          description: File formats for describing the output file formats of versions
            (tag/workflowVersion)
          uniqueItems: true
          items:
            $ref: "#/components/schemas/FileFormat"
        commitID:
          type: string
          description: This is the commit id for the source control that the files belong to
      description: This describes one workflow version associated with a workflow.
