<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<!--
  ~    Copyright 2020 OICR
  ~
  ~    Licensed under the Apache License, Version 2.0 (the "License");
  ~    you may not use this file except in compliance with the License.
  ~    You may obtain a copy of the License at
  ~
  ~        http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~    Unless required by applicable law or agreed to in writing, software
  ~    distributed under the License is distributed on an "AS IS" BASIS,
  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~    See the License for the specific language governing permissions and
  ~    limitations under the License.
  -->

<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd"
                   context="1.8.0">
    <changeSet author="waltershands (generated)" id="supportconceptDOI">
        <addColumn tableName="service">
            <column name="conceptdoi" type="varchar(255)"/>
        </addColumn>
        <addColumn tableName="tool">
            <column name="conceptdoi" type="varchar(255)"/>
        </addColumn>
        <addColumn tableName="workflow">
            <column name="conceptdoi" type="varchar(255)"/>
        </addColumn>
    </changeSet>
    <changeSet id="frozen join table" author="coverbeck">
        <sql dbms="postgresql">
            alter table version_sourcefile enable row level security;
            alter table version_sourcefile force row level security;
            /* All users can read the table, but cannot update or delete if frozen */
            create policy select_frozenfiles on version_sourcefile for select using(true);
            /* Don't allow new source files to be added to an a frozen version */
            create policy insert_frozenfiles on version_sourcefile for insert with check( not(select v.frozen from workflowversion v where id = versionid union select t.frozen from tag t where t.id = versionid));
            /* Don't allow a new file to be added to the version in the join table if any of the source files are already frozen (easier to query this way instead of querying two tables like above) */
            create policy update_frozenfiles on version_sourcefile for update using (not (select sf.frozen from sourcefile sf where sourcefileid = sf.id));
            create policy delete_frozenfiles on version_sourcefile for delete using (not (select sf.frozen from sourcefile sf where sourcefileid = sf.id));
        </sql>
    </changeSet>
    <changeSet author="waltershands (generated)" id="supportworkflowalias">
        <createTable tableName="workflowversion_alias">
            <column name="id" type="BIGINT">
                <constraints primaryKey="true" primaryKeyName="workflowversion_alias_pkey"/>
            </column>
            <column name="content" type="TEXT"/>
            <column name="dbcreatedate" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="dbupdatedate" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="alias" type="TEXT">
                <constraints primaryKey="true" primaryKeyName="workflowversion_alias_pkey"/>
            </column>
        </createTable>
        <addUniqueConstraint columnNames="alias" constraintName="workflow_version_aliases_are_unique" tableName="workflowversion_alias"/>
        <addForeignKeyConstraint baseColumnNames="id" baseTableName="workflowversion_alias" constraintName="fk_workflowversion_alias" deferrable="false" initiallyDeferred="false" onDelete="NO ACTION" onUpdate="NO ACTION" referencedColumnNames="id" referencedTableName="workflowversion"/>
    </changeSet>
    <changeSet author="natalieperez (generated)" id="create_images_checksums">
        <createTable tableName="entry_version_image">
            <column name="versionid" type="BIGINT">
                <constraints primaryKey="true" primaryKeyName="entry_version_image_pkey"/>
            </column>
            <column name="imageid" type="BIGINT">
                <constraints primaryKey="true" primaryKeyName="entry_version_image_pkey"/>
            </column>
        </createTable>
        <createTable tableName="image">
            <column autoIncrement="true" name="id" type="BIGSERIAL">
                <constraints primaryKey="true" primaryKeyName="image_pkey"/>
            </column>
            <column name="checksums" type="VARCHAR"/>
            <column name="dbcreatedate" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="dbupdatedate" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="image_id" type="VARCHAR(255)"/>
            <column name="repository" type="VARCHAR(255)"/>
            <column name="tag" type="VARCHAR(255)"/>
        </createTable>
        <addUniqueConstraint columnNames="imageid" constraintName="uk_imageid" tableName="entry_version_image"/>
        <addForeignKeyConstraint baseColumnNames="imageid" baseTableName="entry_version_image" constraintName="fk_entryVersionImage" deferrable="false" initiallyDeferred="false" onDelete="NO ACTION" onUpdate="NO ACTION" referencedColumnNames="id" referencedTableName="image"/>
    </changeSet>
    <changeSet author="gluu (generated)" id="addVersionMetadata">
        <addColumn tableName="version_metadata">
            <column name="author" type="varchar(255)"/>
        </addColumn>
        <addColumn tableName="version_metadata">
            <column name="description" type="text"/>
        </addColumn>
        <addColumn tableName="version_metadata">
            <column name="description_source" type="varchar(255)"/>
        </addColumn>
        <addColumn tableName="version_metadata">
            <column name="email" type="varchar(255)"/>
        </addColumn>
    </changeSet>
    <changeSet id="remove_all_stubs" author="agduncan">
        <sql dbms="postgresql">
            DELETE FROM entry_label WHERE entryid IN (SELECT id FROM workflow WHERE mode='STUB');
            DELETE FROM entry_blacklistedversionnames WHERE entry_id IN (SELECT id FROM workflow WHERE mode='STUB');
            DELETE FROM entry_defaultpaths WHERE entry_id IN (SELECT id FROM workflow WHERE mode='STUB');
            DELETE FROM workflow WHERE mode='STUB' AND NOT ischecker;
        </sql>
    </changeSet>
    <changeSet author="esoth" id="notifications">
        <createTable tableName="notification">
            <column name="id" type="bigserial">
                <constraints primaryKey="true"/>
            </column>
            <column name="message" type="varchar(280)"/>
            <column name="expiration" type="timestamp"/>
            <column name="priority" type="varchar(255)"/>
            <column name="type" type="varchar(255)"/>
            <column name="dbcreatedate" type="timestamp"/>
            <column name="dbupdatedate" type="timestamp"/>
        </createTable>
    </changeSet>
    <changeSet id="set_null_db_times" author="aduncan">
        <sql dbms="postgresql">
            UPDATE tool SET dbcreatedate=lastupdated WHERE dbcreatedate IS NULL;
            UPDATE tool SET dbupdatedate=lastupdated WHERE dbupdatedate IS NULL;
        </sql>
        <update tableName="tool">
            <column name="dbcreatedate" value="2015-04-03T21:34:05Z"/>
            <where>dbcreatedate is null</where>
        </update>
        <update tableName="tool">
            <column name="dbupdatedate" value="2015-04-03T21:34:05Z"/>
            <where>dbupdatedate is null</where>
        </update>

        <sql dbms="postgresql">
            UPDATE tag SET dbcreatedate=lastbuilt WHERE dbcreatedate IS NULL;
            UPDATE tag SET dbupdatedate=lastbuilt WHERE dbupdatedate IS NULL;
        </sql>
        <update tableName="tag">
            <column name="dbcreatedate" value="2015-04-03T21:34:05Z"/>
            <where>dbcreatedate is null</where>
        </update>
        <update tableName="tag">
            <column name="dbupdatedate" value="2015-04-03T21:34:05Z"/>
            <where>dbupdatedate is null</where>
        </update>

        <sql dbms="postgresql">
            UPDATE workflow SET dbcreatedate=lastupdated WHERE dbcreatedate IS NULL;
            UPDATE workflow SET dbupdatedate=lastupdated WHERE dbupdatedate IS NULL;
        </sql>
        <update tableName="workflow">
            <column name="dbcreatedate" value="2015-04-03T21:34:05Z"/>
            <where>dbcreatedate is null</where>
        </update>
        <update tableName="workflow">
            <column name="dbupdatedate" value="2015-04-03T21:34:05Z"/>
            <where>dbupdatedate is null</where>
        </update>

        <sql dbms="postgresql">
            UPDATE workflowversion SET dbcreatedate=lastmodified WHERE dbcreatedate IS NULL;
            UPDATE workflowversion SET dbupdatedate=lastmodified WHERE dbupdatedate IS NULL;
        </sql>
        <update tableName="workflowversion">
            <column name="dbcreatedate" value="2015-04-03T21:34:05Z"/>
            <where>dbcreatedate is null</where>
        </update>
        <update tableName="workflowversion">
            <column name="dbupdatedate" value="2015-04-03T21:34:05Z"/>
            <where>dbupdatedate is null</where>
        </update>
    </changeSet>
    <changeSet id="add-not-null-db-dates" author="aduncan">
        <addNotNullConstraint tableName="workflow" columnName="dbcreatedate"/>
        <addNotNullConstraint tableName="workflow" columnName="dbupdatedate"/>
        <addNotNullConstraint tableName="service" columnName="dbcreatedate"/>
        <addNotNullConstraint tableName="service" columnName="dbupdatedate"/>
        <addNotNullConstraint tableName="tool" columnName="dbcreatedate"/>
        <addNotNullConstraint tableName="tool" columnName="dbupdatedate"/>

        <addNotNullConstraint tableName="workflowversion" columnName="dbcreatedate"/>
        <addNotNullConstraint tableName="workflowversion" columnName="dbupdatedate"/>
        <addNotNullConstraint tableName="tag" columnName="dbcreatedate"/>
        <addNotNullConstraint tableName="tag" columnName="dbupdatedate"/>
    </changeSet>

    <changeSet author="dyuen" id="restructure_workflowversions">
        <addColumn tableName="tag">
            <column name="parentid" type="int8">
            </column>
        </addColumn>
        <addColumn tableName="workflowversion">
            <column name="parentid" type="int8">
            </column>
        </addColumn>
        <!-- migrate data -->
        <sql dbms="postgresql">
            update workflowversion set parentid = wwv.workflowid from workflowversion as wv join workflow_workflowversion as wwv on wv.id = wwv.workflowversionid where workflowversion.id = wv.id;
            update tag set parentid = tt.toolid from tag as t join tool_tag as tt on t.id = tt.tagid where tag.id = t.id;
        </sql>

        <!-- clean-up -->
        <dropForeignKeyConstraint baseTableName="tool_tag" constraintName="fkjkn6qubuvn25bun52eqjleyl6"/>
        <dropForeignKeyConstraint baseTableName="tool_tag" constraintName="fkjtsjg6jdnwxoeicd27ujmeeaj"/>
        <dropForeignKeyConstraint baseTableName="workflow_workflowversion" constraintName="fkibmeux3552ua8dwnqdb8w6991"/>
        <dropUniqueConstraint constraintName="uk_encl8hnebnkcaxj9tlugr9cxh" tableName="workflow_workflowversion"/>
        <dropTable tableName="workflow_workflowversion"/>
        <dropTable tableName="tool_tag"/>
    </changeSet>

    <changeSet author="dyuen" id="cleanup invalid content">
        <!-- need to investigate whether too much content is being dropped and whether the right content is being dropped -->
        <comment>some orphaned versions are protected by security</comment>
        <sql dbms="postgresql">
            alter table workflowversion disable row level security;
            alter table tag disable row level security;
        </sql>

        <comment>delete the versions that are orphaned already</comment>
        <delete tableName="tag">
            <where>parentid is null</where>
        </delete>
        <delete tableName="workflowversion">
            <where>parentid is null</where>
        </delete>

        <comment>migrate content from join tables into tag and workflowversion tables</comment>
        <sql dbms="postgresql">
            delete from tag t where t.id in (select min(t.id) id from tag t group by t.name,t.parentid having count(t.name) > 1);
        </sql>
        <sql dbms="postgresql">
            delete from workflowversion wv where wv.id in (select min(wv.id) id from workflowversion wv group by wv.name,wv.parentid having count(wv.name) > 1);
        </sql>
        <sql dbms="postgresql">
            delete from workflowversion where parentid not in (select id from workflow union select id from service);
        </sql>
        <sql dbms="postgresql">
            delete from tag where parentid not in (select id from tool);
        </sql>

        <comment>Delete the source files of deleted tags and versions.</comment>
        <sql dbms="postgresql">
            delete from version_sourcefile vs where vs.versionid not in (select wv.id from workflowversion wv union select tag.id from tag);
            delete from sourcefile_verified sv where sv.id not in (select vs.sourcefileid from version_sourcefile vs);
            delete from sourcefile s where s.id not in (select vs.sourcefileid from version_sourcefile vs);
        </sql>

        <comment>Delete references from version_input_fileformat to deleted tags and versions.</comment>
        <sql dbms="postgresql">
            delete from version_input_fileformat v where v.versionid not in (select wv.id from workflowversion wv union select tag.id from tag);
        </sql>

        <comment>Delete references from version_output_fileformat to deleted tags and versions</comment>
        <sql dbms="postgresql">
            delete from version_output_fileformat v where v.versionid not in (select wv.id from workflowversion wv union select tag.id from tag);
        </sql>

        <comment>Delete the version validations of deleted tags and versions.</comment>
        <sql dbms="postgresql">
            delete from version_validation vv where vv.versionid not in (select wv.id from workflowversion wv union select tag.id from tag);
            delete from validation v where v.id not in (select vv.validationid from version_validation vv);
        </sql>

        <comment>Delete workflow version aliases. There are no tag aliases</comment>
        <sql dbms="postgresql">
            delete from workflowversion_alias wa where wa.id not in (select wv.id from workflowversion wv);
        </sql>

        <sql dbms="postgresql">
            alter table workflowversion enable row level security;
            alter table tag enable row level security;
        </sql>
    </changeSet>

    <changeSet author="dyuen" id="lock_versions_down">
        <!-- deletion can fail if row level security is not disabled properly in previous migration -->
        <preConditions onFail="HALT">
            <sqlCheck expectedResult="0">select count(*) from tag where parentid is null</sqlCheck>
            <sqlCheck expectedResult="0">select count(*) from workflowversion where parentid is null</sqlCheck>
            <!-- would not need this check if we can make a multi table constraint below -->
            <sqlCheck expectedResult="0">select count(*) from workflowversion where parentid not in (select id from workflow union select id from service)</sqlCheck>
        </preConditions>
        <!-- add constraints -->
        <addNotNullConstraint columnName="parentid" constraintName="parent_id_not_nullable" tableName="tag" />
        <addNotNullConstraint columnName="parentid" constraintName="parent_id_not_nullable" tableName="workflowversion" />
        <addUniqueConstraint columnNames="parentid, name" constraintName="unique_tag_names" tableName="tag"/>
        <addUniqueConstraint columnNames="parentid, name" constraintName="unique_workflowversion_names" tableName="workflowversion"/>
        <!-- deletion can fail if row level security is not disabled properly in previous migration -->
        <!-- this one would be nice, but I could not figure out a constraint that that says the parent id can come from either workflow or services
        <addForeignKeyConstraint baseColumnNames="parentid" baseTableName="workflowversion" constraintName="parentid_constraint" deferrable="false" initiallyDeferred="false" onDelete="NO ACTION" onUpdate="NO ACTION" referencedColumnNames="id" referencedTableName="workflow"/>
        -->
        <addForeignKeyConstraint baseColumnNames="parentid" baseTableName="tag" constraintName="parentid_constraint" deferrable="true" initiallyDeferred="true" onDelete="NO ACTION" onUpdate="NO ACTION" referencedColumnNames="id" referencedTableName="tool"/>
    </changeSet>

</databaseChangeLog>
