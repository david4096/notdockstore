basePath: /
consumes: [application/json]
definitions:
  BitbucketOrgAuthenticationResource:
    properties:
      clientID: {type: string}
      view: {$ref: '#/definitions/BitbucketOrgView'}
    type: object
  BitbucketOrgView:
    properties:
      parent: {$ref: '#/definitions/BitbucketOrgAuthenticationResource'}
    type: object
  DockstoreTool:
    description: |-
      This describes one entry in the dockstore. Logically, this currently means one tuple of registry (either quay or docker hub), organization, image name, and toolname which can be
       * associated with CWL and Dockerfile documents
    properties:
      author: {description: This is the name of the author stated in the Dockstore.cwl,
        type: string}
      defaultVersion: {description: This is the default version of the entry, type: string}
      default_cwl_path: {description: 'This indicates for the associated git repository,
          the default path to the CWL document, required: GA4GH', type: string}
      default_dockerfile_path: {description: 'This indicates for the associated git
          repository, the default path to the Dockerfile, required: GA4GH', type: string}
      default_wdl_path: {description: 'This indicates for the associated git repository,
          the default path to the WDL document', type: string}
      description: {description: 'This is a human-readable description of this container
          and what it is trying to accomplish, required GA4GH', type: string}
      email: {description: This is the email of the git organization, type: string}
      gitUrl: {description: 'This is a link to the associated repo with a descriptor,
          required GA4GH', type: string}
      id: {description: Implementation specific ID for the container in this web service,
        format: int64, type: integer}
      is_published: {default: false, description: Implementation specific visibility in this web service,
        type: boolean}
      labels:
        description: Labels (i.e. meta tags) for describing the purpose and contents of containers
        items: {$ref: '#/definitions/Label'}
        type: array
        uniqueItems: true
      lastBuild: {description: Implementation specific timestamp for last built, format: date-time,
        type: string}
      lastUpdated: {description: Implementation specific timestamp for last updated on webservice,
        format: date-time, type: string}
      last_modified: {description: Implementation specific timestamp for last modified,
        format: int32, type: integer}
      mode:
        description: This indicates what mode this is in which informs how we do things like refresh, dockstore specific
        enum: [AUTO_DETECT_QUAY_TAGS_AUTOMATED_BUILDS, AUTO_DETECT_QUAY_TAGS_WITH_MIXED,
          MANUAL_IMAGE_PATH]
        type: string
      name: {description: 'This is the name of the container, required: GA4GH', type: string}
      namespace: {description: 'This is a docker namespace for the container, required:
          GA4GH', type: string}
      path: {description: 'This is a generated full docker path including registry
          and namespace, used for docker pull commands', readOnly: true, type: string}
      private_access: {default: false, description: Is the docker image private or not.,
        type: boolean}
      registry:
        description: 'This is a specific docker provider like quay.io or dockerhub
          or n/a?, required: GA4GH'
        enum: [QUAY_IO, DOCKER_HUB, GITLAB, AMAZON_ECR]
        type: string
      tags:
        description: Implementation specific tracking of valid build tags for the docker container
        items: {$ref: '#/definitions/Tag'}
        type: array
        uniqueItems: true
      tool_maintainer_email: {description: The email address of the tool maintainer. Required for private repositories,
        type: string}
      tool_path: {readOnly: true, type: string}
      toolname: {description: 'This is the tool name of the container, when not-present
          this will function just like 0.1 dockstorewhen present, this can be used
          to distinguish between two containers based on the same image, but associated
          with different CWL and Dockerfile documents. i.e. two containers with the
          same registry+namespace+name but different toolnames will be two different
          entries in the dockstore registry/namespace/name/tool, different options
          to edit tags, and only the same insofar as they would "docker pull" the
          same image, required: GA4GH', type: string}
      users:
        description: This indicates the users that have control over this entry, dockstore specific
        items: {$ref: '#/definitions/User'}
        type: array
        uniqueItems: true
    required: [default_cwl_path, default_dockerfile_path, default_wdl_path, gitUrl,
      mode, name, namespace, private_access, registry, toolname]
    type: object
  GitHubComAuthenticationResource:
    properties:
      clientID: {type: string}
      redirectURI: {type: string}
      view: {$ref: '#/definitions/GithubComView'}
    type: object
  GitLabComAuthenticationResource:
    properties:
      clientID: {type: string}
      redirectURI: {type: string}
      view: {$ref: '#/definitions/GitlabComView'}
    type: object
  GithubComView:
    properties:
      parent: {$ref: '#/definitions/GitHubComAuthenticationResource'}
    type: object
  GitlabComView:
    properties:
      parent: {$ref: '#/definitions/GitLabComAuthenticationResource'}
    type: object
  Group:
    description: This describes a grouping of end-users for the purposes of managing sharing. Implementation-specific.
    properties:
      id: {format: int64, readOnly: true, type: integer}
      name: {type: string}
      users:
        items: {$ref: '#/definitions/User'}
        type: array
        uniqueItems: true
    type: object
  Label:
    description: This describes a descriptive label that can be placed on an entry in the dockstore
    properties:
      id: {description: Implementation specific ID for the container in this web service,
        format: int64, readOnly: true, type: integer}
      value: {description: String representation of the tag, type: string}
    required: [value]
    type: object
  Metadata:
    description: Describes this registry to better allow for mirroring and indexing.
    properties:
      api-version: {description: The version of the GA4GH tool-registry API supported by this registry,
        type: string}
      country: {description: A country code for the registry (ISO 3166-1 alpha-3),
        type: string}
      friendly-name: {description: A friendly name that can be used in addition to the hostname to describe a registry,
        type: string}
      version: {description: The version of this registry, type: string}
    required: [api-version, version]
    type: object
  PublishRequest:
    properties:
      publish: {default: false, readOnly: true, type: boolean}
    type: object
  QuayIOAuthenticationResource:
    properties:
      clientID: {type: string}
      redirectURI: {type: string}
      view: {$ref: '#/definitions/QuayIOView'}
    type: object
  QuayIOView:
    properties:
      parent: {$ref: '#/definitions/QuayIOAuthenticationResource'}
    type: object
  SourceFile:
    properties:
      content: {description: Cache for the contents of the target file, type: string}
      id: {description: Implementation specific ID for the source file in this web service,
        format: int64, type: integer}
      path: {description: Path to source file in git repo, type: string}
      type:
        description: Enumerates the type of file
        enum: [DOCKSTORE_CWL, DOCKSTORE_WDL, DOCKERFILE, CWL_TEST_JSON, WDL_TEST_JSON]
        type: string
    required: [path, type]
    type: object
  Tag:
    description: This describes one tag associated with a container.
    properties:
      automated: {default: false, description: 'Implementation specific, indicates
          whether this is an automated build on quay.io', type: boolean}
      cwl_path: {description: Path for the CWL document, type: string}
      dirtyBit: {default: false, description: True if user has altered the tag, type: boolean}
      dockerfile_path: {description: Path for the Dockerfile, type: string}
      hidden: {default: false, description: 'Implementation specific, whether this
          row is visible to other users aside from the owner', type: boolean}
      id: {description: Implementation specific ID for the tag in this web service,
        format: int64, readOnly: true, type: integer}
      image_id: {description: Tag for this image in quay.ui/docker hub, type: string}
      last_modified: {description: The last time this image was modified in the image registry,
        format: date-time, type: string}
      name: {description: 'Implementation specific, can be a quay.io or docker hub
          tag name', type: string}
      reference: {description: git commit/tag/branch, type: string}
      size: {description: Size of the image, format: int64, type: integer}
      sourceFiles:
        description: Cached files for each version. Includes Dockerfile and Descriptor files
        items: {$ref: '#/definitions/SourceFile'}
        type: array
        uniqueItems: true
      valid: {default: false, description: 'Implementation specific, whether this
          tag has valid files from source code repo', type: boolean}
      verified: {default: false, description: Whether this version has been verified or not,
        type: boolean}
      verifiedSource: {description: Verified source for the version, type: string}
      wdl_path: {description: Path for the WDL document, type: string}
    required: [image_id, name, reference]
    type: object
  Token:
    description: Access tokens for this web service and integrated services like quay.io and github
    properties:
      content: {description: Contents of the access token, type: string}
      id: {description: Implementation specific ID for the token in this web service,
        format: int64, readOnly: true, type: integer}
      refreshToken: {type: string}
      tokenSource: {description: Source website for this token, type: string}
      userId: {format: int64, type: integer}
      username: {description: 'When an integrated service is not aware of the username,
          we store it', type: string}
    type: object
  Tool:
    description: A tool (or described tool) describes one pairing of a tool as described in a descriptor file (which potentially describes multiple tools) and a Docker image.
    properties:
      author: {description: Contact information for the author of this tool entry in the registry. (More complex authorship information is handled by the descriptor),
        type: string}
      contains:
        description: An array of IDs for the applications that are stored inside this tool (for example `https://bio.tools/tool/mytum.de/SNAP2/1`)
        items: {type: string}
        type: array
      description: {description: The description of the tool., type: string}
      id: {description: 'A unique identifier of the tool, scoped to this registry,
          for example `123456` or `123456_v1`', type: string}
      meta-version: {description: 'The version of this tool in the registry. Iterates
          when fields like the description, author, etc. are updated.', type: string}
      organization: {description: The organization that published the image., type: string}
      signed: {default: false, description: Reports whether this tool has been signed.,
        type: boolean}
      toolclass: {$ref: '#/definitions/ToolClass'}
      toolname: {description: The name of the tool., type: string}
      url: {description: 'The URL for this tool in this registry, for example `http://agora.broadinstitute.org/tools/123456`',
        type: string}
      verified: {default: false, description: Reports whether this tool has been verified by a specific organization or individual,
        type: boolean}
      verified-source: {description: 'Source of metadata that can support a verified
          tool, such as an email or URL', type: string}
      versions:
        description: A list of versions for this tool
        items: {$ref: '#/definitions/ToolVersion'}
        type: array
    required: [author, id, meta-version, organization, toolclass, url, versions]
    type: object
  ToolClass:
    description: Describes a class (type) of tool allowing us to categorize workflows, tools, and maybe even other entities (such as services) separately
    properties:
      description: {description: A longer explanation of what this class is and what it can accomplish,
        type: string}
      id: {description: The unique identifier for the class, type: string}
      name: {description: A short friendly name for the class, type: string}
    type: object
  ToolDescriptor:
    description: A tool descriptor is a metadata document that describes one or more tools.
    properties:
      descriptor: {description: The descriptor that represents this version of the tool. (CWL or WDL),
        type: string}
      type:
        enum: [CWL, WDL]
        type: string
      url: {description: 'Optional url to the tool descriptor used to build this image,
          should include version information, and can include a git hash (e.g. https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/ea2a5db69bd20a42976838790bc29294df3af02b/delly_docker/Delly.cwl
          )', type: string}
    required: [descriptor, type]
    type: object
  ToolDockerfile:
    description: A tool dockerfile is a document that describes how to build a particular Docker image.
    properties:
      dockerfile: {description: The dockerfile content for this tool., type: string}
      url: {description: 'Optional url to the dockerfile used to build this image,
          should include version information, and can include a git hash  (e.g. https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/c83478829802b4d36374870843821abe1b625a71/delly_docker/Dockerfile
          )', type: string}
    required: [dockerfile]
    type: object
  ToolTests:
    description: A tool document that describes how to test with one or more sample test JSON.
    properties:
      test: {description: The test JSON content for this tool., type: string}
      url: {description: Optional url to the test JSON used to test this tool, type: string}
    required: [test]
    type: object
  ToolVersion:
    description: A tool version describes a particular iteration of a tool as described by a reference to a specific image and dockerfile.
    properties:
      descriptor-type:
        description: The type (or types) of descriptors available.
        items:
          enum: [CWL, WDL]
          type: string
        type: array
      dockerfile: {default: false, description: Reports if this tool has a dockerfile available.,
        type: boolean}
      id: {description: 'An identifier of the version of this tool for this particular
          tool registry, for example `v1`', type: string}
      image: {description: The docker path to the image (and version) for this tool. (e.g. quay.io/seqware/seqware_full/1.1),
        type: string}
      meta-version: {description: 'The version of this tool version in the registry.
          Iterates when fields like the description, author, etc. are updated.', type: string}
      name: {description: The name of the version., type: string}
      url: {description: 'The URL for this tool in this registry, for example `http://agora.broadinstitute.org/tools/123456/1`',
        type: string}
      verified: {default: false, description: Reports whether this tool has been verified by a specific organization or individual,
        type: boolean}
      verified-source: {description: 'Source of metadata that can support a verified
          tool, such as an email or URL', type: string}
    required: [id, meta-version, url]
    type: object
  User:
    description: End users for the dockstore
    properties:
      id: {description: Implementation specific ID for the container in this web service,
        format: int64, readOnly: true, type: integer}
      isAdmin: {default: false, description: Indicates whetehr this user is an admin,
        type: boolean}
      name: {type: string}
      username: {description: Username on dockstore, type: string}
    required: [isAdmin]
    type: object
  VerifyRequest:
    properties:
      verifiedSource: {readOnly: true, type: string}
      verify: {default: false, readOnly: true, type: boolean}
    type: object
  Workflow:
    description: This describes one workflow in the dockstore
    properties:
      author: {description: This is the name of the author stated in the Dockstore.cwl,
        type: string}
      defaultVersion: {description: This is the default version of the entry, type: string}
      description: {description: 'This is a human-readable description of this container
          and what it is trying to accomplish, required GA4GH', type: string}
      descriptorType: {description: 'This is a descriptor type for the workflow, either
          CWL or WDL (Defaults to CWL)', type: string}
      email: {description: This is the email of the git organization, type: string}
      gitUrl: {description: 'This is a link to the associated repo with a descriptor,
          required GA4GH', type: string}
      id: {description: Implementation specific ID for the container in this web service,
        format: int64, type: integer}
      is_published: {default: false, description: Implementation specific visibility in this web service,
        type: boolean}
      labels:
        description: Labels (i.e. meta tags) for describing the purpose and contents of containers
        items: {$ref: '#/definitions/Label'}
        type: array
        uniqueItems: true
      lastUpdated: {description: Implementation specific timestamp for last updated on webservice,
        format: date-time, type: string}
      last_modified: {description: Implementation specific timestamp for last modified,
        format: int32, type: integer}
      mode:
        description: This indicates what mode this is in which informs how we do things like refresh, dockstore specific
        enum: [FULL, STUB]
        type: string
      organization: {description: This is a git organization for the workflow, type: string}
      path: {description: 'This is a generated full workflow path including organization,
          repository name, and workflow name', readOnly: true, type: string}
      repository: {description: This is a git repository name, type: string}
      users:
        description: This indicates the users that have control over this entry, dockstore specific
        items: {$ref: '#/definitions/User'}
        type: array
        uniqueItems: true
      workflowName: {description: 'This is the name of the workflow, not needed when
          only one workflow in a repo', type: string}
      workflowVersions:
        description: Implementation specific tracking of valid build workflowVersions for the docker container
        items: {$ref: '#/definitions/WorkflowVersion'}
        type: array
        uniqueItems: true
      workflow_path: {description: 'This indicates for the associated git repository,
          the default path to the CWL document', type: string}
    required: [descriptorType, gitUrl, mode, organization, repository, workflow_path]
    type: object
  WorkflowVersion:
    description: This describes one workflow version associated with a workflow.
    properties:
      dirtyBit: {default: false, description: True if user has altered the tag, type: boolean}
      hidden: {default: false, description: 'Implementation specific, whether this
          row is visible to other users aside from the owner', type: boolean}
      id: {description: Implementation specific ID for the tag in this web service,
        format: int64, readOnly: true, type: integer}
      last_modified: {description: The last time this image was modified in the image registry,
        format: date-time, type: string}
      name: {description: 'Implementation specific, can be a quay.io or docker hub
          tag name', type: string}
      reference: {description: git commit/tag/branch, type: string}
      sourceFiles:
        description: Cached files for each version. Includes Dockerfile and Descriptor files
        items: {$ref: '#/definitions/SourceFile'}
        type: array
        uniqueItems: true
      valid: {default: false, description: 'Implementation specific, whether this
          tag has valid files from source code repo', type: boolean}
      verified: {default: false, description: Whether this version has been verified or not,
        type: boolean}
      verifiedSource: {description: Verified source for the version, type: string}
      workflow_path: {description: Path for the workflow, type: string}
    required: [name, reference]
    type: object
externalDocs: {description: Dockstore documentation, url: 'https://www.dockstore.org/docs/getting-started'}
host: localhost:8080
info:
  contact: {email: ' theglobalalliance@genomicsandhealth.org', name: Dockstore@ga4gh,
    url: 'https://github.com/ga4gh/dockstore'}
  description: This describes the dockstore API, a webservice that manages pairs of Docker images and associated metadata such as CWL documents and Dockerfiles used to build those images
  license: {name: ' GNU Lesser General Public License', url: 'https://www.gnu.org/licenses/lgpl-3.0.en.html'}
  title: Dockstore API
  version: 1.0.2
paths:
  /api/ga4gh/v1/metadata:
    get:
      description: Return some metadata that is useful for describing this registry
      operationId: metadataGet
      parameters: []
      produces: [application/json, text/plain]
      responses:
        200:
          description: A Metadata object describing this service.
          schema: {$ref: '#/definitions/Metadata'}
      summary: Return some metadata that is useful for describing this registry
      tags: [GA4GH]
  /api/ga4gh/v1/tool-classes:
    get:
      description: 'This endpoint returns all tool-classes available '
      operationId: toolClassesGet
      parameters: []
      produces: [application/json, text/plain]
      responses:
        200:
          description: An array of methods that match the filter.
          schema:
            items: {$ref: '#/definitions/ToolClass'}
            type: array
      summary: List all tool types
      tags: [GA4GH]
  /api/ga4gh/v1/tools:
    get:
      description: 'This endpoint returns all tools available or a filtered subset
        using metadata query parameters. '
      operationId: toolsGet
      parameters:
      - {description: 'A unique identifier of the tool, scoped to this registry, for
          example `123456`', in: query, name: id, required: false, type: string}
      - {description: The image registry that contains the image., in: query, name: registry,
        required: false, type: string}
      - {description: The organization in the registry that published the image.,
        in: query, name: organization, required: false, type: string}
      - {description: The name of the image., in: query, name: name, required: false,
        type: string}
      - {description: The name of the tool., in: query, name: toolname, required: false,
        type: string}
      - {description: The description of the tool., in: query, name: description,
        required: false, type: string}
      - {description: 'The author of the tool (TODO a thought occurs, are we assuming
          that the author of the CWL and the image are the same?).', in: query, name: author,
        required: false, type: string}
      - {description: 'Start index of paging. Pagination results can be based on numbers
          or other values chosen by the registry implementor (for example, SHA values).
          If this exceeds the current result set return an empty set.  If not specified
          in the request this will start at the beginning of the results.', in: query,
        name: offset, required: false, type: string}
      - {description: Amount of records to return in a given page.  By default it is 1000.,
        format: int32, in: query, name: limit, required: false, type: integer}
      produces: [application/json, text/plain]
      responses:
        200:
          description: An array of Tools that match the filter.
          schema:
            items: {$ref: '#/definitions/Tool'}
            type: array
      summary: List all tools
      tags: [GA4GH]
  /api/ga4gh/v1/tools/{id}:
    get:
      description: This endpoint returns one specific tool (which has ToolVersions nested inside it)
      operationId: toolsIdGet
      parameters:
      - {description: 'A unique identifier of the tool, scoped to this registry, for
          example `123456`', in: path, name: id, required: true, type: string}
      produces: [application/json, text/plain]
      responses:
        200:
          description: A tool.
          schema: {$ref: '#/definitions/Tool'}
      summary: List one specific tool, acts as an anchor for self references
      tags: [GA4GH]
  /api/ga4gh/v1/tools/{id}/versions:
    get:
      description: Returns all versions of the specified tool
      operationId: toolsIdVersionsGet
      parameters:
      - {description: 'A unique identifier of the tool, scoped to this registry, for
          example `123456`', in: path, name: id, required: true, type: string}
      produces: [application/json, text/plain]
      responses:
        200:
          description: An array of tool versions
          schema:
            items: {$ref: '#/definitions/ToolVersion'}
            type: array
      summary: List versions of a tool
      tags: [GA4GH]
  /api/ga4gh/v1/tools/{id}/versions/{version-id}:
    get:
      description: This endpoint returns one specific tool version
      operationId: toolsIdVersionsVersionIdGet
      parameters:
      - {description: 'A unique identifier of the tool, scoped to this registry, for
          example `123456`', in: path, name: id, required: true, type: string}
      - {description: 'An identifier of the tool version, scoped to this registry,
          for example `v1`', in: path, name: version-id, required: true, type: string}
      produces: [application/json, text/plain]
      responses:
        200:
          description: A tool version.
          schema: {$ref: '#/definitions/ToolVersion'}
      summary: List one specific tool version, acts as an anchor for self references
      tags: [GA4GH]
  /api/ga4gh/v1/tools/{id}/versions/{version-id}/dockerfile:
    get:
      description: Returns the dockerfile for the specified image.
      operationId: toolsIdVersionsVersionIdDockerfileGet
      parameters:
      - {description: 'A unique identifier of the tool, scoped to this registry, for
          example `123456`', in: path, name: id, required: true, type: string}
      - {description: 'An identifier of the tool version for this particular tool
          registry, for example `v1`', in: path, name: version-id, required: true,
        type: string}
      produces: [application/json, text/plain]
      responses:
        200:
          description: The tool payload.
          schema: {$ref: '#/definitions/ToolDockerfile'}
        404:
          description: The tool payload is not present in the service.
          schema: {$ref: '#/definitions/ToolDockerfile'}
      summary: Get the dockerfile for the specified image.
      tags: [GA4GH]
  /api/ga4gh/v1/tools/{id}/versions/{version-id}/{type}/descriptor:
    get:
      description: Returns the CWL or WDL descriptor for the specified tool.
      operationId: toolsIdVersionsVersionIdTypeDescriptorGet
      parameters:
      - description: The output type of the descriptor. If not specified it is up to the underlying implementation to determine which output type to return. Plain types return the bare descriptor while the "non-plain" types return a descriptor wrapped with metadata
        enum: [CWL, WDL, plain-CWL, plain-WDL]
        in: path
        name: type
        required: true
        type: string
      - {description: 'A unique identifier of the tool, scoped to this registry, for
          example `123456`', in: path, name: id, required: true, type: string}
      - {description: 'An identifier of the tool version for this particular tool
          registry, for example `v1`', in: path, name: version-id, required: true,
        type: string}
      produces: [application/json, text/plain]
      responses:
        200:
          description: The tool descriptor.
          schema: {$ref: '#/definitions/ToolDescriptor'}
        404:
          description: The tool can not be output in the specified type.
          schema: {$ref: '#/definitions/ToolDescriptor'}
      summary: Get the tool descriptor (CWL/WDL) for the specified tool.
      tags: [GA4GH]
  /api/ga4gh/v1/tools/{id}/versions/{version-id}/{type}/descriptor/{relative-path}:
    get:
      description: Returns additional CWL or WDL descriptors for the specified tool in the same or subdirectories
      operationId: toolsIdVersionsVersionIdTypeDescriptorRelativePathGet
      parameters:
      - description: The output type of the descriptor. If not specified it is up to the underlying implementation to determine which output type to return.  Plain types return the bare descriptor while the "non-plain" types return a descriptor wrapped with metadata
        enum: [CWL, WDL, plain-CWL, plain-WDL]
        in: path
        name: type
        required: true
        type: string
      - {description: 'A unique identifier of the tool, scoped to this registry, for
          example `123456`', in: path, name: id, required: true, type: string}
      - {description: 'An identifier of the tool version for this particular tool
          registry, for example `v1`', in: path, name: version-id, required: true,
        type: string}
      - {description: 'A relative path to the additional file (same directory or subdirectories),
          for example ''foo.cwl'' would return a ''foo.cwl'' from the same directory
          as the main descriptor', in: path, name: relative-path, required: true,
        type: string}
      produces: [application/json, text/plain]
      responses:
        200:
          description: The tool descriptor.
          schema: {$ref: '#/definitions/ToolDescriptor'}
        404:
          description: The tool can not be output in the specified type.
          schema: {$ref: '#/definitions/ToolDescriptor'}
      summary: Get additional tool descriptor files (CWL/WDL) relative to the main file
      tags: [GA4GH]
  /api/ga4gh/v1/tools/{id}/versions/{version-id}/{type}/tests:
    get:
      description: ''
      operationId: toolsIdVersionsVersionIdTypeTestsGet
      parameters:
      - description: The output type of the descriptor. If not specified it is up to the underlying implementation to determine which output type to return. Plain types return the bare descriptor while the "non-plain" types return a descriptor wrapped with metadata
        enum: [CWL, WDL, plain-CWL, plain-WDL]
        in: path
        name: type
        required: true
        type: string
      - {description: 'A unique identifier of the tool, scoped to this registry, for
          example `123456`', in: path, name: id, required: true, type: string}
      - {description: 'An identifier of the tool version for this particular tool
          registry, for example `v1`', in: path, name: version-id, required: true,
        type: string}
      produces: [application/json, text/plain]
      responses:
        200:
          description: The tool test JSON response.
          schema:
            items: {$ref: '#/definitions/ToolTests'}
            type: array
        404:
          description: The tool can not be output in the specified type.
          schema:
            items: {$ref: '#/definitions/ToolTests'}
            type: array
      summary: Get an array of test JSONs suitable for use with this descriptor type.
      tags: [GA4GH]
  /auth/tokens:
    get:
      description: List all tokens. Admin Only.
      operationId: listTokens
      parameters: []
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/Token'}
            type: array
      summary: List all known tokens
      tags: [tokens]
  /auth/tokens/bitbucket.org:
    get:
      description: This is used as part of the OAuth 2 web flow. Once a user has approved permissions for CollaboratoryTheir browser will load the redirect URI which should resolve here
      operationId: addBitbucketToken
      parameters:
      - {in: query, name: code, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/Token'}
      summary: Add a new bitbucket.org token, used by quay.io redirect
      tags: [tokens]
  /auth/tokens/bitbucket.org/refresh:
    get:
      description: The Bitbucket token expire in one hour. When this happens you'll get 401 responses
      operationId: refreshBitbucketToken
      parameters: []
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/Token'}
      summary: Refresh Bitbucket token
      tags: [tokens]
  /auth/tokens/github.com:
    get:
      description: This is used as part of the OAuth 2 web flow. Once a user has approved permissions for CollaboratoryTheir browser will load the redirect URI which should resolve here
      operationId: addGithubToken
      parameters:
      - {in: query, name: code, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/Token'}
      summary: Add a new github.com token, used by quay.io redirect
      tags: [tokens]
  /auth/tokens/gitlab.com:
    get:
      description: This is used as part of the OAuth 2 web flow. Once a user has approved permissions for CollaboratoryTheir browser will load the redirect URI which should resolve here
      operationId: addGitlabToken
      parameters:
      - {in: query, name: code, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/Token'}
      summary: Add a new gitlab.com token
      tags: [tokens]
  /auth/tokens/quay.io:
    get:
      description: This is used as part of the OAuth 2 web flow. Once a user has approved permissions for CollaboratoryTheir browser will load the redirect URI which should resolve here
      operationId: addQuayToken
      parameters:
      - {in: query, name: access_token, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/Token'}
      summary: Add a new quay IO token
      tags: [tokens]
  /auth/tokens/{tokenId}:
    delete:
      description: ''
      operationId: deleteToken
      parameters:
      - {description: Token id to delete, format: int64, in: path, name: tokenId,
        required: true, type: integer}
      produces: [application/json]
      responses:
        400: {description: Invalid token value}
      summary: Deletes a token
      tags: [tokens]
    get:
      description: Get a specific token by id
      operationId: listToken
      parameters:
      - {description: ID of token to return, format: int64, in: path, name: tokenId,
        required: true, type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/Token'}
        400: {description: Invalid ID supplied}
        404: {description: Token not found}
      summary: Get a specific token by id
      tags: [tokens]
  /containers:
    get:
      description: List docker container repos currently known. Admin Only
      operationId: allContainers
      parameters: []
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/DockstoreTool'}
            type: array
      summary: List all docker containers cached in database
      tags: [containers]
  /containers/dockerRegistryList:
    get:
      description: Does not need authentication
      operationId: getDockerRegistries
      parameters: []
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items:
              additionalProperties: {type: object}
              type: object
            type: array
      summary: Get the list of docker registries supported on Dockstore.
      tags: [containers]
  /containers/path/tool/{repository}:
    get:
      description: Lists info of container. Enter full path (include quay.io in path).
      operationId: getContainerByToolPath
      parameters:
      - {description: repository path, in: path, name: repository, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/DockstoreTool'}
      summary: Get a container by tool path
      tags: [containers]
  /containers/path/tool/{repository}/published:
    get:
      description: Lists info of container. Enter full path (include quay.io in path).
      operationId: getPublishedContainerByToolPath
      parameters:
      - {description: repository path, in: path, name: repository, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/DockstoreTool'}
      summary: Get a published container by tool path
      tags: [containers]
  /containers/path/{containerId}/tags:
    get:
      description: Lists tags for a container. Enter full path (include quay.io in path).
      operationId: getTagsByPath
      parameters:
      - {description: Tool to modify., format: int64, in: path, name: containerId,
        required: true, type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/Tag'}
            type: array
            uniqueItems: true
      summary: Get tags  for a container by id
      tags: [containertags]
  /containers/path/{repository}:
    get:
      description: Lists info of container. Enter full path (include quay.io in path).
      operationId: getContainerByPath
      parameters:
      - {description: repository path, in: path, name: repository, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/DockstoreTool'}
            type: array
      summary: Get a list of containers by path
      tags: [containers]
  /containers/path/{repository}/published:
    get:
      description: NO authentication
      operationId: getPublishedContainerByPath
      parameters:
      - {description: repository path, in: path, name: repository, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/DockstoreTool'}
            type: array
      summary: Get a published container by path
      tags: [containers]
  /containers/published:
    get:
      description: NO authentication
      operationId: allPublishedContainers
      parameters: []
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/DockstoreTool'}
            type: array
      summary: List all published containers.
      tags: [containers]
  /containers/published/{containerId}:
    get:
      description: NO authentication
      operationId: getPublishedContainer
      parameters:
      - {description: Tool ID, format: int64, in: path, name: containerId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/DockstoreTool'}
      summary: Get a published container
      tags: [containers]
  /containers/refresh:
    get:
      description: Updates some metadata. ADMIN ONLY
      operationId: refreshAll
      parameters: []
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/DockstoreTool'}
            type: array
      summary: Refresh all repos
      tags: [containers]
  /containers/registerManual:
    post:
      description: Register an image manually.
      operationId: registerManual
      parameters:
      - description: Tool to be registered
        in: body
        name: body
        required: true
        schema: {$ref: '#/definitions/DockstoreTool'}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/DockstoreTool'}
      summary: Register an image manually, along with tags
      tags: [containers]
  /containers/search:
    get:
      description: Search on the name (full path name) and description. NO authentication
      operationId: search
      parameters:
      - {in: query, name: pattern, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/DockstoreTool'}
            type: array
      summary: Search for matching registered containers.
      tags: [containers]
  /containers/{containerId}:
    delete:
      description: ''
      operationId: deleteContainer
      parameters:
      - {description: Tool id to delete, format: int64, in: path, name: containerId,
        required: true, type: integer}
      produces: [application/json]
      responses:
        400: {description: 'Invalid '}
      summary: Delete manually registered image
      tags: [containers]
    get:
      description: ''
      operationId: getContainer
      parameters:
      - {description: Tool ID, format: int64, in: path, name: containerId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/DockstoreTool'}
      summary: Get a registered repo
      tags: [containers]
    put:
      description: ''
      operationId: updateContainer
      parameters:
      - {description: Tool to modify., format: int64, in: path, name: containerId,
        required: true, type: integer}
      - description: Tool with updated information
        in: body
        name: body
        required: true
        schema: {$ref: '#/definitions/DockstoreTool'}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/DockstoreTool'}
      summary: Update the tool with the given tool.
      tags: [containers]
  /containers/{containerId}/cwl:
    get:
      description: Does not need authentication
      operationId: cwl
      parameters:
      - {description: Tool id, format: int64, in: path, name: containerId, required: true,
        type: integer}
      - {in: query, name: tag, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/SourceFile'}
      summary: Get the corresponding Dockstore.cwl file on Github.
      tags: [containers]
  /containers/{containerId}/cwl/{relative-path}:
    get:
      description: Does not need authentication
      operationId: secondaryCwlPath
      parameters:
      - {description: Tool id, format: int64, in: path, name: containerId, required: true,
        type: integer}
      - {in: query, name: tag, required: false, type: string}
      - {in: path, name: relative-path, required: true, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/SourceFile'}
      summary: Get the corresponding Dockstore.cwl file on Github.
      tags: [containers]
  /containers/{containerId}/dockerfile:
    get:
      description: Does not need authentication
      operationId: dockerfile
      parameters:
      - {description: Tool id, format: int64, in: path, name: containerId, required: true,
        type: integer}
      - {in: query, name: tag, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/SourceFile'}
      summary: Get the corresponding Dockerfile on Github.
      tags: [containers]
  /containers/{containerId}/labels:
    put:
      description: Labels are alphanumerical (case-insensitive and may contain internal hyphens), given in a comma-delimited list.
      operationId: updateLabels
      parameters:
      - {description: Tool to modify., format: int64, in: path, name: containerId,
        required: true, type: integer}
      - {description: Comma-delimited list of labels., in: query, name: labels, required: true,
        type: string}
      - description: This is here to appease Swagger. It requires PUT methods to have a body, even if it is empty. Please leave it empty.
        in: body
        name: body
        required: false
        schema: {type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/DockstoreTool'}
      summary: Update the labels linked to a container.
      tags: [containers]
  /containers/{containerId}/publish:
    post:
      description: publish a container (public or private). Assumes that user is using quay.io and github.
      operationId: publish
      parameters:
      - {description: Tool id to publish, format: int64, in: path, name: containerId,
        required: true, type: integer}
      - description: PublishRequest to refresh the list of repos for a user
        in: body
        name: body
        required: true
        schema: {$ref: '#/definitions/PublishRequest'}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/DockstoreTool'}
      summary: Publish or unpublish a container
      tags: [containers]
  /containers/{containerId}/refresh:
    get:
      description: ''
      operationId: refresh
      parameters:
      - {description: Tool ID, format: int64, in: path, name: containerId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/DockstoreTool'}
      summary: Refresh one particular repo
      tags: [containers]
  /containers/{containerId}/secondaryCwl:
    get:
      description: Does not need authentication
      operationId: secondaryCwl
      parameters:
      - {description: Tool id, format: int64, in: path, name: containerId, required: true,
        type: integer}
      - {in: query, name: tag, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/SourceFile'}
            type: array
      summary: Get a list of secondary CWL files from Git.
      tags: [containers]
  /containers/{containerId}/secondaryWdl:
    get:
      description: Does not need authentication
      operationId: secondaryWdl
      parameters:
      - {description: Tool id, format: int64, in: path, name: containerId, required: true,
        type: integer}
      - {in: query, name: tag, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/SourceFile'}
            type: array
      summary: Get a list of secondary WDL files from Git.
      tags: [containers]
  /containers/{containerId}/tags:
    post:
      description: Tag correspond to each row of the versions table listing all information for a docker repo tag
      operationId: addTags
      parameters:
      - {description: Tool to modify., format: int64, in: path, name: containerId,
        required: true, type: integer}
      - description: List of new tags
        in: body
        name: body
        required: true
        schema:
          items: {$ref: '#/definitions/Tag'}
          type: array
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/Tag'}
            type: array
      summary: Add new tags linked to a container
      tags: [containertags]
    put:
      description: Tag correspond to each row of the versions table listing all information for a docker repo tag
      operationId: updateTags
      parameters:
      - {description: Tool to modify., format: int64, in: path, name: containerId,
        required: true, type: integer}
      - description: List of modified tags
        in: body
        name: body
        required: true
        schema:
          items: {$ref: '#/definitions/Tag'}
          type: array
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/Tag'}
            type: array
      summary: Update the tags linked to a container
      tags: [containertags]
  /containers/{containerId}/tags/{tagId}:
    delete:
      description: Tag correspond to each row of the versions table listing all information for a docker repo tag
      operationId: deleteTags
      parameters:
      - {description: Tool to modify., format: int64, in: path, name: containerId,
        required: true, type: integer}
      - {description: Tag to delete, format: int64, in: path, name: tagId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        default: {description: successful operation}
      summary: Delete tag linked to a container
      tags: [containertags]
  /containers/{containerId}/testParameterFiles:
    delete:
      description: ''
      operationId: deleteTestParameterFiles
      parameters:
      - {description: Tool to modify., format: int64, in: path, name: containerId,
        required: true, type: integer}
      - collectionFormat: multi
        description: List of paths.
        in: query
        items: {type: string}
        name: testParameterPaths
        required: true
        type: array
      - {in: query, name: tagName, required: false, type: string}
      - {in: query, name: descriptorType, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/SourceFile'}
            type: array
            uniqueItems: true
      summary: Delete test parameter files for a given tag.
      tags: [containers]
    get:
      description: Does not need authentication
      operationId: getTestParameterFiles
      parameters:
      - {description: Tool id, format: int64, in: path, name: containerId, required: true,
        type: integer}
      - {in: query, name: tag, required: false, type: string}
      - {in: query, name: descriptorType, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/SourceFile'}
            type: array
      summary: Get the corresponding wdl test parameter files.
      tags: [containers]
    put:
      description: ''
      operationId: addTestParameterFiles
      parameters:
      - {description: Tool to modify., format: int64, in: path, name: containerId,
        required: true, type: integer}
      - collectionFormat: multi
        description: List of paths.
        in: query
        items: {type: string}
        name: testParameterPaths
        required: true
        type: array
      - description: This is here to appease Swagger. It requires PUT methods to have a body, even if it is empty. Please leave it empty.
        in: body
        name: body
        required: false
        schema: {type: string}
      - {in: query, name: tagName, required: false, type: string}
      - {in: query, name: descriptorType, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/SourceFile'}
            type: array
            uniqueItems: true
      summary: Add test parameter files for a given tag.
      tags: [containers]
  /containers/{containerId}/updateTagPaths:
    put:
      description: Tag correspond to each row of the versions table listing all information for a docker repo tag
      operationId: updateTagContainerPath
      parameters:
      - {description: Tool to modify., format: int64, in: path, name: containerId,
        required: true, type: integer}
      - description: Tool with updated information
        in: body
        name: body
        required: true
        schema: {$ref: '#/definitions/DockstoreTool'}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/DockstoreTool'}
      summary: Change the workflow paths
      tags: [containers]
  /containers/{containerId}/users:
    get:
      description: ''
      operationId: getUsers
      parameters:
      - {description: Tool ID, format: int64, in: path, name: containerId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/User'}
            type: array
      summary: Get users of a container
      tags: [containers]
  /containers/{containerId}/verifiedSources:
    get:
      description: Does not need authentication
      operationId: verifiedSources
      parameters:
      - {description: Tool id, format: int64, in: path, name: containerId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {type: string}
      summary: Get the corresponding Dockstore.cwl file on Github.
      tags: [containers]
  /containers/{containerId}/verify/{tagId}:
    put:
      description: ''
      operationId: verifyToolTag
      parameters:
      - {description: Tool to modify., format: int64, in: path, name: containerId,
        required: true, type: integer}
      - {description: Tag to verify., format: int64, in: path, name: tagId, required: true,
        type: integer}
      - description: Object containing verification information.
        in: body
        name: body
        required: true
        schema: {$ref: '#/definitions/VerifyRequest'}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/Tag'}
            type: array
      summary: Verify or unverify a version . ADMIN ONLY
      tags: [containertags]
  /containers/{containerId}/wdl:
    get:
      description: Does not need authentication
      operationId: wdl
      parameters:
      - {description: Tool id, format: int64, in: path, name: containerId, required: true,
        type: integer}
      - {in: query, name: tag, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/SourceFile'}
      summary: Get the corresponding Dockstore.wdl file on Github.
      tags: [containers]
  /containers/{containerId}/wdl/{relative-path}:
    get:
      description: Does not need authentication
      operationId: secondaryWdlPath
      parameters:
      - {description: Tool id, format: int64, in: path, name: containerId, required: true,
        type: integer}
      - {in: query, name: tag, required: false, type: string}
      - {in: path, name: relative-path, required: true, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/SourceFile'}
      summary: Get the corresponding Dockstore.wdl file on Github.
      tags: [containers]
  /github.repo:
    get:
      description: 'List docker container repos currently known. Right now, tokens
        are used to synchronously talk to the quay.io API to list repos. Ultimately,
        we should cache this information and refresh either by user request or by
        time TODO: This should be a properly defined list of objects, it also needs
        admin authentication'
      operationId: getRepos
      parameters: []
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {type: string}
      summary: List all repos known via all registered tokens
      tags: [github.repo]
  /integration.bitbucket.org:
    get:
      description: This is a stop-gap GUI for displaying a link that allows a user to start the OAuth 2 web flow
      operationId: getView
      parameters: []
      produces: [text/html]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/BitbucketOrgView'}
      summary: Display an authorization link for bitbucket.org
      tags: [integration.bitbucket.org]
  /integration.github.com:
    get:
      description: This is a stop-gap GUI for displaying a link that allows a user to start the OAuth 2 web flow
      operationId: getView
      parameters: []
      produces: [text/html]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/GithubComView'}
      summary: Display an authorization link for github.com
      tags: [integration.github.com]
  /integration.gitlab.com:
    get:
      description: This is a stop-gap GUI for displaying a link that allows a user to start the OAuth 2 web flow
      operationId: getView
      parameters: []
      produces: [text/html]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/GitlabComView'}
      summary: Display an authorization link for gitlab.com
      tags: [integration.gitlab.com]
  /integration.quay.io:
    get:
      description: More notes about this method
      operationId: getView
      parameters: []
      produces: [text/html]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/QuayIOView'}
      summary: Display an authorization link for quay.io
      tags: [integration.quay.io]
  /users:
    get:
      description: List all users. Admin only.
      operationId: listUsers
      parameters: []
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/User'}
            type: array
      summary: List all known users
      tags: [users]
  /users/groups:
    get:
      description: ''
      operationId: allGroups
      parameters: []
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/Group'}
            type: array
      summary: List all groups
      tags: [users]
    post:
      description: ''
      operationId: createGroup
      parameters:
      - {in: query, name: group_name, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/Group'}
      summary: Create user group
      tags: [users]
  /users/groups/{groupId}:
    delete:
      description: ''
      operationId: deleteGroup
      parameters:
      - {description: Group id to delete, format: int64, in: path, name: groupId,
        required: true, type: integer}
      produces: [application/json]
      responses:
        400: {description: Invalid groupId value}
      summary: Deletes a group, admin only
      tags: [users]
    get:
      description: ''
      operationId: getGroup
      parameters:
      - {description: Group, format: int64, in: path, name: groupId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/Group'}
      summary: List a group
      tags: [users]
  /users/groups/{groupId}/users:
    get:
      description: ''
      operationId: getUsersFromGroup
      parameters:
      - {description: Group, format: int64, in: path, name: groupId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/User'}
            type: array
      summary: Get users that belongs to a group
      tags: [users]
  /users/user:
    get:
      description: ''
      operationId: getUser
      parameters: []
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/User'}
      summary: Get the logged-in user
      tags: [users]
  /users/username/{username}:
    get:
      description: ''
      operationId: listUser
      parameters:
      - {description: Username of user to return, in: path, name: username, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/User'}
      summary: Get user
      tags: [users]
  /users/{userId}:
    get:
      description: ''
      operationId: getUser
      parameters:
      - {description: User to return, format: int64, in: path, name: userId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/User'}
      summary: Get user with id
      tags: [users]
  /users/{userId}/containers:
    get:
      description: Lists all registered and unregistered containers owned by the user
      operationId: userContainers
      parameters:
      - {description: User ID, format: int64, in: path, name: userId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/DockstoreTool'}
            type: array
      summary: List repos owned by the logged-in user
      tags: [users]
  /users/{userId}/containers/published:
    get:
      description: Get user's published containers only
      operationId: userPublishedContainers
      parameters:
      - {description: User ID, format: int64, in: path, name: userId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/DockstoreTool'}
            type: array
      summary: List all published containers from a user
      tags: [users]
  /users/{userId}/containers/refresh:
    get:
      description: Updates some metadata
      operationId: refresh
      parameters:
      - {description: User ID, format: int64, in: path, name: userId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/DockstoreTool'}
            type: array
      summary: Refresh repos owned by the logged-in user
      tags: [users]
  /users/{userId}/groups:
    get:
      description: ''
      operationId: getGroupsFromUser
      parameters:
      - {description: User, format: int64, in: path, name: userId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/Group'}
            type: array
      summary: Get groups that the user belongs to
      tags: [users]
    put:
      description: ''
      operationId: addGroupToUser
      parameters:
      - {description: User ID of user, format: int64, in: path, name: userId, required: true,
        type: integer}
      - description: PublishRequest to refresh the list of repos for a user
        in: body
        name: body
        required: true
        schema: {$ref: '#/definitions/Group'}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/User'}
      summary: Add a group to a user
      tags: [users]
  /users/{userId}/groups/{groupId}:
    delete:
      description: ''
      operationId: removeUserFromGroup
      parameters:
      - {description: User ID of user, format: int64, in: path, name: userId, required: true,
        type: integer}
      - {description: Group ID of group, format: int64, in: path, name: groupId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/User'}
        400: {description: Invalid user or group value}
      summary: Remove a user from a group
      tags: [users]
  /users/{userId}/tokens:
    get:
      description: ''
      operationId: getUserTokens
      parameters:
      - {description: User to return, format: int64, in: path, name: userId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/Token'}
            type: array
      summary: Get tokens with user id
      tags: [users]
  /users/{userId}/tokens/dockstore:
    get:
      description: ''
      operationId: getDockstoreUserTokens
      parameters:
      - {description: User to return, format: int64, in: path, name: userId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/Token'}
            type: array
      summary: Get Dockstore tokens with user id
      tags: [users]
  /users/{userId}/tokens/github.com:
    get:
      description: ''
      operationId: getGithubUserTokens
      parameters:
      - {description: User to return, format: int64, in: path, name: userId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/Token'}
            type: array
      summary: Get Github tokens with user id
      tags: [users]
  /users/{userId}/tokens/gitlab.com:
    get:
      description: ''
      operationId: getGitlabUserTokens
      parameters:
      - {description: User to return, format: int64, in: path, name: userId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/Token'}
            type: array
      summary: Get Gitlab tokens with user id
      tags: [users]
  /users/{userId}/tokens/quay.io:
    get:
      description: ''
      operationId: getQuayUserTokens
      parameters:
      - {description: User to return, format: int64, in: path, name: userId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/Token'}
            type: array
      summary: Get Quay tokens with user id
      tags: [users]
  /users/{userId}/workflows:
    get:
      description: Lists all registered and unregistered workflows owned by the user
      operationId: userWorkflows
      parameters:
      - {description: User ID, format: int64, in: path, name: userId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/Workflow'}
            type: array
      summary: List workflows owned by the logged-in user
      tags: [users]
  /users/{userId}/workflows/published:
    get:
      description: Get user's published workflows only
      operationId: userPublishedWorkflows
      parameters:
      - {description: User ID, format: int64, in: path, name: userId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/Workflow'}
            type: array
      summary: List all published workflows from a user
      tags: [users]
  /users/{userId}/workflows/refresh:
    get:
      description: Updates some metadata
      operationId: refreshWorkflows
      parameters:
      - {description: User ID, format: int64, in: path, name: userId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/Workflow'}
            type: array
      summary: Refresh workflows owned by the logged-in user
      tags: [users]
  /workflows:
    get:
      description: List workflows currently known. Admin Only
      operationId: allWorkflows
      parameters: []
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/Workflow'}
            type: array
      summary: List all workflows cached in database
      tags: [workflows]
  /workflows/manualRegister:
    post:
      description: Manually register workflow (public or private).
      operationId: manualRegister
      parameters:
      - {description: Workflow registry, in: query, name: workflowRegistry, required: true,
        type: string}
      - {description: Workflow repository, in: query, name: workflowPath, required: true,
        type: string}
      - {description: Workflow container new descriptor path (CWL or WDL) and/or name,
        in: query, name: defaultWorkflowPath, required: true, type: string}
      - {description: Workflow name, in: query, name: workflowName, required: true,
        type: string}
      - {description: Descriptor type, in: query, name: descriptorType, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/Workflow'}
      summary: Manually register a workflow
      tags: [workflows]
  /workflows/path/workflow/{repository}:
    get:
      description: Lists info of workflow. Enter full path.
      operationId: getWorkflowByPath
      parameters:
      - {description: repository path, in: path, name: repository, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/Workflow'}
      summary: Get a workflow by path
      tags: [workflows]
  /workflows/path/workflow/{repository}/published:
    get:
      description: Lists info of workflow. Enter full path.
      operationId: getPublishedWorkflowByPath
      parameters:
      - {description: repository path, in: path, name: repository, required: true,
        type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/Workflow'}
      summary: Get a workflow by path
      tags: [workflows]
  /workflows/published:
    get:
      description: NO authentication
      operationId: allPublishedWorkflows
      parameters: []
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/Workflow'}
            type: array
      summary: List all published workflows.
      tags: [workflows]
  /workflows/published/{workflowId}:
    get:
      description: NO authentication
      operationId: getPublishedWorkflow
      parameters:
      - {description: Workflow ID, format: int64, in: path, name: workflowId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/Workflow'}
      summary: Get a published workflow
      tags: [workflows]
  /workflows/refresh:
    get:
      description: Updates some metadata. ADMIN ONLY
      operationId: refreshAll
      parameters: []
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/Workflow'}
            type: array
      summary: Refresh all workflows
      tags: [workflows]
  /workflows/search:
    get:
      description: Search on the name (full path name) and description. NO authentication
      operationId: search
      parameters:
      - {in: query, name: pattern, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/Workflow'}
            type: array
      summary: Search for matching published workflows.
      tags: [workflows]
  /workflows/{workflowId}:
    get:
      description: ''
      operationId: getWorkflow
      parameters:
      - {description: workflow ID, format: int64, in: path, name: workflowId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/Workflow'}
      summary: Get a registered workflow
      tags: [workflows]
    put:
      description: ''
      operationId: updateWorkflow
      parameters:
      - {description: Workflow to modify., format: int64, in: path, name: workflowId,
        required: true, type: integer}
      - description: Workflow with updated information
        in: body
        name: body
        required: true
        schema: {$ref: '#/definitions/Workflow'}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/Workflow'}
      summary: Update the workflow with the given workflow.
      tags: [workflows]
  /workflows/{workflowId}/cwl:
    get:
      description: Does not need authentication
      operationId: cwl
      parameters:
      - {description: Workflow id, format: int64, in: path, name: workflowId, required: true,
        type: integer}
      - {in: query, name: tag, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/SourceFile'}
      summary: Get the corresponding Dockstore.cwl file on Github.
      tags: [workflows]
  /workflows/{workflowId}/cwl/{relative-path}:
    get:
      description: Does not need authentication
      operationId: secondaryCwlPath
      parameters:
      - {description: Workflow id, format: int64, in: path, name: workflowId, required: true,
        type: integer}
      - {in: query, name: tag, required: false, type: string}
      - {in: path, name: relative-path, required: true, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/SourceFile'}
      summary: Get the corresponding Dockstore.cwl file on Github.
      tags: [workflows]
  /workflows/{workflowId}/dag/{workflowVersionId}:
    get:
      description: ''
      operationId: getWorkflowDag
      parameters:
      - {description: workflowId, format: int64, in: path, name: workflowId, required: true,
        type: integer}
      - {description: workflowVersionId, format: int64, in: path, name: workflowVersionId,
        required: true, type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {type: string}
      summary: Get the DAG for a given workflow version
      tags: [workflows]
  /workflows/{workflowId}/labels:
    put:
      description: Labels are alphanumerical (case-insensitive and may contain internal hyphens), given in a comma-delimited list.
      operationId: updateLabels
      parameters:
      - {description: Tool to modify., format: int64, in: path, name: workflowId,
        required: true, type: integer}
      - {description: Comma-delimited list of labels., in: query, name: labels, required: true,
        type: string}
      - description: This is here to appease Swagger. It requires PUT methods to have a body, even if it is empty. Please leave it empty.
        in: body
        name: body
        required: false
        schema: {type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/Workflow'}
      summary: Update the labels linked to a workflow.
      tags: [workflows]
  /workflows/{workflowId}/publish:
    post:
      description: Publish/publish a workflow (public or private).
      operationId: publish
      parameters:
      - {description: Tool id to publish/unpublish, format: int64, in: path, name: workflowId,
        required: true, type: integer}
      - description: PublishRequest to refresh the list of repos for a user
        in: body
        name: body
        required: true
        schema: {$ref: '#/definitions/PublishRequest'}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/Workflow'}
      summary: Publish or unpublish a workflow
      tags: [workflows]
  /workflows/{workflowId}/refresh:
    get:
      description: ''
      operationId: refresh
      parameters:
      - {description: workflow ID, format: int64, in: path, name: workflowId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/Workflow'}
      summary: Refresh one particular workflow. Always do a full refresh when targetted
      tags: [workflows]
  /workflows/{workflowId}/resetVersionPaths:
    put:
      description: Workflow version correspond to each row of the versions table listing all information for a workflow
      operationId: updateWorkflowPath
      parameters:
      - {description: Workflow to modify., format: int64, in: path, name: workflowId,
        required: true, type: integer}
      - description: Workflow with updated information
        in: body
        name: body
        required: true
        schema: {$ref: '#/definitions/Workflow'}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/Workflow'}
      summary: Change the workflow paths
      tags: [workflows]
  /workflows/{workflowId}/restub:
    get:
      description: Restubs a full, unpublished workflow.
      operationId: restub
      parameters:
      - {description: workflow ID, format: int64, in: path, name: workflowId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/Workflow'}
      summary: Restub a workflow
      tags: [workflows]
  /workflows/{workflowId}/secondaryCwl:
    get:
      description: Does not need authentication
      operationId: secondaryCwl
      parameters:
      - {description: Workflow id, format: int64, in: path, name: workflowId, required: true,
        type: integer}
      - {in: query, name: tag, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/SourceFile'}
            type: array
      summary: Get the corresponding Dockstore.cwl file on Github.
      tags: [workflows]
  /workflows/{workflowId}/secondaryWdl:
    get:
      description: Does not need authentication
      operationId: secondaryWdl
      parameters:
      - {description: Workflow id, format: int64, in: path, name: workflowId, required: true,
        type: integer}
      - {in: query, name: tag, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/SourceFile'}
            type: array
      summary: Get the corresponding Dockstore.wdl file on Github.
      tags: [workflows]
  /workflows/{workflowId}/testParameterFiles:
    delete:
      description: ''
      operationId: deleteTestParameterFiles
      parameters:
      - {description: Workflow to modify., format: int64, in: path, name: workflowId,
        required: true, type: integer}
      - collectionFormat: multi
        description: List of paths.
        in: query
        items: {type: string}
        name: testParameterPaths
        required: true
        type: array
      - {in: query, name: version, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/SourceFile'}
            type: array
            uniqueItems: true
      summary: Delete test parameter files for a given version.
      tags: [workflows]
    get:
      description: Does not need authentication
      operationId: getTestParameterFiles
      parameters:
      - {description: Workflow id, format: int64, in: path, name: workflowId, required: true,
        type: integer}
      - {in: query, name: version, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/SourceFile'}
            type: array
      summary: Get the corresponding test parameter files.
      tags: [workflows]
    put:
      description: ''
      operationId: addTestParameterFiles
      parameters:
      - {description: Workflow to modify., format: int64, in: path, name: workflowId,
        required: true, type: integer}
      - collectionFormat: multi
        description: List of paths.
        in: query
        items: {type: string}
        name: testParameterPaths
        required: true
        type: array
      - description: This is here to appease Swagger. It requires PUT methods to have a body, even if it is empty. Please leave it empty.
        in: body
        name: body
        required: false
        schema: {type: string}
      - {in: query, name: version, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/SourceFile'}
            type: array
            uniqueItems: true
      summary: Add test parameter files for a given version.
      tags: [workflows]
  /workflows/{workflowId}/tools/{workflowVersionId}:
    get:
      description: ''
      operationId: getTableToolContent
      parameters:
      - {description: workflowId, format: int64, in: path, name: workflowId, required: true,
        type: integer}
      - {description: workflowVersionId, format: int64, in: path, name: workflowVersionId,
        required: true, type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {type: string}
      summary: Get the Tools for a given workflow version
      tags: [workflows]
  /workflows/{workflowId}/users:
    get:
      description: ''
      operationId: getUsers
      parameters:
      - {description: workflow ID, format: int64, in: path, name: workflowId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/User'}
            type: array
      summary: Get users of a workflow
      tags: [workflows]
  /workflows/{workflowId}/verifiedSources:
    get:
      description: Does not need authentication
      operationId: verifiedSources
      parameters:
      - {description: Workflow id, format: int64, in: path, name: workflowId, required: true,
        type: integer}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {type: string}
      summary: Get a semicolon delimited list of verified sources
      tags: [workflows]
  /workflows/{workflowId}/verify/{workflowVersionId}:
    put:
      description: ''
      operationId: verifyWorkflowVersion
      parameters:
      - {description: Workflow to modify., format: int64, in: path, name: workflowId,
        required: true, type: integer}
      - {description: workflowVersionId, format: int64, in: path, name: workflowVersionId,
        required: true, type: integer}
      - description: Object containing verification information.
        in: body
        name: body
        required: true
        schema: {$ref: '#/definitions/VerifyRequest'}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/WorkflowVersion'}
            type: array
      summary: Verify or unverify a workflow. ADMIN ONLY
      tags: [workflows]
  /workflows/{workflowId}/wdl:
    get:
      description: Does not need authentication
      operationId: wdl
      parameters:
      - {description: Workflow id, format: int64, in: path, name: workflowId, required: true,
        type: integer}
      - {in: query, name: tag, required: false, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/SourceFile'}
      summary: Get the corresponding Dockstore.wdl file on Github.
      tags: [workflows]
  /workflows/{workflowId}/wdl/{relative-path}:
    get:
      description: Does not need authentication
      operationId: secondaryWdlPath
      parameters:
      - {description: Workflow id, format: int64, in: path, name: workflowId, required: true,
        type: integer}
      - {in: query, name: tag, required: false, type: string}
      - {in: path, name: relative-path, required: true, type: string}
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema: {$ref: '#/definitions/SourceFile'}
      summary: Get the corresponding Dockstore.wdl file on Github.
      tags: [workflows]
  /workflows/{workflowId}/workflowVersions:
    put:
      description: Workflow version correspond to each row of the versions table listing all information for a workflow
      operationId: updateWorkflowVersion
      parameters:
      - {description: Workflow to modify., format: int64, in: path, name: workflowId,
        required: true, type: integer}
      - description: List of modified workflow versions
        in: body
        name: body
        required: true
        schema:
          items: {$ref: '#/definitions/WorkflowVersion'}
          type: array
      produces: [application/json]
      responses:
        200:
          description: successful operation
          schema:
            items: {$ref: '#/definitions/WorkflowVersion'}
            type: array
      summary: Update the workflow versions linked to a workflow
      tags: [workflows]
produces: [application/json]
schemes: [http]
swagger: '2.0'
tags:
- {description: List and register entries in the dockstore (pairs of images + metadata (CWL and Dockerfile)),
  name: containers}
- {description: List and modify tags for containers, name: containertags}
- {description: A curated subset of resources proposed as a common standard for tool repositories,
  name: GA4GH}
- {description: List source code repositories (should be generalized from github),
  name: github.repo}
- {description: stop-gap allowing developers to associate with bitbucket, name: integration.bitbucket.org}
- {description: stop-gap allowing developers to associate with github, name: integration.github.com}
- {description: stop-gap allowing developers to associate with gitlab, name: integration.gitlab.com}
- {description: stop-gap allowing developers to associate with quay.io, name: integration.quay.io}
- {description: 'List, modify, refresh, and delete tokens for external services',
  name: tokens}
- {description: List and register workflows in the dockstore (CWL or WDL), name: workflows}
- {description: 'List, modify, and manage end users of the dockstore', name: users}
