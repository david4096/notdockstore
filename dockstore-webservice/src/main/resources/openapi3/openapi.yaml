openapi: 3.0.1
info:
  title: Dockstore
  description: The Dockstore API, includes proprietary and GA4GH V1+V2 endpoints
  termsOfService: http://swagger.io/terms/
  contact:
    name: Dockstore@ga4gh
    url: https://discuss.dockstore.org/t/opening-helpdesk-tickets/1506
    email: theglobalalliance@genomicsandhealth.org
  license:
    name: Apache 2.0
    url: https://github.com/dockstore/dockstore/blob/develop/LICENSE
  version: 1.6.0
externalDocs:
  description: User documentation for dockstore
  url: https://docs.dockstore.org/
tags:
- name: metadata
  description: description of the webservice itself
- name: toolTester
  description: Interactions with the Dockstore-support's ToolTester application
paths:
  /organizations/collections/{collectionId}/aliases:
    put:
      operationId: updateAliases_1
      parameters:
      - name: collectionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: aliases
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Aliasable'
  /organizations/collections/{alias}/aliases:
    get:
      operationId: getCollectionByAlias
      parameters:
      - name: alias
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
  /organizations/{organizationId}/collections/{collectionId}:
    get:
      operationId: getCollectionById
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: collectionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
    put:
      operationId: updateCollection
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: collectionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
  /organizations/{organizationName}/collections/{collectionName}/name:
    get:
      operationId: getCollectionByName
      parameters:
      - name: organizationName
        in: path
        required: true
        schema:
          type: string
      - name: collectionName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
  /organizations/{organizationId}/collections/{collectionId}/entry:
    post:
      operationId: addEntryToCollection
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: collectionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: entryId
        in: query
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
    delete:
      operationId: deleteEntryFromCollection
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: collectionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: entryId
        in: query
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
  /organizations/{organizationId}/collections:
    get:
      operationId: getCollectionsFromOrganization
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: include
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'
    post:
      operationId: createCollection
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
  /organizations/{organizationId}/collections/{collectionId}/description:
    get:
      operationId: getCollectionDescription
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: collectionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: string
    put:
      operationId: updateCollectionDescription
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: collectionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
  /containers/{containerId}/publish:
    post:
      operationId: publish
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
  /containers/tags:
    get:
      operationId: tags
      parameters:
      - name: containerId
        in: query
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
  /containers/{containerId}/refresh:
    get:
      operationId: refresh
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
  /containers/{containerId}/labels:
    put:
      operationId: updateLabels
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: labels
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
  /containers/{containerId}:
    get:
      operationId: getContainer
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: include
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
    put:
      operationId: updateContainer
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
    delete:
      operationId: deleteContainer
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /containers/{toolId}/defaultVersion:
    put:
      operationId: updateDefaultVersion
      parameters:
      - name: toolId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
  /containers/{containerId}/updateTagPaths:
    put:
      operationId: updateTagContainerPath
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
  /containers/published/{containerId}:
    get:
      operationId: getPublishedContainer
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: include
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
  /containers/namespace/{namespace}/published:
    get:
      operationId: getPublishedContainersByNamespace
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
  /containers/schema/{containerId}/published:
    get:
      operationId: getPublishedContainerSchema
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /containers/registerManual:
    post:
      operationId: registerManual
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
  /containers/published:
    get:
      operationId: allPublishedContainers
      parameters:
      - name: offset
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 100
      - name: filter
        in: query
        schema:
          type: string
          default: ""
      - name: sortCol
        in: query
        schema:
          type: string
          default: stars
      - name: sortOrder
        in: query
        schema:
          type: string
          default: desc
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
  /containers/path/{repository}/published:
    get:
      operationId: getPublishedContainerByPath
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
  /containers/path/{repository}:
    get:
      operationId: getContainerByPath
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
  /containers/path/tool/{repository}:
    get:
      operationId: getContainerByToolPath
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
  /containers/path/tool/{repository}/published:
    get:
      operationId: getPublishedContainerByToolPath
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
  /containers/{containerId}/dockerfile:
    get:
      operationId: dockerfile
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: tag
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceFile'
  /containers/{containerId}/verifiedSources:
    get:
      operationId: verifiedSources
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: string
  /containers/{containerId}/primaryDescriptor:
    get:
      operationId: primaryDescriptor
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: tag
        in: query
        schema:
          type: string
      - name: language
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceFile'
  /containers/{containerId}/descriptor/{relative-path}:
    get:
      operationId: secondaryDescriptorPath
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: tag
        in: query
        schema:
          type: string
      - name: relative-path
        in: path
        required: true
        schema:
          type: string
      - name: language
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceFile'
  /containers/{containerId}/secondaryDescriptors:
    get:
      operationId: secondaryDescriptors
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: tag
        in: query
        schema:
          type: string
      - name: language
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceFile'
  /containers/{containerId}/testParameterFiles:
    get:
      operationId: getTestParameterFiles
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: tag
        in: query
        schema:
          type: string
      - name: descriptorType
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceFile'
    put:
      operationId: addTestParameterFiles
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: testParameterPaths
        in: query
        schema:
          type: array
          items:
            type: string
      - name: tagName
        in: query
        schema:
          type: string
      - name: descriptorType
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/SourceFile'
    delete:
      operationId: deleteTestParameterFiles
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: testParameterPaths
        in: query
        schema:
          type: array
          items:
            type: string
      - name: tagName
        in: query
        schema:
          type: string
      - name: descriptorType
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/SourceFile'
  /containers/dockerRegistryList:
    get:
      operationId: getDockerRegistries
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegistryBean'
  /containers/{containerId}/star:
    put:
      operationId: starEntry
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /containers/{containerId}/unstar:
    delete:
      operationId: unstarEntry
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /containers/{toolId}/zip/{tagId}:
    get:
      operationId: getToolZip
      parameters:
      - name: toolId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: tagId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/zip: {}
  /containers/{alias}/aliases:
    get:
      operationId: getToolByAlias
      parameters:
      - name: alias
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
  /containers/{containerId}/users:
    get:
      operationId: getUsers
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /containers/{containerId}/starredUsers:
    get:
      operationId: getStarredUsers
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /containers/{containerId}/tags/{tagId}:
    delete:
      operationId: deleteTags
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: tagId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /containers/{containerId}/verify/{tagId}:
    post:
      operationId: verifyToolTag
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: tagId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
  /containers/{containerId}/requestDOI/{tagId}:
    post:
      operationId: requestDOIForToolTag
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: tagId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
  /containers/path/{containerId}/tags:
    get:
      operationId: getTagsByPath
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
  /containers/{containerId}/tags:
    put:
      operationId: updateTags
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
    post:
      operationId: addTags
      parameters:
      - name: containerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
  /entries/{id}/aliases:
    put:
      operationId: updateAliases_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: aliases
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
  /entries/{id}/collections:
    get:
      operationId: entryCollections
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionOrganization'
  /entries/{id}/topic:
    post:
      description: Create a discourse topic for an entry.
      operationId: setDiscourseTopic
      parameters:
      - name: id
        in: path
        description: The id of the entry to add a topic to.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
      security:
      - bearer: []
  /containers/hostedEntry/{entryId}:
    delete:
      operationId: deleteHostedVersion_1
      parameters:
      - name: entryId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: version
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
    patch:
      operationId: editHosted
      parameters:
      - name: entryId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
  /containers/hostedEntry:
    post:
      operationId: createHosted_1
      parameters:
      - name: registry
        in: query
        schema:
          type: string
      - name: name
        in: query
        schema:
          type: string
      - name: descriptorType
        in: query
        schema:
          type: string
      - name: namespace
        in: query
        schema:
          type: string
      - name: entryName
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
  /workflows/hostedEntry/{entryId}:
    post:
      operationId: addZip
      parameters:
      - name: entryId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
    delete:
      operationId: deleteHostedVersion_2
      parameters:
      - name: entryId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: version
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
    patch:
      operationId: editHosted_1
      parameters:
      - name: entryId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
  /workflows/hostedEntry:
    post:
      operationId: createHosted_2
      parameters:
      - name: registry
        in: query
        schema:
          type: string
      - name: name
        in: query
        schema:
          type: string
      - name: descriptorType
        in: query
        schema:
          type: string
      - name: namespace
        in: query
        schema:
          type: string
      - name: entryName
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
  /metadata/dockerRegistryList:
    get:
      tags:
      - metadata
      summary: Get the list of docker registries supported on Dockstore
      description: Get the list of docker registries supported on Dockstore, NO authentication
      operationId: getDockerRegistries_1
      responses:
        default:
          description: List of Docker registries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegistryBean'
  /metadata/sitemap:
    get:
      tags:
      - metadata
      summary: List all available workflow, tool, organization, and collection paths.
      description: List all available workflow, tool, organization, and collection
        paths. Available means published for tools/workflows, and approved for organizations
        and their respective collections. NO authentication
      operationId: sitemap
      responses:
        default:
          description: default response
          content:
            text/html:
              schema:
                type: string
            text/xml:
              schema:
                type: string
  /metadata/rss:
    get:
      tags:
      - metadata
      summary: List all published tools and workflows in creation order
      description: List all published tools and workflows in creation order, NO authentication
      operationId: rssFeed
      responses:
        default:
          description: default response
          content:
            text/xml:
              schema:
                type: string
  /metadata/runner_dependencies:
    get:
      tags:
      - metadata
      summary: Returns the file containing runner dependencies
      description: Returns the file containing runner dependencies, NO authentication
      operationId: getRunnerDependencies
      parameters:
      - name: client_version
        in: query
        description: The Dockstore client version
        schema:
          type: string
      - name: python_version
        in: query
        description: Python version, only relevant for the cwltool runner
        schema:
          type: string
          default: "2"
      - name: runner
        in: query
        description: The tool runner
        schema:
          type: string
          default: cwltool
          enum:
          - cwltool
      - name: output
        in: query
        description: Response type
        schema:
          type: string
          default: text
          enum:
          - json
          - text
      responses:
        default:
          description: The requirements.txt file
          content:
            application/json:
              schema:
                type: string
  /metadata/sourceControlList:
    get:
      tags:
      - metadata
      summary: Get the list of source controls supported on Dockstore
      description: Get the list of source controls supported on Dockstore, NO authentication
      operationId: getSourceControlList
      responses:
        default:
          description: List of source control repositories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceControlBean'
  /metadata/descriptorLanguageList:
    get:
      tags:
      - metadata
      summary: Get the list of descriptor languages supported on Dockstore
      description: Get the list of descriptor languages supported on Dockstore, NO
        authentication
      operationId: getDescriptorLanguages
      responses:
        default:
          description: List of descriptor languages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DescriptorLanguageBean'
  /metadata/okHttpCachePerformance:
    get:
      tags:
      - metadata
      summary: Get measures of cache performance
      description: Get measures of cache performance, NO authentication
      operationId: getCachePerformance
      responses:
        default:
          description: Cache performance information
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /metadata/elasticSearch:
    get:
      tags:
      - metadata
      summary: Successful response if elastic search is up and running
      description: Successful response if elastic search is up and running, NO authentication
      operationId: checkElasticSearch
      responses:
        default:
          description: default response
          content:
            text/html: {}
            text/xml: {}
  /metadata/config.json:
    get:
      tags:
      - metadata
      summary: Configuration for UI clients of the API
      description: Configuration, NO authentication
      operationId: getConfig
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
  /organizations:
    get:
      operationId: getApprovedOrganizations
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
    post:
      operationId: createOrganization
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
  /organizations/{organizationId}/approve:
    post:
      operationId: approveOrganization
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
  /organizations/{organizationId}/reject:
    post:
      operationId: rejectOrganization
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
  /organizations/{organizationId}/request:
    post:
      operationId: requestOrganizationReview
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
  /organizations/name/{name}:
    get:
      operationId: getOrganizationByName
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
  /organizations/{organizationId}:
    get:
      operationId: getOrganizationById
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
    put:
      operationId: updateOrganization
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
  /organizations/{organizationId}/description:
    get:
      operationId: getOrganizationDescription
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: string
    put:
      operationId: updateOrganizationDescription
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
  /organizations/{organizationId}/members:
    get:
      operationId: getOrganizationMembers
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationUser'
  /organizations/{organizationId}/events:
    get:
      operationId: getOrganizationEvents
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: offset
        in: query
        schema:
          type: integer
          format: int32
          default: 0
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 100
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
  /organizations/{organizationId}/star:
    put:
      operationId: starOrganization
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /organizations/{organizationId}/unstar:
    delete:
      operationId: unstarOrganization
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /organizations/{organizationId}/starredUsers:
    get:
      operationId: getStarredUsersForApprovedOrganization
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /organizations/all:
    get:
      operationId: getAllOrganizations
      parameters:
      - name: type
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
  /organizations/{organizationId}/users/{username}:
    put:
      operationId: addUserToOrgByUsername
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUser'
  /organizations/{organizationId}/user:
    put:
      operationId: addUserToOrg
      parameters:
      - name: role
        in: query
        schema:
          type: string
      - name: userId
        in: query
        schema:
          type: integer
          format: int64
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUser'
    post:
      operationId: updateUserRole
      parameters:
      - name: role
        in: query
        schema:
          type: string
      - name: userId
        in: query
        schema:
          type: integer
          format: int64
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUser'
    delete:
      operationId: deleteUserRole
      parameters:
      - name: userId
        in: query
        schema:
          type: integer
          format: int64
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /organizations/{organizationId}/invitation:
    post:
      operationId: acceptOrRejectInvitation
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: accept
        in: query
        schema:
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /organizations/{organizationId}/aliases:
    put:
      operationId: updateAliases_3
      parameters:
      - name: organizationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: aliases
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Aliasable'
  /organizations/{alias}/aliases:
    get:
      operationId: getOrganizationByAlias
      parameters:
      - name: alias
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
  /workflows/path/service/upsertVersion:
    post:
      operationId: upsertServiceVersion
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
  /workflows/path/service:
    post:
      operationId: addService
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
  /auth/tokens/{tokenId}:
    get:
      operationId: listToken
      parameters:
      - name: tokenId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
    delete:
      operationId: deleteToken
      parameters:
      - name: tokenId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /auth/tokens/quay.io:
    get:
      operationId: addQuayToken
      parameters:
      - name: access_token
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
  /auth/tokens/gitlab.com:
    get:
      operationId: addGitlabToken
      parameters:
      - name: code
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
  /auth/tokens/google:
    post:
      operationId: addGoogleToken
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
  /auth/tokens/github:
    post:
      operationId: addToken
      requestBody:
        content:
          '*/*':
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
  /auth/tokens/github.com:
    get:
      operationId: addGithubToken
      parameters:
      - name: code
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
  /auth/tokens/bitbucket.org:
    get:
      operationId: addBitbucketToken
      parameters:
      - name: code
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
  /auth/tokens/zenodo.org:
    get:
      operationId: addZenodoToken
      parameters:
      - name: code
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
  /toolTester/logs/search:
    get:
      tags:
      - toolTester
      summary: Search for ToolTester log files
      operationId: search
      parameters:
      - name: tool_id
        in: query
        description: TRS Tool Id
        required: true
        schema:
          type: string
        example: '#workflow/github.com/dockstore/hello_world'
      - name: tool_version_name
        in: query
        required: true
        schema:
          type: string
        example: v1.0.0
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolTesterLog'
  /toolTester/logs:
    get:
      tags:
      - toolTester
      summary: Get ToolTester log file
      operationId: getToolTesterLog
      parameters:
      - name: tool_id
        in: query
        description: TRS Tool Id
        required: true
        schema:
          type: string
        example: '#workflow/github.com/dockstore/hello_world'
      - name: tool_version_name
        in: query
        required: true
        schema:
          type: string
        example: v1.0.0
      - name: test_filename
        in: query
        required: true
        schema:
          type: string
        example: hello_world.cwl.json
      - name: runner
        in: query
        required: true
        schema:
          type: string
        example: cwltool
      - name: log_type
        in: query
        required: true
        schema:
          type: string
          enum:
          - FULL
          - SUMMARY
      - name: filename
        in: query
        required: true
        schema:
          type: string
        example: 1554477737092.log
      responses:
        default:
          description: default response
          content:
            text/plain:
              schema:
                type: string
  /users/{userId}/containers/refresh:
    get:
      operationId: refresh_1
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
  /users/updateUserMetadata:
    get:
      operationId: updateUserMetadata
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/{userId}:
    get:
      operationId: getSpecificUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/user:
    get:
      operationId: getUser
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      operationId: selfDestruct
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: boolean
  /users/username/{username}:
    get:
      operationId: listUser
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/user/memberships:
    get:
      operationId: getUserMemberships
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationUser'
  /users/user/extended:
    get:
      operationId: getExtendedUserData
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedUserData'
  /users/user/changeUsername:
    post:
      operationId: changeUsername
      parameters:
      - name: username
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/user/{userId}:
    delete:
      operationId: terminateUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: boolean
  /users/checkUser/{username}:
    get:
      operationId: checkUserExists
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: boolean
  /users/{userId}/tokens:
    get:
      operationId: getUserTokens
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
  /users/{userId}/tokens/github.com:
    get:
      operationId: getGithubUserTokens
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
  /users/{userId}/tokens/gitlab.com:
    get:
      operationId: getGitlabUserTokens
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
  /users/{userId}/tokens/quay.io:
    get:
      operationId: getQuayUserTokens
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
  /users/{userId}/tokens/dockstore:
    get:
      operationId: getDockstoreUserTokens
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
  /users/{userId}/containers/published:
    get:
      operationId: userPublishedContainers
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
  /users/{userId}/workflows/published:
    get:
      operationId: userPublishedWorkflows
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
  /users/{userId}/containers/{organization}/refresh:
    get:
      operationId: refreshToolsByOrganization
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: organization
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
  /users/{userId}/workflows/{organization}/refresh:
    get:
      operationId: refreshWorkflowsByOrganization
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: organization
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
  /users/{userId}/workflows/refresh:
    get:
      operationId: refreshWorkflows
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
  /users/{userId}/workflows:
    get:
      operationId: userWorkflows
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
  /users/{userId}/services:
    get:
      operationId: userServices
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
  /users/{userId}/containers:
    get:
      operationId: userContainers
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
  /users/starredTools:
    get:
      operationId: getStarredTools
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/Entry'
  /users/starredWorkflows:
    get:
      operationId: getStarredWorkflows
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/Entry'
  /users/starredOrganizations:
    get:
      operationId: getStarredOrganizations
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
  /users/user/updateUserMetadata:
    get:
      operationId: updateLoggedInUserMetadata
      parameters:
      - name: source
        in: query
        schema:
          type: string
          enum:
          - quay.io
          - github.com
          - dockstore
          - bitbucket.org
          - gitlab.com
          - zenodo.org
          - google.com
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/user/{userId}/limits:
    get:
      operationId: getUserLimits
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Limits'
    put:
      operationId: setUserLimits
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Limits'
  /users/services/sync:
    post:
      operationId: syncUserServices
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
  /users/services/{organizationName}/sync:
    post:
      operationId: syncUserServicesbyOrganization
      parameters:
      - name: organizationName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
  /workflows/{workflowId}/publish:
    post:
      operationId: publish_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
  /workflows/versions:
    get:
      operationId: tags_1
      parameters:
      - name: workflowId
        in: query
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkflowVersion'
  /workflows/{workflowId}/refresh:
    get:
      operationId: refresh_2
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
  /workflows/{workflowId}/labels:
    put:
      operationId: updateLabels_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: labels
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
  /workflows/{workflowId}/defaultVersion:
    put:
      operationId: updateDefaultVersion_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
  /workflows/{workflowId}/verifiedSources:
    get:
      operationId: verifiedSources_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: string
  /workflows/{workflowId}/primaryDescriptor:
    get:
      operationId: primaryDescriptor_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: tag
        in: query
        schema:
          type: string
      - name: language
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceFile'
  /workflows/{workflowId}/descriptor/{relative-path}:
    get:
      operationId: secondaryDescriptorPath_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: tag
        in: query
        schema:
          type: string
      - name: relative-path
        in: path
        required: true
        schema:
          type: string
      - name: language
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceFile'
  /workflows/{workflowId}/secondaryDescriptors:
    get:
      operationId: secondaryDescriptors_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: tag
        in: query
        schema:
          type: string
      - name: language
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceFile'
  /workflows/{workflowId}/testParameterFiles:
    get:
      operationId: getTestParameterFiles_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: version
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SourceFile'
    put:
      operationId: addTestParameterFiles_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: testParameterPaths
        in: query
        schema:
          type: array
          items:
            type: string
      - name: version
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/SourceFile'
    delete:
      operationId: deleteTestParameterFiles_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: testParameterPaths
        in: query
        schema:
          type: array
          items:
            type: string
      - name: version
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/SourceFile'
  /workflows/{workflowId}/star:
    put:
      operationId: starEntry_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /workflows/{workflowId}/unstar:
    delete:
      operationId: unstarEntry_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /workflows/{workflowId}/users:
    get:
      operationId: getUsers_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /workflows/{workflowId}/starredUsers:
    get:
      operationId: getStarredUsers_1
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /workflows/{workflowId}:
    get:
      operationId: getWorkflow
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: include
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
    put:
      operationId: updateWorkflow
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
  /workflows/{workflowId}/verify/{workflowVersionId}:
    post:
      operationId: verifyWorkflowVersion
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: workflowVersionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/WorkflowVersion'
  /workflows/{workflowId}/requestDOI/{workflowVersionId}:
    put:
      operationId: requestDOIForWorkflowVersion
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: workflowVersionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/WorkflowVersion'
  /workflows/{workflowId}/resetVersionPaths:
    put:
      operationId: updateWorkflowPath
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
  /workflows/published/{workflowId}:
    get:
      operationId: getPublishedWorkflow
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: include
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
  /workflows/organization/{organization}/published:
    get:
      operationId: getPublishedWorkflowsByOrganization
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
  /workflows/published:
    get:
      operationId: allPublishedWorkflows
      parameters:
      - name: offset
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 100
      - name: filter
        in: query
        schema:
          type: string
          default: ""
      - name: sortCol
        in: query
        schema:
          type: string
          default: stars
      - name: sortOrder
        in: query
        schema:
          type: string
          default: desc
      - name: services
        in: query
        schema:
          type: boolean
          default: false
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
  /workflows/shared:
    get:
      operationId: sharedWorkflows
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SharedWorkflows'
  /workflows/path/workflow/{repository}:
    get:
      operationId: getWorkflowByPath
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      - name: services
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
  /workflows/path/workflow/{repository}/permissions:
    get:
      operationId: getWorkflowPermissions
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: services
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
    delete:
      operationId: removeWorkflowRole
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: email
        in: query
        schema:
          type: string
      - name: role
        in: query
        schema:
          type: string
          enum:
          - OWNER
          - WRITER
          - READER
      - name: services
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
    patch:
      operationId: addWorkflowPermission
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: services
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
  /workflows/path/workflow/{repository}/actions:
    get:
      operationId: getWorkflowActions
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: services
        in: query
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  enum:
                  - write
                  - read
                  - delete
                  - share
  /workflows/path/entry/{repository}:
    get:
      operationId: getEntryByPath
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
  /workflows/path/entry/{repository}/published:
    get:
      operationId: getPublishedEntryByPath
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
  /workflows/path/{repository}:
    get:
      operationId: getAllWorkflowByPath
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
  /workflows/path/workflow/{repository}/published:
    get:
      operationId: getPublishedWorkflowByPath
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      - name: services
        in: query
        schema:
          type: boolean
          default: false
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
  /workflows/manualRegister:
    post:
      operationId: manualRegister
      parameters:
      - name: workflowRegistry
        in: query
        schema:
          type: string
      - name: workflowPath
        in: query
        schema:
          type: string
      - name: defaultWorkflowPath
        in: query
        schema:
          type: string
      - name: workflowName
        in: query
        schema:
          type: string
      - name: descriptorType
        in: query
        schema:
          type: string
      - name: defaultTestParameterFilePath
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
  /workflows/{workflowId}/restub:
    get:
      operationId: restub
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
  /workflows/path/workflow/{repository}/upsertVersion:
    put:
      operationId: upsertVersions
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: gitReference
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
  /workflows/{workflowId}/workflowVersions:
    put:
      operationId: updateWorkflowVersion
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/WorkflowVersion'
  /workflows/{workflowId}/dag/{workflowVersionId}:
    get:
      operationId: getWorkflowDag
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: workflowVersionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: string
  /workflows/{workflowId}/tools/{workflowVersionId}:
    get:
      operationId: getTableToolContent
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: workflowVersionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: string
  /workflows/{entryId}/registerCheckerWorkflow/{descriptorType}:
    post:
      operationId: registerCheckerWorkflow
      parameters:
      - name: checkerWorkflowPath
        in: query
        schema:
          type: string
      - name: testParameterPath
        in: query
        schema:
          type: string
      - name: entryId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: descriptorType
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
  /workflows/{workflowId}/zip/{workflowVersionId}:
    get:
      operationId: getWorkflowZip
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: workflowVersionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/zip: {}
  /workflows/{alias}/aliases:
    get:
      operationId: getWorkflowByAlias
      parameters:
      - name: alias
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
  /api/ga4gh/v2/extended/tools/{organization}:
    get:
      operationId: toolsOrgGet
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/extended/tools/entry/_search:
    post:
      operationId: toolsIndexSearch
      requestBody:
        content:
          '*/*':
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /api/ga4gh/v2/extended/tools/index:
    post:
      operationId: toolsIndexGet
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            text/plain: {}
  /api/ga4gh/v2/extended/workflows/{organization}:
    get:
      operationId: workflowsOrgGet
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/extended/containers/{organization}:
    get:
      operationId: entriesOrgGet
      parameters:
      - name: organization
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/extended/organizations:
    get:
      operationId: entriesOrgGet_1
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/extended/{id}/versions/{version_id}/{type}/tests/{relative_path}:
    post:
      operationId: toolsIdVersionsVersionIdTypeTestsPost
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      - name: relative_path
        in: path
        required: true
        schema:
          type: string
      - name: platform
        in: query
        schema:
          type: string
      - name: platform_version
        in: query
        schema:
          type: string
      - name: verified
        in: query
        schema:
          type: boolean
      - name: metadata
        in: query
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /api/ga4gh/v2/metadata:
    get:
      operationId: metadataGet
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v1/metadata:
    get:
      operationId: metadataGet_1
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/toolClasses:
    get:
      operationId: toolClassesGet
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v1/tool-classes:
    get:
      operationId: toolClassesGet_1
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/tools:
    get:
      operationId: toolsGet
      parameters:
      - name: id
        in: query
        schema:
          type: string
      - name: alias
        in: query
        schema:
          type: string
      - name: registry
        in: query
        schema:
          type: string
      - name: organization
        in: query
        schema:
          type: string
      - name: name
        in: query
        schema:
          type: string
      - name: toolname
        in: query
        schema:
          type: string
      - name: description
        in: query
        schema:
          type: string
      - name: author
        in: query
        schema:
          type: string
      - name: checker
        in: query
        schema:
          type: boolean
      - name: offset
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 1000
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/tools/{id}:
    get:
      operationId: toolsIdGet
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/tools/{id}/versions:
    get:
      operationId: toolsIdVersionsGet
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/tools/{id}/versions/{version_id}:
    get:
      operationId: toolsIdVersionsVersionIdGet
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/descriptor:
    get:
      operationId: toolsIdVersionsVersionIdTypeDescriptorGet
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}:
    get:
      operationId: toolsIdVersionsVersionIdTypeDescriptorRelativePathGet
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      - name: relative_path
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/tests:
    get:
      operationId: toolsIdVersionsVersionIdTypeTestsGet
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/tools/{id}/versions/{version_id}/containerfile:
    get:
      operationId: toolsIdVersionsVersionIdContainerfileGet
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/files:
    get:
      operationId: toolsIdVersionsVersionIdTypeFilesGet
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v1/tools:
    get:
      operationId: toolsGet_1
      parameters:
      - name: id
        in: query
        schema:
          type: string
      - name: registry
        in: query
        schema:
          type: string
      - name: organization
        in: query
        schema:
          type: string
      - name: name
        in: query
        schema:
          type: string
      - name: toolname
        in: query
        schema:
          type: string
      - name: description
        in: query
        schema:
          type: string
      - name: author
        in: query
        schema:
          type: string
      - name: offset
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v1/tools/{id}:
    get:
      operationId: toolsIdGet_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v1/tools/{id}/versions:
    get:
      operationId: toolsIdVersionsGet_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v1/tools/{id}/versions/{version_id}/dockerfile:
    get:
      operationId: toolsIdVersionsVersionIdDockerfileGet
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v1/tools/{id}/versions/{version_id}:
    get:
      operationId: toolsIdVersionsVersionIdGet_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/descriptor:
    get:
      operationId: toolsIdVersionsVersionIdTypeDescriptorGet_1
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}:
    get:
      operationId: toolsIdVersionsVersionIdTypeDescriptorRelativePathGet_1
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      - name: relative_path
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
  /api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/tests:
    get:
      operationId: toolsIdVersionsVersionIdTypeTestsGet_1
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version_id
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/plain: {}
components:
  schemas:
    Alias:
      type: object
      properties:
        content:
          type: string
    Collection:
      required:
      - name
      - topic
      type: object
      properties:
        id:
          type: integer
          description: Implementation specific ID for the collection in this web service
          format: int64
        name:
          maxLength: 39
          minLength: 3
          pattern: '[a-zA-Z][a-zA-Z\d]*'
          type: string
          description: Name of the collection
          example: Alignment
        description:
          type: string
          description: Description of the collection
        displayName:
          maxLength: 50
          minLength: 3
          pattern: '[\w ,_\-&()'']*'
          type: string
        topic:
          type: string
          description: Short description of the collection
          example: A collection of alignment algorithms
        entries:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Entry'
        organizationID:
          type: integer
          format: int64
        aliases:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Alias'
        dbCreateDate:
          type: string
          format: date-time
        dbUpdateDate:
          type: string
          format: date-time
        organizationName:
          type: string
      description: Collection in an organization, collects entries
    Entry:
      type: object
      properties:
        id:
          type: integer
          format: int64
        author:
          type: string
        description:
          type: string
        labels:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Label'
        users:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
        starredUsers:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
        email:
          type: string
        defaultVersion:
          type: string
        lastUpdated:
          type: string
          format: date-time
        gitUrl:
          type: string
        aliases:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Alias'
        dbCreateDate:
          type: string
          format: date-time
        dbUpdateDate:
          type: string
          format: date-time
        topicId:
          type: integer
          format: int64
        workflowVersions:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Version'
        is_published:
          type: boolean
        last_modified:
          type: integer
          format: int32
        checker_id:
          type: integer
          format: int64
        has_checker:
          type: boolean
        input_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        output_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        last_modified_date:
          type: string
          format: date-time
    FileFormat:
      type: object
      properties:
        value:
          type: string
    Label:
      type: object
      properties:
        id:
          type: integer
          format: int64
        value:
          type: string
    Profile:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        avatarURL:
          type: string
        company:
          type: string
        location:
          type: string
        bio:
          type: string
        username:
          type: string
    SourceFile:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
          enum:
          - DOCKSTORE_CWL
          - DOCKSTORE_WDL
          - DOCKERFILE
          - CWL_TEST_JSON
          - WDL_TEST_JSON
          - NEXTFLOW
          - NEXTFLOW_CONFIG
          - NEXTFLOW_TEST_PARAMS
          - DOCKSTORE_YML
          - DOCKSTORE_SERVICE_YML
          - DOCKSTORE_SERVICE_TEST_JSON
          - DOCKSTORE_SERVICE_OTHER
        content:
          type: string
        path:
          type: string
        absolutePath:
          type: string
        frozen:
          type: boolean
        verifiedBySource:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VerificationInformation'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        isAdmin:
          type: boolean
        userProfiles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Profile'
        avatarUrl:
          type: string
        curator:
          type: boolean
        setupComplete:
          type: boolean
        privacyPolicyVersion:
          type: string
          enum:
          - NONE
          - PRIVACY_POLICY_VERSION_2_5
        privacyPolicyVersionAcceptanceDate:
          type: string
          format: date-time
        name:
          type: string
        tosversion:
          type: string
          enum:
          - NONE
          - TOS_VERSION_1
        tosversionAcceptanceDate:
          type: string
          format: date-time
          writeOnly: true
        tosacceptanceDate:
          type: string
          format: date-time
    Validation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
          enum:
          - DOCKSTORE_CWL
          - DOCKSTORE_WDL
          - DOCKERFILE
          - CWL_TEST_JSON
          - WDL_TEST_JSON
          - NEXTFLOW
          - NEXTFLOW_CONFIG
          - NEXTFLOW_TEST_PARAMS
          - DOCKSTORE_YML
          - DOCKSTORE_SERVICE_YML
          - DOCKSTORE_SERVICE_TEST_JSON
          - DOCKSTORE_SERVICE_OTHER
        valid:
          type: boolean
        message:
          type: string
    VerificationInformation:
      type: object
      properties:
        verified:
          type: boolean
        metadata:
          type: string
        platformVersion:
          type: string
    Version:
      type: object
      properties:
        id:
          type: integer
          format: int64
        reference:
          type: string
        name:
          type: string
        commitID:
          type: string
        frozen:
          type: boolean
        referenceType:
          type: string
          enum:
          - COMMIT
          - TAG
          - BRANCH
          - NOT_APPLICABLE
          - UNSET
        sourceFiles:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/SourceFile'
        valid:
          type: boolean
        dirtyBit:
          type: boolean
        versionEditor:
          $ref: '#/components/schemas/User'
        validations:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Validation'
        hidden:
          type: boolean
        verified:
          type: boolean
        verifiedSource:
          type: string
        doiURL:
          type: string
        doiStatus:
          type: string
          enum:
          - NOT_REQUESTED
          - REQUESTED
          - CREATED
        workingDirectory:
          type: string
        dbUpdateDate:
          type: string
          format: date-time
        input_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        output_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
    Aliasable:
      type: object
      properties:
        aliases:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Alias'
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        reference:
          type: string
        name:
          type: string
        commitID:
          type: string
        frozen:
          type: boolean
        referenceType:
          type: string
          enum:
          - COMMIT
          - TAG
          - BRANCH
          - NOT_APPLICABLE
          - UNSET
        sourceFiles:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/SourceFile'
        valid:
          type: boolean
        dirtyBit:
          type: boolean
        versionEditor:
          $ref: '#/components/schemas/User'
        validations:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Validation'
        size:
          type: integer
          format: int64
        automated:
          type: boolean
        workingDirectory:
          type: string
        hidden:
          type: boolean
        verified:
          type: boolean
        verifiedSource:
          type: string
        doiURL:
          type: string
        doiStatus:
          type: string
          enum:
          - NOT_REQUESTED
          - REQUESTED
          - CREATED
        dbUpdateDate:
          type: string
          format: date-time
        input_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        output_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        last_built:
          type: string
          format: date-time
        image_id:
          type: string
        dockerfile_path:
          type: string
        cwl_path:
          type: string
        wdl_path:
          type: string
    Tool:
      type: object
      properties:
        id:
          type: integer
          format: int64
        author:
          type: string
        description:
          type: string
        labels:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Label'
        users:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
        starredUsers:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
        email:
          type: string
        defaultVersion:
          type: string
        lastUpdated:
          type: string
          format: date-time
        gitUrl:
          type: string
        aliases:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Alias'
        dbCreateDate:
          type: string
          format: date-time
        dbUpdateDate:
          type: string
          format: date-time
        topicId:
          type: integer
          format: int64
        mode:
          type: string
          enum:
          - AUTO_DETECT_QUAY_TAGS_AUTOMATED_BUILDS
          - AUTO_DETECT_QUAY_TAGS_WITH_MIXED
          - MANUAL_IMAGE_PATH
          - HOSTED
        name:
          type: string
        toolname:
          type: string
        namespace:
          type: string
        lastBuild:
          type: string
          format: date-time
        workflowVersions:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        tags:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        path:
          type: string
        customerDockerRegistryPath:
          type: string
          writeOnly: true
        descriptorType:
          type: array
          items:
            type: string
        is_published:
          type: boolean
        last_modified:
          type: integer
          format: int32
        tool_maintainer_email:
          type: string
        private_access:
          type: boolean
        registry_string:
          type: string
        registry:
          type: integer
          format: int32
        tool_path:
          type: string
        default_cwl_path:
          type: string
        default_wdl_path:
          type: string
        default_dockerfile_path:
          type: string
        defaultCWLTestParameterFile:
          type: string
        defaultWDLTestParameterFile:
          type: string
        custom_docker_registry_path:
          type: string
        checker_id:
          type: integer
          format: int64
        has_checker:
          type: boolean
        input_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        output_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        last_modified_date:
          type: string
          format: date-time
    PublishRequest:
      type: object
      properties:
        publish:
          type: boolean
    RegistryBean:
      type: object
      properties:
        dockerPath:
          type: string
        friendlyName:
          type: string
        url:
          type: string
        privateOnly:
          type: string
        customDockerPath:
          type: string
        enum:
          type: string
    StarRequest:
      type: object
      properties:
        star:
          type: boolean
    CollectionOrganization:
      type: object
      properties:
        collectionId:
          type: integer
          format: int64
        collectionName:
          type: string
        collectionDisplayName:
          type: string
        organizationId:
          type: integer
          format: int64
        organizationName:
          type: string
        organizationDisplayName:
          type: string
    BioWorkflow:
      type: object
      allOf:
      - $ref: '#/components/schemas/Workflow'
      - type: object
        properties:
          is_checker:
            type: boolean
          parent_id:
            type: integer
            format: int64
    Service:
      type: object
      allOf:
      - $ref: '#/components/schemas/Workflow'
    Workflow:
      required:
      - type
      type: object
      properties:
        descriptorType:
          type: string
          enum:
          - CWL
          - WDL
          - NFL
          - service
          
          
        id:
          type: integer
          format: int64
        author:
          type: string
        description:
          type: string
        labels:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Label'
        users:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
        starredUsers:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
        email:
          type: string
        defaultVersion:
          type: string
        lastUpdated:
          type: string
          format: date-time
        gitUrl:
          type: string
        aliases:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Alias'
        dbCreateDate:
          type: string
          format: date-time
        dbUpdateDate:
          type: string
          format: date-time
        topicId:
          type: integer
          format: int64
        mode:
          type: string
          enum:
          - FULL
          - STUB
          - HOSTED
          - SERVICE
        workflowName:
          type: string
        organization:
          type: string
        repository:
          type: string
        sourceControl:
          type: string
          enum:
          - dockstore.org
          - github.com
          - bitbucket.org
          - gitlab.com
        workflowVersions:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/WorkflowVersion'
        path:
          type: string
        isChecker:
          type: boolean
        parentEntry:
          $ref: '#/components/schemas/Entry'
        is_published:
          type: boolean
        last_modified:
          type: integer
          format: int32
        full_workflow_path:
          type: string
        workflow_path:
          type: string
        defaultTestParameterFilePath:
          type: string
        source_control_provider:
          type: string
        checker_id:
          type: integer
          format: int64
        has_checker:
          type: boolean
        input_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        output_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        last_modified_date:
          type: string
          format: date-time
        type:
          type: string
      discriminator:
        propertyName: type
    WorkflowVersion:
      type: object
      properties:
        id:
          type: integer
          format: int64
        reference:
          type: string
        name:
          type: string
        commitID:
          type: string
        frozen:
          type: boolean
        referenceType:
          type: string
          enum:
          - COMMIT
          - TAG
          - BRANCH
          - NOT_APPLICABLE
          - UNSET
        sourceFiles:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/SourceFile'
        valid:
          type: boolean
        dirtyBit:
          type: boolean
        versionEditor:
          $ref: '#/components/schemas/User'
        validations:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Validation'
        subClass:
          type: string
          enum:
          - DOCKER_COMPOSE
          - SWARM
          - KUBERNETES
          - HELM
        workingDirectory:
          type: string
        hidden:
          type: boolean
        verified:
          type: boolean
        verifiedSource:
          type: string
        doiURL:
          type: string
        doiStatus:
          type: string
          enum:
          - NOT_REQUESTED
          - REQUESTED
          - CREATED
        dbUpdateDate:
          type: string
          format: date-time
        input_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        output_file_formats:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FileFormat'
        workflow_path:
          type: string
        last_modified:
          type: string
          format: date-time
    SourceControlBean:
      type: object
      properties:
        value:
          type: string
        friendlyName:
          type: string
    DescriptorLanguageBean:
      type: object
      properties:
        value:
          type: string
        friendlyName:
          type: string
    Config:
      type: object
      properties:
        dnaStackImportUrl:
          type: string
        dnaNexusImportUrl:
          type: string
        terraImportUrl:
          type: string
        gitHubAuthUrl:
          type: string
        gitHubRedirectPath:
          type: string
        gitHubScope:
          type: string
        quayIoAuthUrl:
          type: string
        quayIoRedirectPath:
          type: string
        quayIoScope:
          type: string
        bitBucketAuthUrl:
          type: string
        gitlabAuthUrl:
          type: string
        gitlabRedirectPath:
          type: string
        gitlabScope:
          type: string
        zenodoAuthUrl:
          type: string
        zenodoRedirectPath:
          type: string
        zenodoScope:
          type: string
        googleScope:
          type: string
        cwlVisualizerUri:
          type: string
        tagManagerId:
          type: string
        gitHubAppInstallationUrl:
          type: string
        documentationUrl:
          type: string
        githubClientId:
          type: string
        quayIoClientId:
          type: string
        bitBucketClientId:
          type: string
        gitlabClientId:
          type: string
        zenodoClientId:
          type: string
        googleClientId:
          type: string
        discourseUrl:
          type: string
    Organization:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          maxLength: 39
          minLength: 3
          pattern: '[a-zA-Z][a-zA-Z\d]*'
          type: string
        description:
          type: string
        link:
          type: string
        location:
          type: string
        email:
          type: string
        status:
          type: string
          enum:
          - PENDING
          - REJECTED
          - APPROVED
        users:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/OrganizationUser'
        topic:
          type: string
        displayName:
          maxLength: 50
          minLength: 3
          pattern: '[\w ,_\-&()'']*'
          type: string
        starredUsers:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/User'
        aliases:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Alias'
        dbCreateDate:
          type: string
          format: date-time
        dbUpdateDate:
          type: string
          format: date-time
        avatarUrl:
          pattern: ([^\s]+)(?i)(\.jpg|\.jpeg|\.png|\.gif)
          type: string
    OrganizationUser:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/OrganizationUserId'
        user:
          $ref: '#/components/schemas/User'
        organization:
          $ref: '#/components/schemas/Organization'
        role:
          type: string
          enum:
          - MAINTAINER
          - MEMBER
        accepted:
          type: boolean
        dbCreateDate:
          type: string
          format: date-time
        dbUpdateDate:
          type: string
          format: date-time
    OrganizationUserId:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        organizationId:
          type: integer
          format: int64
    Event:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/User'
        organization:
          $ref: '#/components/schemas/Organization'
        tool:
          $ref: '#/components/schemas/Tool'
        workflow:
          $ref: '#/components/schemas/Workflow'
        collection:
          $ref: '#/components/schemas/Collection'
        initiatorUser:
          $ref: '#/components/schemas/User'
        type:
          type: string
          enum:
          - CREATE_ORG
          - DELETE_ORG
          - MODIFY_ORG
          - APPROVE_ORG
          - REJECT_ORG
          - REREQUEST_ORG
          - ADD_USER_TO_ORG
          - REMOVE_USER_FROM_ORG
          - MODIFY_USER_ROLE_ORG
          - APPROVE_ORG_INVITE
          - REJECT_ORG_INVITE
          - CREATE_COLLECTION
          - MODIFY_COLLECTION
          - REMOVE_FROM_COLLECTION
          - ADD_TO_COLLECTION
        dbCreateDate:
          type: string
          format: date-time
        dbUpdateDate:
          type: string
          format: date-time
    Token:
      type: object
      properties:
        id:
          type: integer
          format: int64
        tokenSource:
          type: string
          enum:
          - quay.io
          - github.com
          - dockstore
          - bitbucket.org
          - gitlab.com
          - zenodo.org
          - google.com
        content:
          type: string
        username:
          type: string
        refreshToken:
          type: string
        userId:
          type: integer
          format: int64
        dbCreateDate:
          type: string
          format: date-time
        dbUpdateDate:
          type: string
          format: date-time
        token:
          type: string
    ToolTesterLog:
      type: object
      properties:
        toolId:
          type: string
        toolVersionName:
          type: string
        testFilename:
          type: string
        runner:
          type: string
        logType:
          type: string
          enum:
          - FULL
          - SUMMARY
        filename:
          type: string
    ExtendedUserData:
      type: object
      properties:
        canChangeUsername:
          type: boolean
    Limits:
      type: object
      properties:
        hostedEntryCountLimit:
          type: integer
          format: int32
        hostedEntryVersionLimit:
          type: integer
          format: int32
    SharedWorkflows:
      type: object
      properties:
        role:
          type: string
          enum:
          - OWNER
          - WRITER
          - READER
        workflows:
          type: array
          items:
            $ref: '#/components/schemas/Workflow'
    Permission:
      type: object
      properties:
        email:
          type: string
        role:
          type: string
          enum:
          - OWNER
          - WRITER
          - READER
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
