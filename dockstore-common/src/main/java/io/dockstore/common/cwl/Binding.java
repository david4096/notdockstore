package io.dockstore.common.cwl;

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Binding extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Binding\",\"fields\":[{\"name\":\"loadContents\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Only applies when `type` is `File`.  Read up to the first 64 KiB of text from the file and place it in the\\n\\\"contents\\\" field of the file object for manipulation by expressions.\\n\"},{\"name\":\"secondaryFiles\",\"type\":[\"null\",\"string\",{\"type\":\"enum\",\"name\":\"Expression\",\"doc\":\"Not a real type.  Indicates that a field must allow expressions.\\n\",\"symbols\":[\"ExpressionPlaceholder\"],\"docAfter\":\"https://w3id.org/cwl/cwl#ExpressionTool\"},{\"type\":\"array\",\"items\":[\"string\",\"Expression\"]}],\"doc\":\"Only applies when `type` is `File`.  Describes files that must be\\nincluded alongside the primary file.\\n\\nIf the value is an expression, the context of the expression is the input\\nor output File parameter to which this binding applies.\\n\\nIf the value is a string, it specifies that the following pattern\\nshould be applied to the primary file:\\n\\n  1. If string begins with one or more caret `^` characters, for each\\n    caret, remove the last file extension from the path (the last\\n    period `.` and all following characters).  If there are no file\\n    extensions, the path is unchanged.\\n  2. Append the remainder of the string to the end of the file path.\\n\",\"jsonldPredicate\":\"cwl:secondaryFiles\"}],\"docParent\":\"https://w3id.org/cwl/cwl#Parameter\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Only applies when `type` is `File`.  Read up to the first 64 KiB of text from the file and place it in the
"contents" field of the file object for manipulation by expressions.
 */
  @Deprecated public java.lang.Boolean loadContents;
  /** Only applies when `type` is `File`.  Describes files that must be
included alongside the primary file.

If the value is an expression, the context of the expression is the input
or output File parameter to which this binding applies.

If the value is a string, it specifies that the following pattern
should be applied to the primary file:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.
 */
  @Deprecated public java.lang.Object secondaryFiles;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Binding() {}

  /**
   * All-args constructor.
   */
  public Binding(java.lang.Boolean loadContents, java.lang.Object secondaryFiles) {
    this.loadContents = loadContents;
    this.secondaryFiles = secondaryFiles;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return loadContents;
    case 1: return secondaryFiles;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: loadContents = (java.lang.Boolean)value$; break;
    case 1: secondaryFiles = (java.lang.Object)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'loadContents' field.
   * Only applies when `type` is `File`.  Read up to the first 64 KiB of text from the file and place it in the
"contents" field of the file object for manipulation by expressions.
   */
  public java.lang.Boolean getLoadContents() {
    return loadContents;
  }

  /**
   * Sets the value of the 'loadContents' field.
   * Only applies when `type` is `File`.  Read up to the first 64 KiB of text from the file and place it in the
"contents" field of the file object for manipulation by expressions.
   * @param value the value to set.
   */
  public void setLoadContents(java.lang.Boolean value) {
    this.loadContents = value;
  }

  /**
   * Gets the value of the 'secondaryFiles' field.
   * Only applies when `type` is `File`.  Describes files that must be
included alongside the primary file.

If the value is an expression, the context of the expression is the input
or output File parameter to which this binding applies.

If the value is a string, it specifies that the following pattern
should be applied to the primary file:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.
   */
  public java.lang.Object getSecondaryFiles() {
    return secondaryFiles;
  }

  /**
   * Sets the value of the 'secondaryFiles' field.
   * Only applies when `type` is `File`.  Describes files that must be
included alongside the primary file.

If the value is an expression, the context of the expression is the input
or output File parameter to which this binding applies.

If the value is a string, it specifies that the following pattern
should be applied to the primary file:

  1. If string begins with one or more caret `^` characters, for each
    caret, remove the last file extension from the path (the last
    period `.` and all following characters).  If there are no file
    extensions, the path is unchanged.
  2. Append the remainder of the string to the end of the file path.
   * @param value the value to set.
   */
  public void setSecondaryFiles(java.lang.Object value) {
    this.secondaryFiles = value;
  }

  /** Creates a new Binding RecordBuilder */
  public static Binding.Builder newBuilder() {
    return new Binding.Builder();
  }
  
  /** Creates a new Binding RecordBuilder by copying an existing Builder */
  public static Binding.Builder newBuilder(Binding.Builder other) {
    return new Binding.Builder(other);
  }
  
  /** Creates a new Binding RecordBuilder by copying an existing Binding instance */
  public static Binding.Builder newBuilder(Binding other) {
    return new Binding.Builder(other);
  }
  
  /**
   * RecordBuilder for Binding instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Binding>
    implements org.apache.avro.data.RecordBuilder<Binding> {

    private java.lang.Boolean loadContents;
    private java.lang.Object secondaryFiles;

    /** Creates a new Builder */
    private Builder() {
      super(Binding.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Binding.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.loadContents)) {
        this.loadContents = data().deepCopy(fields()[0].schema(), other.loadContents);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.secondaryFiles)) {
        this.secondaryFiles = data().deepCopy(fields()[1].schema(), other.secondaryFiles);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Binding instance */
    private Builder(Binding other) {
            super(Binding.SCHEMA$);
      if (isValidValue(fields()[0], other.loadContents)) {
        this.loadContents = data().deepCopy(fields()[0].schema(), other.loadContents);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.secondaryFiles)) {
        this.secondaryFiles = data().deepCopy(fields()[1].schema(), other.secondaryFiles);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'loadContents' field */
    public java.lang.Boolean getLoadContents() {
      return loadContents;
    }
    
    /** Sets the value of the 'loadContents' field */
    public Binding.Builder setLoadContents(java.lang.Boolean value) {
      validate(fields()[0], value);
      this.loadContents = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'loadContents' field has been set */
    public boolean hasLoadContents() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'loadContents' field */
    public Binding.Builder clearLoadContents() {
      loadContents = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'secondaryFiles' field */
    public java.lang.Object getSecondaryFiles() {
      return secondaryFiles;
    }
    
    /** Sets the value of the 'secondaryFiles' field */
    public Binding.Builder setSecondaryFiles(java.lang.Object value) {
      validate(fields()[1], value);
      this.secondaryFiles = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'secondaryFiles' field has been set */
    public boolean hasSecondaryFiles() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'secondaryFiles' field */
    public Binding.Builder clearSecondaryFiles() {
      secondaryFiles = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Binding build() {
      try {
        Binding record = new Binding();
        record.loadContents = fieldSetFlags()[0] ? this.loadContents : (java.lang.Boolean) defaultValue(fields()[0]);
        record.secondaryFiles = fieldSetFlags()[1] ? this.secondaryFiles : (java.lang.Object) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
