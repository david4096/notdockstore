package io.dockstore.common.cwl;

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
/** Indicates that the workflow platform must support nested workflows in
the `run` field of (WorkflowStep)(#workflowstep).
 */
@org.apache.avro.specific.AvroGenerated
public class SubworkflowFeatureRequirement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SubworkflowFeatureRequirement\",\"doc\":\"Indicates that the workflow platform must support nested workflows in\\nthe `run` field of (WorkflowStep)(#workflowstep).\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"The specific requirement type.\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"@type\"},\"inherited_from\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The specific requirement type. */
  @Deprecated public java.lang.CharSequence class$;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SubworkflowFeatureRequirement() {}

  /**
   * All-args constructor.
   */
  public SubworkflowFeatureRequirement(java.lang.CharSequence class$) {
    this.class$ = class$;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return class$;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: class$ = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'class$' field.
   * The specific requirement type.   */
  public java.lang.CharSequence getClass$() {
    return class$;
  }

  /**
   * Sets the value of the 'class$' field.
   * The specific requirement type.   * @param value the value to set.
   */
  public void setClass$(java.lang.CharSequence value) {
    this.class$ = value;
  }

  /** Creates a new SubworkflowFeatureRequirement RecordBuilder */
  public static SubworkflowFeatureRequirement.Builder newBuilder() {
    return new SubworkflowFeatureRequirement.Builder();
  }
  
  /** Creates a new SubworkflowFeatureRequirement RecordBuilder by copying an existing Builder */
  public static SubworkflowFeatureRequirement.Builder newBuilder(SubworkflowFeatureRequirement.Builder other) {
    return new SubworkflowFeatureRequirement.Builder(other);
  }
  
  /** Creates a new SubworkflowFeatureRequirement RecordBuilder by copying an existing SubworkflowFeatureRequirement instance */
  public static SubworkflowFeatureRequirement.Builder newBuilder(SubworkflowFeatureRequirement other) {
    return new SubworkflowFeatureRequirement.Builder(other);
  }
  
  /**
   * RecordBuilder for SubworkflowFeatureRequirement instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SubworkflowFeatureRequirement>
    implements org.apache.avro.data.RecordBuilder<SubworkflowFeatureRequirement> {

    private java.lang.CharSequence class$;

    /** Creates a new Builder */
    private Builder() {
      super(SubworkflowFeatureRequirement.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(SubworkflowFeatureRequirement.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.class$)) {
        this.class$ = data().deepCopy(fields()[0].schema(), other.class$);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SubworkflowFeatureRequirement instance */
    private Builder(SubworkflowFeatureRequirement other) {
            super(SubworkflowFeatureRequirement.SCHEMA$);
      if (isValidValue(fields()[0], other.class$)) {
        this.class$ = data().deepCopy(fields()[0].schema(), other.class$);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'class$' field */
    public java.lang.CharSequence getClass$() {
      return class$;
    }
    
    /** Sets the value of the 'class$' field */
    public SubworkflowFeatureRequirement.Builder setClass$(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.class$ = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'class$' field has been set */
    public boolean hasClass$() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'class$' field */
    public SubworkflowFeatureRequirement.Builder clearClass$() {
      class$ = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public SubworkflowFeatureRequirement build() {
      try {
        SubworkflowFeatureRequirement record = new SubworkflowFeatureRequirement();
        record.class$ = fieldSetFlags()[0] ? this.class$ : (java.lang.CharSequence) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
