package cwl;
/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
/** Indicates that a workflow component should be run in a
[Docker](http://docker.com) container, and specifies how to fetch or build
the image.

If a CommandLineTool lists `DockerRequirement` under
`hints` or `requirements`, it may (or must) be run in the specified Docker
container.

The platform must first acquire or install the correct Docker image as
specified by `dockerPull`, `dockerImport`, `dockerLoad` or `dockerFile`.

The platform must execute the tool in the container using `docker run` with
the appropriate Docker image and tool command line.

The workflow platform may provide input files and the designated output
directory through the use of volume bind mounts.  The platform may rewrite
file paths in the input object to correspond to the Docker bind mounted
locations.

When running a tool contained in Docker, the workflow platform must not
assume anything about the contents of the Docker container, such as the
presence or absence of specific software, except to assume that the
generated command line represents a valid command within the runtime
environment of the container.

## Interaction with other requirements

If [EnvVarRequirement](#EnvVarRequirement) is specified alongside a
DockerRequirement, the environment variables must be provided to Docker
using `--env` or `--env-file` and interact with the container's preexisting
environment as defined by Docker.
 */
@org.apache.avro.specific.AvroGenerated
public class DockerRequirement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DockerRequirement\",\"doc\":\"Indicates that a workflow component should be run in a\\n[Docker](http://docker.com) container, and specifies how to fetch or build\\nthe image.\\n\\nIf a CommandLineTool lists `DockerRequirement` under\\n`hints` or `requirements`, it may (or must) be run in the specified Docker\\ncontainer.\\n\\nThe platform must first acquire or install the correct Docker image as\\nspecified by `dockerPull`, `dockerImport`, `dockerLoad` or `dockerFile`.\\n\\nThe platform must execute the tool in the container using `docker run` with\\nthe appropriate Docker image and tool command line.\\n\\nThe workflow platform may provide input files and the designated output\\ndirectory through the use of volume bind mounts.  The platform may rewrite\\nfile paths in the input object to correspond to the Docker bind mounted\\nlocations.\\n\\nWhen running a tool contained in Docker, the workflow platform must not\\nassume anything about the contents of the Docker container, such as the\\npresence or absence of specific software, except to assume that the\\ngenerated command line represents a valid command within the runtime\\nenvironment of the container.\\n\\n## Interaction with other requirements\\n\\nIf [EnvVarRequirement](#EnvVarRequirement) is specified alongside a\\nDockerRequirement, the environment variables must be provided to Docker\\nusing `--env` or `--env-file` and interact with the container's preexisting\\nenvironment as defined by Docker.\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"The specific requirement type.\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"@type\"},\"inherited_from\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"name\":\"dockerPull\",\"type\":[\"null\",\"string\"],\"doc\":\"Specify a Docker image to retrieve using `docker pull`.\"},{\"name\":\"dockerLoad\",\"type\":[\"null\",\"string\"],\"doc\":\"Specify a HTTP URL from which to download a Docker image using `docker load`.\"},{\"name\":\"dockerFile\",\"type\":[\"null\",\"string\"],\"doc\":\"Supply the contents of a Dockerfile which will be built using `docker build`.\"},{\"name\":\"dockerImport\",\"type\":[\"null\",\"string\"],\"doc\":\"Provide HTTP URL to download and gunzip a Docker images using `docker import.\"},{\"name\":\"dockerImageId\",\"type\":[\"null\",\"string\"],\"doc\":\"The image id that will be used for `docker run`.  May be a\\nhuman-readable image name or the image identifier hash.  May be skipped\\nif `dockerPull` is specified, in which case the `dockerPull` image id\\nmust be used.\\n\"},{\"name\":\"dockerOutputDirectory\",\"type\":[\"null\",\"string\"],\"doc\":\"Set the designated output directory to a specific location inside the\\nDocker container.\\n\"}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The specific requirement type. */
  @Deprecated public java.lang.CharSequence class$;
  /** Specify a Docker image to retrieve using `docker pull`. */
  @Deprecated public java.lang.CharSequence dockerPull;
  /** Specify a HTTP URL from which to download a Docker image using `docker load`. */
  @Deprecated public java.lang.CharSequence dockerLoad;
  /** Supply the contents of a Dockerfile which will be built using `docker build`. */
  @Deprecated public java.lang.CharSequence dockerFile;
  /** Provide HTTP URL to download and gunzip a Docker images using `docker import. */
  @Deprecated public java.lang.CharSequence dockerImport;
  /** The image id that will be used for `docker run`.  May be a
human-readable image name or the image identifier hash.  May be skipped
if `dockerPull` is specified, in which case the `dockerPull` image id
must be used.
 */
  @Deprecated public java.lang.CharSequence dockerImageId;
  /** Set the designated output directory to a specific location inside the
Docker container.
 */
  @Deprecated public java.lang.CharSequence dockerOutputDirectory;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public DockerRequirement() {}

  /**
   * All-args constructor.
   */
  public DockerRequirement(java.lang.CharSequence class$, java.lang.CharSequence dockerPull, java.lang.CharSequence dockerLoad, java.lang.CharSequence dockerFile, java.lang.CharSequence dockerImport, java.lang.CharSequence dockerImageId, java.lang.CharSequence dockerOutputDirectory) {
    this.class$ = class$;
    this.dockerPull = dockerPull;
    this.dockerLoad = dockerLoad;
    this.dockerFile = dockerFile;
    this.dockerImport = dockerImport;
    this.dockerImageId = dockerImageId;
    this.dockerOutputDirectory = dockerOutputDirectory;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return class$;
    case 1: return dockerPull;
    case 2: return dockerLoad;
    case 3: return dockerFile;
    case 4: return dockerImport;
    case 5: return dockerImageId;
    case 6: return dockerOutputDirectory;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: class$ = (java.lang.CharSequence)value$; break;
    case 1: dockerPull = (java.lang.CharSequence)value$; break;
    case 2: dockerLoad = (java.lang.CharSequence)value$; break;
    case 3: dockerFile = (java.lang.CharSequence)value$; break;
    case 4: dockerImport = (java.lang.CharSequence)value$; break;
    case 5: dockerImageId = (java.lang.CharSequence)value$; break;
    case 6: dockerOutputDirectory = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'class$' field.
   * The specific requirement type.   */
  public java.lang.CharSequence getClass$() {
    return class$;
  }

  /**
   * Sets the value of the 'class$' field.
   * The specific requirement type.   * @param value the value to set.
   */
  public void setClass$(java.lang.CharSequence value) {
    this.class$ = value;
  }

  /**
   * Gets the value of the 'dockerPull' field.
   * Specify a Docker image to retrieve using `docker pull`.   */
  public java.lang.CharSequence getDockerPull() {
    return dockerPull;
  }

  /**
   * Sets the value of the 'dockerPull' field.
   * Specify a Docker image to retrieve using `docker pull`.   * @param value the value to set.
   */
  public void setDockerPull(java.lang.CharSequence value) {
    this.dockerPull = value;
  }

  /**
   * Gets the value of the 'dockerLoad' field.
   * Specify a HTTP URL from which to download a Docker image using `docker load`.   */
  public java.lang.CharSequence getDockerLoad() {
    return dockerLoad;
  }

  /**
   * Sets the value of the 'dockerLoad' field.
   * Specify a HTTP URL from which to download a Docker image using `docker load`.   * @param value the value to set.
   */
  public void setDockerLoad(java.lang.CharSequence value) {
    this.dockerLoad = value;
  }

  /**
   * Gets the value of the 'dockerFile' field.
   * Supply the contents of a Dockerfile which will be built using `docker build`.   */
  public java.lang.CharSequence getDockerFile() {
    return dockerFile;
  }

  /**
   * Sets the value of the 'dockerFile' field.
   * Supply the contents of a Dockerfile which will be built using `docker build`.   * @param value the value to set.
   */
  public void setDockerFile(java.lang.CharSequence value) {
    this.dockerFile = value;
  }

  /**
   * Gets the value of the 'dockerImport' field.
   * Provide HTTP URL to download and gunzip a Docker images using `docker import.   */
  public java.lang.CharSequence getDockerImport() {
    return dockerImport;
  }

  /**
   * Sets the value of the 'dockerImport' field.
   * Provide HTTP URL to download and gunzip a Docker images using `docker import.   * @param value the value to set.
   */
  public void setDockerImport(java.lang.CharSequence value) {
    this.dockerImport = value;
  }

  /**
   * Gets the value of the 'dockerImageId' field.
   * The image id that will be used for `docker run`.  May be a
human-readable image name or the image identifier hash.  May be skipped
if `dockerPull` is specified, in which case the `dockerPull` image id
must be used.
   */
  public java.lang.CharSequence getDockerImageId() {
    return dockerImageId;
  }

  /**
   * Sets the value of the 'dockerImageId' field.
   * The image id that will be used for `docker run`.  May be a
human-readable image name or the image identifier hash.  May be skipped
if `dockerPull` is specified, in which case the `dockerPull` image id
must be used.
   * @param value the value to set.
   */
  public void setDockerImageId(java.lang.CharSequence value) {
    this.dockerImageId = value;
  }

  /**
   * Gets the value of the 'dockerOutputDirectory' field.
   * Set the designated output directory to a specific location inside the
Docker container.
   */
  public java.lang.CharSequence getDockerOutputDirectory() {
    return dockerOutputDirectory;
  }

  /**
   * Sets the value of the 'dockerOutputDirectory' field.
   * Set the designated output directory to a specific location inside the
Docker container.
   * @param value the value to set.
   */
  public void setDockerOutputDirectory(java.lang.CharSequence value) {
    this.dockerOutputDirectory = value;
  }

  /** Creates a new DockerRequirement RecordBuilder */
  public static DockerRequirement.Builder newBuilder() {
    return new DockerRequirement.Builder();
  }
  
  /** Creates a new DockerRequirement RecordBuilder by copying an existing Builder */
  public static DockerRequirement.Builder newBuilder(DockerRequirement.Builder other) {
    return new DockerRequirement.Builder(other);
  }
  
  /** Creates a new DockerRequirement RecordBuilder by copying an existing DockerRequirement instance */
  public static DockerRequirement.Builder newBuilder(DockerRequirement other) {
    return new DockerRequirement.Builder(other);
  }
  
  /**
   * RecordBuilder for DockerRequirement instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DockerRequirement>
    implements org.apache.avro.data.RecordBuilder<DockerRequirement> {

    private java.lang.CharSequence class$;
    private java.lang.CharSequence dockerPull;
    private java.lang.CharSequence dockerLoad;
    private java.lang.CharSequence dockerFile;
    private java.lang.CharSequence dockerImport;
    private java.lang.CharSequence dockerImageId;
    private java.lang.CharSequence dockerOutputDirectory;

    /** Creates a new Builder */
    private Builder() {
      super(DockerRequirement.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(DockerRequirement.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.class$)) {
        this.class$ = data().deepCopy(fields()[0].schema(), other.class$);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dockerPull)) {
        this.dockerPull = data().deepCopy(fields()[1].schema(), other.dockerPull);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dockerLoad)) {
        this.dockerLoad = data().deepCopy(fields()[2].schema(), other.dockerLoad);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dockerFile)) {
        this.dockerFile = data().deepCopy(fields()[3].schema(), other.dockerFile);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dockerImport)) {
        this.dockerImport = data().deepCopy(fields()[4].schema(), other.dockerImport);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.dockerImageId)) {
        this.dockerImageId = data().deepCopy(fields()[5].schema(), other.dockerImageId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.dockerOutputDirectory)) {
        this.dockerOutputDirectory = data().deepCopy(fields()[6].schema(), other.dockerOutputDirectory);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing DockerRequirement instance */
    private Builder(DockerRequirement other) {
            super(DockerRequirement.SCHEMA$);
      if (isValidValue(fields()[0], other.class$)) {
        this.class$ = data().deepCopy(fields()[0].schema(), other.class$);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dockerPull)) {
        this.dockerPull = data().deepCopy(fields()[1].schema(), other.dockerPull);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dockerLoad)) {
        this.dockerLoad = data().deepCopy(fields()[2].schema(), other.dockerLoad);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dockerFile)) {
        this.dockerFile = data().deepCopy(fields()[3].schema(), other.dockerFile);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dockerImport)) {
        this.dockerImport = data().deepCopy(fields()[4].schema(), other.dockerImport);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.dockerImageId)) {
        this.dockerImageId = data().deepCopy(fields()[5].schema(), other.dockerImageId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.dockerOutputDirectory)) {
        this.dockerOutputDirectory = data().deepCopy(fields()[6].schema(), other.dockerOutputDirectory);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'class$' field */
    public java.lang.CharSequence getClass$() {
      return class$;
    }
    
    /** Sets the value of the 'class$' field */
    public DockerRequirement.Builder setClass$(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.class$ = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'class$' field has been set */
    public boolean hasClass$() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'class$' field */
    public DockerRequirement.Builder clearClass$() {
      class$ = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'dockerPull' field */
    public java.lang.CharSequence getDockerPull() {
      return dockerPull;
    }
    
    /** Sets the value of the 'dockerPull' field */
    public DockerRequirement.Builder setDockerPull(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.dockerPull = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'dockerPull' field has been set */
    public boolean hasDockerPull() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'dockerPull' field */
    public DockerRequirement.Builder clearDockerPull() {
      dockerPull = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'dockerLoad' field */
    public java.lang.CharSequence getDockerLoad() {
      return dockerLoad;
    }
    
    /** Sets the value of the 'dockerLoad' field */
    public DockerRequirement.Builder setDockerLoad(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.dockerLoad = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'dockerLoad' field has been set */
    public boolean hasDockerLoad() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'dockerLoad' field */
    public DockerRequirement.Builder clearDockerLoad() {
      dockerLoad = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'dockerFile' field */
    public java.lang.CharSequence getDockerFile() {
      return dockerFile;
    }
    
    /** Sets the value of the 'dockerFile' field */
    public DockerRequirement.Builder setDockerFile(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.dockerFile = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'dockerFile' field has been set */
    public boolean hasDockerFile() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'dockerFile' field */
    public DockerRequirement.Builder clearDockerFile() {
      dockerFile = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'dockerImport' field */
    public java.lang.CharSequence getDockerImport() {
      return dockerImport;
    }
    
    /** Sets the value of the 'dockerImport' field */
    public DockerRequirement.Builder setDockerImport(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.dockerImport = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'dockerImport' field has been set */
    public boolean hasDockerImport() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'dockerImport' field */
    public DockerRequirement.Builder clearDockerImport() {
      dockerImport = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'dockerImageId' field */
    public java.lang.CharSequence getDockerImageId() {
      return dockerImageId;
    }
    
    /** Sets the value of the 'dockerImageId' field */
    public DockerRequirement.Builder setDockerImageId(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.dockerImageId = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'dockerImageId' field has been set */
    public boolean hasDockerImageId() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'dockerImageId' field */
    public DockerRequirement.Builder clearDockerImageId() {
      dockerImageId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'dockerOutputDirectory' field */
    public java.lang.CharSequence getDockerOutputDirectory() {
      return dockerOutputDirectory;
    }
    
    /** Sets the value of the 'dockerOutputDirectory' field */
    public DockerRequirement.Builder setDockerOutputDirectory(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.dockerOutputDirectory = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'dockerOutputDirectory' field has been set */
    public boolean hasDockerOutputDirectory() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'dockerOutputDirectory' field */
    public DockerRequirement.Builder clearDockerOutputDirectory() {
      dockerOutputDirectory = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public DockerRequirement build() {
      try {
        DockerRequirement record = new DockerRequirement();
        record.class$ = fieldSetFlags()[0] ? this.class$ : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.dockerPull = fieldSetFlags()[1] ? this.dockerPull : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.dockerLoad = fieldSetFlags()[2] ? this.dockerLoad : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.dockerFile = fieldSetFlags()[3] ? this.dockerFile : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.dockerImport = fieldSetFlags()[4] ? this.dockerImport : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.dockerImageId = fieldSetFlags()[5] ? this.dockerImageId : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.dockerOutputDirectory = fieldSetFlags()[6] ? this.dockerOutputDirectory : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
