package cwl;
/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
/** A documentation section.  This type exists to facilitate self-documenting
schemas but has no role in formal validation.
 */
@org.apache.avro.specific.AvroGenerated
public class Documentation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Documentation\",\"doc\":\"A documentation section.  This type exists to facilitate self-documenting\\nschemas but has no role in formal validation.\\n\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"The identifier for this type\",\"jsonldPredicate\":\"@id\",\"inherited_from\":\"https://w3id.org/cwl/salad#NamedType\"},{\"name\":\"doc\",\"type\":[\"null\",\"string\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"A documentation string for this type, or an array of strings which should be concatenated.\",\"jsonldPredicate\":\"sld:doc\",\"inherited_from\":\"https://w3id.org/cwl/salad#DocType\"},{\"name\":\"docParent\",\"type\":[\"null\",\"string\"],\"doc\":\"Hint to indicate that during documentation generation, documentation\\nfor this type should appear in a subsection under `docParent`.\\n\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#docParent\"},\"inherited_from\":\"https://w3id.org/cwl/salad#DocType\"},{\"name\":\"docChild\",\"type\":[\"null\",\"string\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Hint to indicate that during documentation generation, documentation\\nfor `docChild` should appear in a subsection under this type.\\n\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#docChild\"},\"inherited_from\":\"https://w3id.org/cwl/salad#DocType\"},{\"name\":\"docAfter\",\"type\":[\"null\",\"string\"],\"doc\":\"Hint to indicate that during documentation generation, documentation\\nfor this type should appear after the `docAfter` section at the same\\nlevel.\\n\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#docAfter\"},\"inherited_from\":\"https://w3id.org/cwl/salad#DocType\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Documentation_symbol\",\"symbols\":[\"documentation\"]},\"doc\":\"Must be `documentation`\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"}}],\"documentRoot\":true,\"extends\":[\"https://w3id.org/cwl/salad#NamedType\",\"https://w3id.org/cwl/salad#DocType\"]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The identifier for this type */
  @Deprecated public java.lang.CharSequence name;
  /** A documentation string for this type, or an array of strings which should be concatenated. */
  @Deprecated public java.lang.Object doc;
  /** Hint to indicate that during documentation generation, documentation
for this type should appear in a subsection under `docParent`.
 */
  @Deprecated public java.lang.CharSequence docParent;
  /** Hint to indicate that during documentation generation, documentation
for `docChild` should appear in a subsection under this type.
 */
  @Deprecated public java.lang.Object docChild;
  /** Hint to indicate that during documentation generation, documentation
for this type should appear after the `docAfter` section at the same
level.
 */
  @Deprecated public java.lang.CharSequence docAfter;
  /** Must be `documentation` */
  @Deprecated public Documentation_symbol type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Documentation() {}

  /**
   * All-args constructor.
   */
  public Documentation(java.lang.CharSequence name, java.lang.Object doc, java.lang.CharSequence docParent, java.lang.Object docChild, java.lang.CharSequence docAfter, Documentation_symbol type) {
    this.name = name;
    this.doc = doc;
    this.docParent = docParent;
    this.docChild = docChild;
    this.docAfter = docAfter;
    this.type = type;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return doc;
    case 2: return docParent;
    case 3: return docChild;
    case 4: return docAfter;
    case 5: return type;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: doc = (java.lang.Object)value$; break;
    case 2: docParent = (java.lang.CharSequence)value$; break;
    case 3: docChild = (java.lang.Object)value$; break;
    case 4: docAfter = (java.lang.CharSequence)value$; break;
    case 5: type = (Documentation_symbol)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * The identifier for this type   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * The identifier for this type   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'doc' field.
   * A documentation string for this type, or an array of strings which should be concatenated.   */
  public java.lang.Object getDoc() {
    return doc;
  }

  /**
   * Sets the value of the 'doc' field.
   * A documentation string for this type, or an array of strings which should be concatenated.   * @param value the value to set.
   */
  public void setDoc(java.lang.Object value) {
    this.doc = value;
  }

  /**
   * Gets the value of the 'docParent' field.
   * Hint to indicate that during documentation generation, documentation
for this type should appear in a subsection under `docParent`.
   */
  public java.lang.CharSequence getDocParent() {
    return docParent;
  }

  /**
   * Sets the value of the 'docParent' field.
   * Hint to indicate that during documentation generation, documentation
for this type should appear in a subsection under `docParent`.
   * @param value the value to set.
   */
  public void setDocParent(java.lang.CharSequence value) {
    this.docParent = value;
  }

  /**
   * Gets the value of the 'docChild' field.
   * Hint to indicate that during documentation generation, documentation
for `docChild` should appear in a subsection under this type.
   */
  public java.lang.Object getDocChild() {
    return docChild;
  }

  /**
   * Sets the value of the 'docChild' field.
   * Hint to indicate that during documentation generation, documentation
for `docChild` should appear in a subsection under this type.
   * @param value the value to set.
   */
  public void setDocChild(java.lang.Object value) {
    this.docChild = value;
  }

  /**
   * Gets the value of the 'docAfter' field.
   * Hint to indicate that during documentation generation, documentation
for this type should appear after the `docAfter` section at the same
level.
   */
  public java.lang.CharSequence getDocAfter() {
    return docAfter;
  }

  /**
   * Sets the value of the 'docAfter' field.
   * Hint to indicate that during documentation generation, documentation
for this type should appear after the `docAfter` section at the same
level.
   * @param value the value to set.
   */
  public void setDocAfter(java.lang.CharSequence value) {
    this.docAfter = value;
  }

  /**
   * Gets the value of the 'type' field.
   * Must be `documentation`   */
  public Documentation_symbol getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * Must be `documentation`   * @param value the value to set.
   */
  public void setType(Documentation_symbol value) {
    this.type = value;
  }

  /** Creates a new Documentation RecordBuilder */
  public static Documentation.Builder newBuilder() {
    return new Documentation.Builder();
  }
  
  /** Creates a new Documentation RecordBuilder by copying an existing Builder */
  public static Documentation.Builder newBuilder(Documentation.Builder other) {
    return new Documentation.Builder(other);
  }
  
  /** Creates a new Documentation RecordBuilder by copying an existing Documentation instance */
  public static Documentation.Builder newBuilder(Documentation other) {
    return new Documentation.Builder(other);
  }
  
  /**
   * RecordBuilder for Documentation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Documentation>
    implements org.apache.avro.data.RecordBuilder<Documentation> {

    private java.lang.CharSequence name;
    private java.lang.Object doc;
    private java.lang.CharSequence docParent;
    private java.lang.Object docChild;
    private java.lang.CharSequence docAfter;
    private Documentation_symbol type;

    /** Creates a new Builder */
    private Builder() {
      super(Documentation.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Documentation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.doc)) {
        this.doc = data().deepCopy(fields()[1].schema(), other.doc);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.docParent)) {
        this.docParent = data().deepCopy(fields()[2].schema(), other.docParent);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.docChild)) {
        this.docChild = data().deepCopy(fields()[3].schema(), other.docChild);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.docAfter)) {
        this.docAfter = data().deepCopy(fields()[4].schema(), other.docAfter);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.type)) {
        this.type = data().deepCopy(fields()[5].schema(), other.type);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Documentation instance */
    private Builder(Documentation other) {
            super(Documentation.SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.doc)) {
        this.doc = data().deepCopy(fields()[1].schema(), other.doc);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.docParent)) {
        this.docParent = data().deepCopy(fields()[2].schema(), other.docParent);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.docChild)) {
        this.docChild = data().deepCopy(fields()[3].schema(), other.docChild);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.docAfter)) {
        this.docAfter = data().deepCopy(fields()[4].schema(), other.docAfter);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.type)) {
        this.type = data().deepCopy(fields()[5].schema(), other.type);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public Documentation.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'name' field */
    public Documentation.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'doc' field */
    public java.lang.Object getDoc() {
      return doc;
    }
    
    /** Sets the value of the 'doc' field */
    public Documentation.Builder setDoc(java.lang.Object value) {
      validate(fields()[1], value);
      this.doc = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'doc' field has been set */
    public boolean hasDoc() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'doc' field */
    public Documentation.Builder clearDoc() {
      doc = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'docParent' field */
    public java.lang.CharSequence getDocParent() {
      return docParent;
    }
    
    /** Sets the value of the 'docParent' field */
    public Documentation.Builder setDocParent(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.docParent = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'docParent' field has been set */
    public boolean hasDocParent() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'docParent' field */
    public Documentation.Builder clearDocParent() {
      docParent = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'docChild' field */
    public java.lang.Object getDocChild() {
      return docChild;
    }
    
    /** Sets the value of the 'docChild' field */
    public Documentation.Builder setDocChild(java.lang.Object value) {
      validate(fields()[3], value);
      this.docChild = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'docChild' field has been set */
    public boolean hasDocChild() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'docChild' field */
    public Documentation.Builder clearDocChild() {
      docChild = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'docAfter' field */
    public java.lang.CharSequence getDocAfter() {
      return docAfter;
    }
    
    /** Sets the value of the 'docAfter' field */
    public Documentation.Builder setDocAfter(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.docAfter = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'docAfter' field has been set */
    public boolean hasDocAfter() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'docAfter' field */
    public Documentation.Builder clearDocAfter() {
      docAfter = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public Documentation_symbol getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public Documentation.Builder setType(Documentation_symbol value) {
      validate(fields()[5], value);
      this.type = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'type' field */
    public Documentation.Builder clearType() {
      type = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Documentation build() {
      try {
        Documentation record = new Documentation();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.doc = fieldSetFlags()[1] ? this.doc : (java.lang.Object) defaultValue(fields()[1]);
        record.docParent = fieldSetFlags()[2] ? this.docParent : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.docChild = fieldSetFlags()[3] ? this.docChild : (java.lang.Object) defaultValue(fields()[3]);
        record.docAfter = fieldSetFlags()[4] ? this.docAfter : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.type = fieldSetFlags()[5] ? this.type : (Documentation_symbol) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
