package cwl;
/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SaladRecordSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SaladRecordSchema\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"The identifier for this type\",\"jsonldPredicate\":\"@id\",\"inherited_from\":\"https://w3id.org/cwl/salad#NamedType\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Record_symbol\",\"symbols\":[\"record\"]},\"doc\":\"Must be `record`\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"},\"inherited_from\":\"https://w3id.org/cwl/salad#RecordSchema\"},{\"name\":\"fields\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"SaladRecordField\",\"doc\":\"A field of a record.\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"The name of the field\\n\",\"jsonldPredicate\":\"@id\",\"inherited_from\":\"https://w3id.org/cwl/salad#RecordField\"},{\"name\":\"doc\",\"type\":[\"null\",\"string\"],\"doc\":\"A documentation string for this field\\n\",\"jsonldPredicate\":\"sld:doc\",\"inherited_from\":\"https://w3id.org/cwl/salad#RecordField\"},{\"name\":\"type\",\"type\":[{\"type\":\"enum\",\"name\":\"PrimitiveType\",\"symbols\":[\"null\",\"boolean\",\"int\",\"long\",\"float\",\"double\",\"string\"]},{\"type\":\"record\",\"name\":\"RecordSchema\",\"fields\":[{\"name\":\"type\",\"type\":\"Record_symbol\",\"doc\":\"Must be `record`\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"}},{\"name\":\"fields\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordField\",\"doc\":\"A field of a record.\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"The name of the field\\n\",\"jsonldPredicate\":\"@id\"},{\"name\":\"doc\",\"type\":[\"null\",\"string\"],\"doc\":\"A documentation string for this field\\n\",\"jsonldPredicate\":\"sld:doc\"},{\"name\":\"type\",\"type\":[\"PrimitiveType\",\"RecordSchema\",{\"type\":\"record\",\"name\":\"EnumSchema\",\"doc\":\"Define an enumerated type.\\n\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Enum_symbol\",\"symbols\":[\"enum\"]},\"doc\":\"Must be `enum`\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"}},{\"name\":\"symbols\",\"type\":[{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Defines the set of valid symbols.\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#symbols\",\"identity\":true}}]},{\"type\":\"record\",\"name\":\"ArraySchema\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Array_symbol\",\"symbols\":[\"array\"]},\"doc\":\"Must be `array`\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"}},{\"name\":\"items\",\"type\":[\"PrimitiveType\",\"RecordSchema\",\"EnumSchema\",\"ArraySchema\",\"string\",{\"type\":\"array\",\"items\":[\"PrimitiveType\",\"RecordSchema\",\"EnumSchema\",\"ArraySchema\",\"string\"]}],\"doc\":\"Defines the type of the array elements.\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#items\"}}]},\"string\",{\"type\":\"array\",\"items\":[\"PrimitiveType\",\"RecordSchema\",\"EnumSchema\",\"ArraySchema\",\"string\"]}],\"doc\":\"The field type\\n\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"}}]}}],\"doc\":\"Defines the fields of the record.\",\"jsonldPredicate\":\"sld:fields\"}]},\"EnumSchema\",\"ArraySchema\",\"string\",{\"type\":\"array\",\"items\":[\"PrimitiveType\",\"RecordSchema\",\"EnumSchema\",\"ArraySchema\",\"string\"]}],\"doc\":\"The field type\\n\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"},\"inherited_from\":\"https://w3id.org/cwl/salad#RecordField\"},{\"name\":\"jsonldPredicate\",\"type\":[\"null\",\"string\",{\"type\":\"record\",\"name\":\"JsonldPredicate\",\"doc\":\"Attached to a record field to define how the parent record field is handled for\\nURI resolution and JSON-LD context generation.\\n\",\"fields\":[{\"name\":\"_id\",\"type\":[\"null\",\"string\"],\"doc\":\"The predicate URI that this field corresponds to.\\nCorresponds to JSON-LD `@id` directive.\\n\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#_id\",\"identity\":true}},{\"name\":\"_type\",\"type\":[\"null\",\"string\"],\"doc\":\"The context type hint, corresponds to JSON-LD `@type` directive.\\n\\n* If the value of this field is `@id` and `identity` is false or\\nunspecified, the parent field must be resolved using the link\\nresolution rules.  If `identity` is true, the parent field must be\\nresolved using the identifier expansion rules.\\n\\n* If the value of this field is `@vocab`, the parent field must be\\n  resolved using the vocabulary resolution rules.\\n\"},{\"name\":\"_container\",\"type\":[\"null\",\"string\"],\"doc\":\"Structure hint, corresponds to JSON-LD `@container` directive.\\n\"},{\"name\":\"identity\",\"type\":[\"null\",\"boolean\"],\"doc\":\"If true and `_type` is `@id` this indicates that the parent field must\\nbe resolved according to identity resolution rules instead of link\\nresolution rules.  In addition, the field value is considered an\\nassertion that the linked value exists; absence of an object in the loaded document\\nwith the URI is not an error.\\n\"},{\"name\":\"noLinkCheck\",\"type\":[\"null\",\"boolean\"],\"doc\":\"If true, this indicates that link validation traversal must stop at\\nthis field.  This field (it is is a URI) or any fields under it (if it\\nis an object or array) are not subject to link checking.\\n\"}]}],\"doc\":\"Annotate this type with linked data context.\\n\",\"jsonldPredicate\":\"sld:jsonldPredicate\"}],\"extends\":\"https://w3id.org/cwl/salad#RecordField\"}}],\"doc\":\"Defines the fields of the record.\",\"jsonldPredicate\":\"sld:fields\",\"inherited_from\":\"https://w3id.org/cwl/salad#RecordSchema\"},{\"name\":\"doc\",\"type\":[\"null\",\"string\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"A documentation string for this type, or an array of strings which should be concatenated.\",\"jsonldPredicate\":\"sld:doc\",\"inherited_from\":\"https://w3id.org/cwl/salad#DocType\"},{\"name\":\"docParent\",\"type\":[\"null\",\"string\"],\"doc\":\"Hint to indicate that during documentation generation, documentation\\nfor this type should appear in a subsection under `docParent`.\\n\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#docParent\"},\"inherited_from\":\"https://w3id.org/cwl/salad#DocType\"},{\"name\":\"docChild\",\"type\":[\"null\",\"string\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Hint to indicate that during documentation generation, documentation\\nfor `docChild` should appear in a subsection under this type.\\n\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#docChild\"},\"inherited_from\":\"https://w3id.org/cwl/salad#DocType\"},{\"name\":\"docAfter\",\"type\":[\"null\",\"string\"],\"doc\":\"Hint to indicate that during documentation generation, documentation\\nfor this type should appear after the `docAfter` section at the same\\nlevel.\\n\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#docAfter\"},\"inherited_from\":\"https://w3id.org/cwl/salad#DocType\"},{\"name\":\"jsonldPredicate\",\"type\":[\"null\",\"string\",\"JsonldPredicate\"],\"doc\":\"Annotate this type with linked data context.\\n\",\"jsonldPredicate\":\"sld:jsonldPredicate\",\"inherited_from\":\"https://w3id.org/cwl/salad#SchemaDefinedType\"},{\"name\":\"documentRoot\",\"type\":[\"null\",\"boolean\"],\"doc\":\"If true, indicates that the type is a valid at the document root.  At\\nleast one type in a schema must be tagged with `documentRoot: true`.\\n\",\"inherited_from\":\"https://w3id.org/cwl/salad#SchemaDefinedType\"},{\"name\":\"abstract\",\"type\":[\"null\",\"boolean\"],\"doc\":\"If true, this record is abstract and may be used as a base for other\\nrecords, but is not valid on its own.\\n\"},{\"name\":\"extends\",\"type\":[\"null\",\"string\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Indicates that this record inherits fields from one or more base records.\\n\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#extends\"}},{\"name\":\"specialize\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"SpecializeDef\",\"fields\":[{\"name\":\"specializeFrom\",\"type\":\"string\",\"doc\":\"The data type to be replaced\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#specializeFrom\"}},{\"name\":\"specializeTo\",\"type\":\"string\",\"doc\":\"The new data type to replace with\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#specializeTo\"}}]},{\"type\":\"array\",\"items\":\"SpecializeDef\"}],\"doc\":\"Only applies if `extends` is declared.  Apply type specialization using the\\nbase record as a template.  For each field inherited from the base\\nrecord, replace any instance of the type `specializeFrom` with\\n`specializeTo`.\\n\"}],\"extends\":[\"https://w3id.org/cwl/salad#NamedType\",\"https://w3id.org/cwl/salad#RecordSchema\",\"https://w3id.org/cwl/salad#SchemaDefinedType\"],","\"documentRoot\":true,\"specialize\":{\"specializeFrom\":\"https://w3id.org/cwl/salad#RecordField\",\"specializeTo\":\"https://w3id.org/cwl/salad#SaladRecordField\"}}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The identifier for this type */
  @Deprecated public java.lang.CharSequence name;
  /** Must be `record` */
  @Deprecated public Record_symbol type;
  /** Defines the fields of the record. */
  @Deprecated public java.util.List<SaladRecordField> fields;
  /** A documentation string for this type, or an array of strings which should be concatenated. */
  @Deprecated public java.lang.Object doc;
  /** Hint to indicate that during documentation generation, documentation
for this type should appear in a subsection under `docParent`.
 */
  @Deprecated public java.lang.CharSequence docParent;
  /** Hint to indicate that during documentation generation, documentation
for `docChild` should appear in a subsection under this type.
 */
  @Deprecated public java.lang.Object docChild;
  /** Hint to indicate that during documentation generation, documentation
for this type should appear after the `docAfter` section at the same
level.
 */
  @Deprecated public java.lang.CharSequence docAfter;
  /** Annotate this type with linked data context.
 */
  @Deprecated public java.lang.Object jsonldPredicate;
  /** If true, indicates that the type is a valid at the document root.  At
least one type in a schema must be tagged with `documentRoot: true`.
 */
  @Deprecated public java.lang.Boolean documentRoot;
  /** If true, this record is abstract and may be used as a base for other
records, but is not valid on its own.
 */
  @Deprecated public java.lang.Boolean abstract$;
  /** Indicates that this record inherits fields from one or more base records.
 */
  @Deprecated public java.lang.Object extends$;
  /** Only applies if `extends` is declared.  Apply type specialization using the
base record as a template.  For each field inherited from the base
record, replace any instance of the type `specializeFrom` with
`specializeTo`.
 */
  @Deprecated public java.lang.Object specialize;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SaladRecordSchema() {}

  /**
   * All-args constructor.
   */
  public SaladRecordSchema(java.lang.CharSequence name, Record_symbol type, java.util.List<SaladRecordField> fields, java.lang.Object doc, java.lang.CharSequence docParent, java.lang.Object docChild, java.lang.CharSequence docAfter, java.lang.Object jsonldPredicate, java.lang.Boolean documentRoot, java.lang.Boolean abstract$, java.lang.Object extends$, java.lang.Object specialize) {
    this.name = name;
    this.type = type;
    this.fields = fields;
    this.doc = doc;
    this.docParent = docParent;
    this.docChild = docChild;
    this.docAfter = docAfter;
    this.jsonldPredicate = jsonldPredicate;
    this.documentRoot = documentRoot;
    this.abstract$ = abstract$;
    this.extends$ = extends$;
    this.specialize = specialize;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return type;
    case 2: return fields;
    case 3: return doc;
    case 4: return docParent;
    case 5: return docChild;
    case 6: return docAfter;
    case 7: return jsonldPredicate;
    case 8: return documentRoot;
    case 9: return abstract$;
    case 10: return extends$;
    case 11: return specialize;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: type = (Record_symbol)value$; break;
    case 2: fields = (java.util.List<SaladRecordField>)value$; break;
    case 3: doc = (java.lang.Object)value$; break;
    case 4: docParent = (java.lang.CharSequence)value$; break;
    case 5: docChild = (java.lang.Object)value$; break;
    case 6: docAfter = (java.lang.CharSequence)value$; break;
    case 7: jsonldPredicate = (java.lang.Object)value$; break;
    case 8: documentRoot = (java.lang.Boolean)value$; break;
    case 9: abstract$ = (java.lang.Boolean)value$; break;
    case 10: extends$ = (java.lang.Object)value$; break;
    case 11: specialize = (java.lang.Object)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * The identifier for this type   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * The identifier for this type   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'type' field.
   * Must be `record`   */
  public Record_symbol getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * Must be `record`   * @param value the value to set.
   */
  public void setType(Record_symbol value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'fields' field.
   * Defines the fields of the record.   */
  public java.util.List<SaladRecordField> getFields() {
    return fields;
  }

  /**
   * Sets the value of the 'fields' field.
   * Defines the fields of the record.   * @param value the value to set.
   */
  public void setFields(java.util.List<SaladRecordField> value) {
    this.fields = value;
  }

  /**
   * Gets the value of the 'doc' field.
   * A documentation string for this type, or an array of strings which should be concatenated.   */
  public java.lang.Object getDoc() {
    return doc;
  }

  /**
   * Sets the value of the 'doc' field.
   * A documentation string for this type, or an array of strings which should be concatenated.   * @param value the value to set.
   */
  public void setDoc(java.lang.Object value) {
    this.doc = value;
  }

  /**
   * Gets the value of the 'docParent' field.
   * Hint to indicate that during documentation generation, documentation
for this type should appear in a subsection under `docParent`.
   */
  public java.lang.CharSequence getDocParent() {
    return docParent;
  }

  /**
   * Sets the value of the 'docParent' field.
   * Hint to indicate that during documentation generation, documentation
for this type should appear in a subsection under `docParent`.
   * @param value the value to set.
   */
  public void setDocParent(java.lang.CharSequence value) {
    this.docParent = value;
  }

  /**
   * Gets the value of the 'docChild' field.
   * Hint to indicate that during documentation generation, documentation
for `docChild` should appear in a subsection under this type.
   */
  public java.lang.Object getDocChild() {
    return docChild;
  }

  /**
   * Sets the value of the 'docChild' field.
   * Hint to indicate that during documentation generation, documentation
for `docChild` should appear in a subsection under this type.
   * @param value the value to set.
   */
  public void setDocChild(java.lang.Object value) {
    this.docChild = value;
  }

  /**
   * Gets the value of the 'docAfter' field.
   * Hint to indicate that during documentation generation, documentation
for this type should appear after the `docAfter` section at the same
level.
   */
  public java.lang.CharSequence getDocAfter() {
    return docAfter;
  }

  /**
   * Sets the value of the 'docAfter' field.
   * Hint to indicate that during documentation generation, documentation
for this type should appear after the `docAfter` section at the same
level.
   * @param value the value to set.
   */
  public void setDocAfter(java.lang.CharSequence value) {
    this.docAfter = value;
  }

  /**
   * Gets the value of the 'jsonldPredicate' field.
   * Annotate this type with linked data context.
   */
  public java.lang.Object getJsonldPredicate() {
    return jsonldPredicate;
  }

  /**
   * Sets the value of the 'jsonldPredicate' field.
   * Annotate this type with linked data context.
   * @param value the value to set.
   */
  public void setJsonldPredicate(java.lang.Object value) {
    this.jsonldPredicate = value;
  }

  /**
   * Gets the value of the 'documentRoot' field.
   * If true, indicates that the type is a valid at the document root.  At
least one type in a schema must be tagged with `documentRoot: true`.
   */
  public java.lang.Boolean getDocumentRoot() {
    return documentRoot;
  }

  /**
   * Sets the value of the 'documentRoot' field.
   * If true, indicates that the type is a valid at the document root.  At
least one type in a schema must be tagged with `documentRoot: true`.
   * @param value the value to set.
   */
  public void setDocumentRoot(java.lang.Boolean value) {
    this.documentRoot = value;
  }

  /**
   * Gets the value of the 'abstract$' field.
   * If true, this record is abstract and may be used as a base for other
records, but is not valid on its own.
   */
  public java.lang.Boolean getAbstract$() {
    return abstract$;
  }

  /**
   * Sets the value of the 'abstract$' field.
   * If true, this record is abstract and may be used as a base for other
records, but is not valid on its own.
   * @param value the value to set.
   */
  public void setAbstract$(java.lang.Boolean value) {
    this.abstract$ = value;
  }

  /**
   * Gets the value of the 'extends$' field.
   * Indicates that this record inherits fields from one or more base records.
   */
  public java.lang.Object getExtends$() {
    return extends$;
  }

  /**
   * Sets the value of the 'extends$' field.
   * Indicates that this record inherits fields from one or more base records.
   * @param value the value to set.
   */
  public void setExtends$(java.lang.Object value) {
    this.extends$ = value;
  }

  /**
   * Gets the value of the 'specialize' field.
   * Only applies if `extends` is declared.  Apply type specialization using the
base record as a template.  For each field inherited from the base
record, replace any instance of the type `specializeFrom` with
`specializeTo`.
   */
  public java.lang.Object getSpecialize() {
    return specialize;
  }

  /**
   * Sets the value of the 'specialize' field.
   * Only applies if `extends` is declared.  Apply type specialization using the
base record as a template.  For each field inherited from the base
record, replace any instance of the type `specializeFrom` with
`specializeTo`.
   * @param value the value to set.
   */
  public void setSpecialize(java.lang.Object value) {
    this.specialize = value;
  }

  /** Creates a new SaladRecordSchema RecordBuilder */
  public static SaladRecordSchema.Builder newBuilder() {
    return new SaladRecordSchema.Builder();
  }
  
  /** Creates a new SaladRecordSchema RecordBuilder by copying an existing Builder */
  public static SaladRecordSchema.Builder newBuilder(SaladRecordSchema.Builder other) {
    return new SaladRecordSchema.Builder(other);
  }
  
  /** Creates a new SaladRecordSchema RecordBuilder by copying an existing SaladRecordSchema instance */
  public static SaladRecordSchema.Builder newBuilder(SaladRecordSchema other) {
    return new SaladRecordSchema.Builder(other);
  }
  
  /**
   * RecordBuilder for SaladRecordSchema instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SaladRecordSchema>
    implements org.apache.avro.data.RecordBuilder<SaladRecordSchema> {

    private java.lang.CharSequence name;
    private Record_symbol type;
    private java.util.List<SaladRecordField> fields;
    private java.lang.Object doc;
    private java.lang.CharSequence docParent;
    private java.lang.Object docChild;
    private java.lang.CharSequence docAfter;
    private java.lang.Object jsonldPredicate;
    private java.lang.Boolean documentRoot;
    private java.lang.Boolean abstract$;
    private java.lang.Object extends$;
    private java.lang.Object specialize;

    /** Creates a new Builder */
    private Builder() {
      super(SaladRecordSchema.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(SaladRecordSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fields)) {
        this.fields = data().deepCopy(fields()[2].schema(), other.fields);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.doc)) {
        this.doc = data().deepCopy(fields()[3].schema(), other.doc);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.docParent)) {
        this.docParent = data().deepCopy(fields()[4].schema(), other.docParent);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.docChild)) {
        this.docChild = data().deepCopy(fields()[5].schema(), other.docChild);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.docAfter)) {
        this.docAfter = data().deepCopy(fields()[6].schema(), other.docAfter);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.jsonldPredicate)) {
        this.jsonldPredicate = data().deepCopy(fields()[7].schema(), other.jsonldPredicate);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.documentRoot)) {
        this.documentRoot = data().deepCopy(fields()[8].schema(), other.documentRoot);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.abstract$)) {
        this.abstract$ = data().deepCopy(fields()[9].schema(), other.abstract$);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.extends$)) {
        this.extends$ = data().deepCopy(fields()[10].schema(), other.extends$);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.specialize)) {
        this.specialize = data().deepCopy(fields()[11].schema(), other.specialize);
        fieldSetFlags()[11] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SaladRecordSchema instance */
    private Builder(SaladRecordSchema other) {
            super(SaladRecordSchema.SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fields)) {
        this.fields = data().deepCopy(fields()[2].schema(), other.fields);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.doc)) {
        this.doc = data().deepCopy(fields()[3].schema(), other.doc);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.docParent)) {
        this.docParent = data().deepCopy(fields()[4].schema(), other.docParent);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.docChild)) {
        this.docChild = data().deepCopy(fields()[5].schema(), other.docChild);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.docAfter)) {
        this.docAfter = data().deepCopy(fields()[6].schema(), other.docAfter);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.jsonldPredicate)) {
        this.jsonldPredicate = data().deepCopy(fields()[7].schema(), other.jsonldPredicate);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.documentRoot)) {
        this.documentRoot = data().deepCopy(fields()[8].schema(), other.documentRoot);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.abstract$)) {
        this.abstract$ = data().deepCopy(fields()[9].schema(), other.abstract$);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.extends$)) {
        this.extends$ = data().deepCopy(fields()[10].schema(), other.extends$);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.specialize)) {
        this.specialize = data().deepCopy(fields()[11].schema(), other.specialize);
        fieldSetFlags()[11] = true;
      }
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public SaladRecordSchema.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'name' field */
    public SaladRecordSchema.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public Record_symbol getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public SaladRecordSchema.Builder setType(Record_symbol value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'type' field */
    public SaladRecordSchema.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'fields' field */
    public java.util.List<SaladRecordField> getFields() {
      return fields;
    }
    
    /** Sets the value of the 'fields' field */
    public SaladRecordSchema.Builder setFields(java.util.List<SaladRecordField> value) {
      validate(fields()[2], value);
      this.fields = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'fields' field has been set */
    public boolean hasFields() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'fields' field */
    public SaladRecordSchema.Builder clearFields() {
      fields = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'doc' field */
    public java.lang.Object getDoc() {
      return doc;
    }
    
    /** Sets the value of the 'doc' field */
    public SaladRecordSchema.Builder setDoc(java.lang.Object value) {
      validate(fields()[3], value);
      this.doc = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'doc' field has been set */
    public boolean hasDoc() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'doc' field */
    public SaladRecordSchema.Builder clearDoc() {
      doc = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'docParent' field */
    public java.lang.CharSequence getDocParent() {
      return docParent;
    }
    
    /** Sets the value of the 'docParent' field */
    public SaladRecordSchema.Builder setDocParent(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.docParent = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'docParent' field has been set */
    public boolean hasDocParent() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'docParent' field */
    public SaladRecordSchema.Builder clearDocParent() {
      docParent = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'docChild' field */
    public java.lang.Object getDocChild() {
      return docChild;
    }
    
    /** Sets the value of the 'docChild' field */
    public SaladRecordSchema.Builder setDocChild(java.lang.Object value) {
      validate(fields()[5], value);
      this.docChild = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'docChild' field has been set */
    public boolean hasDocChild() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'docChild' field */
    public SaladRecordSchema.Builder clearDocChild() {
      docChild = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'docAfter' field */
    public java.lang.CharSequence getDocAfter() {
      return docAfter;
    }
    
    /** Sets the value of the 'docAfter' field */
    public SaladRecordSchema.Builder setDocAfter(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.docAfter = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'docAfter' field has been set */
    public boolean hasDocAfter() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'docAfter' field */
    public SaladRecordSchema.Builder clearDocAfter() {
      docAfter = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'jsonldPredicate' field */
    public java.lang.Object getJsonldPredicate() {
      return jsonldPredicate;
    }
    
    /** Sets the value of the 'jsonldPredicate' field */
    public SaladRecordSchema.Builder setJsonldPredicate(java.lang.Object value) {
      validate(fields()[7], value);
      this.jsonldPredicate = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'jsonldPredicate' field has been set */
    public boolean hasJsonldPredicate() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'jsonldPredicate' field */
    public SaladRecordSchema.Builder clearJsonldPredicate() {
      jsonldPredicate = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'documentRoot' field */
    public java.lang.Boolean getDocumentRoot() {
      return documentRoot;
    }
    
    /** Sets the value of the 'documentRoot' field */
    public SaladRecordSchema.Builder setDocumentRoot(java.lang.Boolean value) {
      validate(fields()[8], value);
      this.documentRoot = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'documentRoot' field has been set */
    public boolean hasDocumentRoot() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'documentRoot' field */
    public SaladRecordSchema.Builder clearDocumentRoot() {
      documentRoot = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'abstract$' field */
    public java.lang.Boolean getAbstract$() {
      return abstract$;
    }
    
    /** Sets the value of the 'abstract$' field */
    public SaladRecordSchema.Builder setAbstract$(java.lang.Boolean value) {
      validate(fields()[9], value);
      this.abstract$ = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'abstract$' field has been set */
    public boolean hasAbstract$() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'abstract$' field */
    public SaladRecordSchema.Builder clearAbstract$() {
      abstract$ = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'extends$' field */
    public java.lang.Object getExtends$() {
      return extends$;
    }
    
    /** Sets the value of the 'extends$' field */
    public SaladRecordSchema.Builder setExtends$(java.lang.Object value) {
      validate(fields()[10], value);
      this.extends$ = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'extends$' field has been set */
    public boolean hasExtends$() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'extends$' field */
    public SaladRecordSchema.Builder clearExtends$() {
      extends$ = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'specialize' field */
    public java.lang.Object getSpecialize() {
      return specialize;
    }
    
    /** Sets the value of the 'specialize' field */
    public SaladRecordSchema.Builder setSpecialize(java.lang.Object value) {
      validate(fields()[11], value);
      this.specialize = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'specialize' field has been set */
    public boolean hasSpecialize() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'specialize' field */
    public SaladRecordSchema.Builder clearSpecialize() {
      specialize = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    public SaladRecordSchema build() {
      try {
        SaladRecordSchema record = new SaladRecordSchema();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (Record_symbol) defaultValue(fields()[1]);
        record.fields = fieldSetFlags()[2] ? this.fields : (java.util.List<SaladRecordField>) defaultValue(fields()[2]);
        record.doc = fieldSetFlags()[3] ? this.doc : (java.lang.Object) defaultValue(fields()[3]);
        record.docParent = fieldSetFlags()[4] ? this.docParent : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.docChild = fieldSetFlags()[5] ? this.docChild : (java.lang.Object) defaultValue(fields()[5]);
        record.docAfter = fieldSetFlags()[6] ? this.docAfter : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.jsonldPredicate = fieldSetFlags()[7] ? this.jsonldPredicate : (java.lang.Object) defaultValue(fields()[7]);
        record.documentRoot = fieldSetFlags()[8] ? this.documentRoot : (java.lang.Boolean) defaultValue(fields()[8]);
        record.abstract$ = fieldSetFlags()[9] ? this.abstract$ : (java.lang.Boolean) defaultValue(fields()[9]);
        record.extends$ = fieldSetFlags()[10] ? this.extends$ : (java.lang.Object) defaultValue(fields()[10]);
        record.specialize = fieldSetFlags()[11] ? this.specialize : (java.lang.Object) defaultValue(fields()[11]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
