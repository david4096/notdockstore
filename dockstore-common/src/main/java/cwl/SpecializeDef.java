package cwl;
/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SpecializeDef extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SpecializeDef\",\"fields\":[{\"name\":\"specializeFrom\",\"type\":\"string\",\"doc\":\"The data type to be replaced\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#specializeFrom\"}},{\"name\":\"specializeTo\",\"type\":\"string\",\"doc\":\"The new data type to replace with\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#specializeTo\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The data type to be replaced */
  @Deprecated public java.lang.CharSequence specializeFrom;
  /** The new data type to replace with */
  @Deprecated public java.lang.CharSequence specializeTo;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SpecializeDef() {}

  /**
   * All-args constructor.
   */
  public SpecializeDef(java.lang.CharSequence specializeFrom, java.lang.CharSequence specializeTo) {
    this.specializeFrom = specializeFrom;
    this.specializeTo = specializeTo;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return specializeFrom;
    case 1: return specializeTo;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: specializeFrom = (java.lang.CharSequence)value$; break;
    case 1: specializeTo = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'specializeFrom' field.
   * The data type to be replaced   */
  public java.lang.CharSequence getSpecializeFrom() {
    return specializeFrom;
  }

  /**
   * Sets the value of the 'specializeFrom' field.
   * The data type to be replaced   * @param value the value to set.
   */
  public void setSpecializeFrom(java.lang.CharSequence value) {
    this.specializeFrom = value;
  }

  /**
   * Gets the value of the 'specializeTo' field.
   * The new data type to replace with   */
  public java.lang.CharSequence getSpecializeTo() {
    return specializeTo;
  }

  /**
   * Sets the value of the 'specializeTo' field.
   * The new data type to replace with   * @param value the value to set.
   */
  public void setSpecializeTo(java.lang.CharSequence value) {
    this.specializeTo = value;
  }

  /** Creates a new SpecializeDef RecordBuilder */
  public static SpecializeDef.Builder newBuilder() {
    return new SpecializeDef.Builder();
  }
  
  /** Creates a new SpecializeDef RecordBuilder by copying an existing Builder */
  public static SpecializeDef.Builder newBuilder(SpecializeDef.Builder other) {
    return new SpecializeDef.Builder(other);
  }
  
  /** Creates a new SpecializeDef RecordBuilder by copying an existing SpecializeDef instance */
  public static SpecializeDef.Builder newBuilder(SpecializeDef other) {
    return new SpecializeDef.Builder(other);
  }
  
  /**
   * RecordBuilder for SpecializeDef instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SpecializeDef>
    implements org.apache.avro.data.RecordBuilder<SpecializeDef> {

    private java.lang.CharSequence specializeFrom;
    private java.lang.CharSequence specializeTo;

    /** Creates a new Builder */
    private Builder() {
      super(SpecializeDef.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(SpecializeDef.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.specializeFrom)) {
        this.specializeFrom = data().deepCopy(fields()[0].schema(), other.specializeFrom);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.specializeTo)) {
        this.specializeTo = data().deepCopy(fields()[1].schema(), other.specializeTo);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SpecializeDef instance */
    private Builder(SpecializeDef other) {
            super(SpecializeDef.SCHEMA$);
      if (isValidValue(fields()[0], other.specializeFrom)) {
        this.specializeFrom = data().deepCopy(fields()[0].schema(), other.specializeFrom);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.specializeTo)) {
        this.specializeTo = data().deepCopy(fields()[1].schema(), other.specializeTo);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'specializeFrom' field */
    public java.lang.CharSequence getSpecializeFrom() {
      return specializeFrom;
    }
    
    /** Sets the value of the 'specializeFrom' field */
    public SpecializeDef.Builder setSpecializeFrom(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.specializeFrom = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'specializeFrom' field has been set */
    public boolean hasSpecializeFrom() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'specializeFrom' field */
    public SpecializeDef.Builder clearSpecializeFrom() {
      specializeFrom = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'specializeTo' field */
    public java.lang.CharSequence getSpecializeTo() {
      return specializeTo;
    }
    
    /** Sets the value of the 'specializeTo' field */
    public SpecializeDef.Builder setSpecializeTo(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.specializeTo = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'specializeTo' field has been set */
    public boolean hasSpecializeTo() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'specializeTo' field */
    public SpecializeDef.Builder clearSpecializeTo() {
      specializeTo = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public SpecializeDef build() {
      try {
        SpecializeDef record = new SpecializeDef();
        record.specializeFrom = fieldSetFlags()[0] ? this.specializeFrom : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.specializeTo = fieldSetFlags()[1] ? this.specializeTo : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
