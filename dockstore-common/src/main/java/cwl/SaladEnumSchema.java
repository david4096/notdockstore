package cwl;
/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
/** Define an enumerated type.
 */
@org.apache.avro.specific.AvroGenerated
public class SaladEnumSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SaladEnumSchema\",\"doc\":\"Define an enumerated type.\\n\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Enum_symbol\",\"symbols\":[\"enum\"]},\"doc\":\"Must be `enum`\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"},\"inherited_from\":\"https://w3id.org/cwl/salad#EnumSchema\"},{\"name\":\"symbols\",\"type\":[{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Defines the set of valid symbols.\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#symbols\",\"identity\":true},\"inherited_from\":\"https://w3id.org/cwl/salad#EnumSchema\"},{\"name\":\"doc\",\"type\":[\"null\",\"string\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"A documentation string for this type, or an array of strings which should be concatenated.\",\"jsonldPredicate\":\"sld:doc\",\"inherited_from\":\"https://w3id.org/cwl/salad#DocType\"},{\"name\":\"docParent\",\"type\":[\"null\",\"string\"],\"doc\":\"Hint to indicate that during documentation generation, documentation\\nfor this type should appear in a subsection under `docParent`.\\n\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#docParent\"},\"inherited_from\":\"https://w3id.org/cwl/salad#DocType\"},{\"name\":\"docChild\",\"type\":[\"null\",\"string\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Hint to indicate that during documentation generation, documentation\\nfor `docChild` should appear in a subsection under this type.\\n\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#docChild\"},\"inherited_from\":\"https://w3id.org/cwl/salad#DocType\"},{\"name\":\"docAfter\",\"type\":[\"null\",\"string\"],\"doc\":\"Hint to indicate that during documentation generation, documentation\\nfor this type should appear after the `docAfter` section at the same\\nlevel.\\n\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#docAfter\"},\"inherited_from\":\"https://w3id.org/cwl/salad#DocType\"},{\"name\":\"jsonldPredicate\",\"type\":[\"null\",\"string\",{\"type\":\"record\",\"name\":\"JsonldPredicate\",\"doc\":\"Attached to a record field to define how the parent record field is handled for\\nURI resolution and JSON-LD context generation.\\n\",\"fields\":[{\"name\":\"_id\",\"type\":[\"null\",\"string\"],\"doc\":\"The predicate URI that this field corresponds to.\\nCorresponds to JSON-LD `@id` directive.\\n\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#_id\",\"identity\":true}},{\"name\":\"_type\",\"type\":[\"null\",\"string\"],\"doc\":\"The context type hint, corresponds to JSON-LD `@type` directive.\\n\\n* If the value of this field is `@id` and `identity` is false or\\nunspecified, the parent field must be resolved using the link\\nresolution rules.  If `identity` is true, the parent field must be\\nresolved using the identifier expansion rules.\\n\\n* If the value of this field is `@vocab`, the parent field must be\\n  resolved using the vocabulary resolution rules.\\n\"},{\"name\":\"_container\",\"type\":[\"null\",\"string\"],\"doc\":\"Structure hint, corresponds to JSON-LD `@container` directive.\\n\"},{\"name\":\"identity\",\"type\":[\"null\",\"boolean\"],\"doc\":\"If true and `_type` is `@id` this indicates that the parent field must\\nbe resolved according to identity resolution rules instead of link\\nresolution rules.  In addition, the field value is considered an\\nassertion that the linked value exists; absence of an object in the loaded document\\nwith the URI is not an error.\\n\"},{\"name\":\"noLinkCheck\",\"type\":[\"null\",\"boolean\"],\"doc\":\"If true, this indicates that link validation traversal must stop at\\nthis field.  This field (it is is a URI) or any fields under it (if it\\nis an object or array) are not subject to link checking.\\n\"}]}],\"doc\":\"Annotate this type with linked data context.\\n\",\"jsonldPredicate\":\"sld:jsonldPredicate\",\"inherited_from\":\"https://w3id.org/cwl/salad#SchemaDefinedType\"},{\"name\":\"documentRoot\",\"type\":[\"null\",\"boolean\"],\"doc\":\"If true, indicates that the type is a valid at the document root.  At\\nleast one type in a schema must be tagged with `documentRoot: true`.\\n\",\"inherited_from\":\"https://w3id.org/cwl/salad#SchemaDefinedType\"},{\"name\":\"extends\",\"type\":[\"null\",\"string\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Indicates that this enum inherits symbols from a base enum.\\n\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#extends\"}}],\"documentRoot\":true,\"extends\":[\"https://w3id.org/cwl/salad#EnumSchema\",\"https://w3id.org/cwl/salad#SchemaDefinedType\"]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Must be `enum` */
  @Deprecated public Enum_symbol type;
  /** Defines the set of valid symbols. */
  @Deprecated public java.lang.Object symbols;
  /** A documentation string for this type, or an array of strings which should be concatenated. */
  @Deprecated public java.lang.Object doc;
  /** Hint to indicate that during documentation generation, documentation
for this type should appear in a subsection under `docParent`.
 */
  @Deprecated public java.lang.CharSequence docParent;
  /** Hint to indicate that during documentation generation, documentation
for `docChild` should appear in a subsection under this type.
 */
  @Deprecated public java.lang.Object docChild;
  /** Hint to indicate that during documentation generation, documentation
for this type should appear after the `docAfter` section at the same
level.
 */
  @Deprecated public java.lang.CharSequence docAfter;
  /** Annotate this type with linked data context.
 */
  @Deprecated public java.lang.Object jsonldPredicate;
  /** If true, indicates that the type is a valid at the document root.  At
least one type in a schema must be tagged with `documentRoot: true`.
 */
  @Deprecated public java.lang.Boolean documentRoot;
  /** Indicates that this enum inherits symbols from a base enum.
 */
  @Deprecated public java.lang.Object extends$;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SaladEnumSchema() {}

  /**
   * All-args constructor.
   */
  public SaladEnumSchema(Enum_symbol type, java.lang.Object symbols, java.lang.Object doc, java.lang.CharSequence docParent, java.lang.Object docChild, java.lang.CharSequence docAfter, java.lang.Object jsonldPredicate, java.lang.Boolean documentRoot, java.lang.Object extends$) {
    this.type = type;
    this.symbols = symbols;
    this.doc = doc;
    this.docParent = docParent;
    this.docChild = docChild;
    this.docAfter = docAfter;
    this.jsonldPredicate = jsonldPredicate;
    this.documentRoot = documentRoot;
    this.extends$ = extends$;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return symbols;
    case 2: return doc;
    case 3: return docParent;
    case 4: return docChild;
    case 5: return docAfter;
    case 6: return jsonldPredicate;
    case 7: return documentRoot;
    case 8: return extends$;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (Enum_symbol)value$; break;
    case 1: symbols = (java.lang.Object)value$; break;
    case 2: doc = (java.lang.Object)value$; break;
    case 3: docParent = (java.lang.CharSequence)value$; break;
    case 4: docChild = (java.lang.Object)value$; break;
    case 5: docAfter = (java.lang.CharSequence)value$; break;
    case 6: jsonldPredicate = (java.lang.Object)value$; break;
    case 7: documentRoot = (java.lang.Boolean)value$; break;
    case 8: extends$ = (java.lang.Object)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   * Must be `enum`   */
  public Enum_symbol getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * Must be `enum`   * @param value the value to set.
   */
  public void setType(Enum_symbol value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'symbols' field.
   * Defines the set of valid symbols.   */
  public java.lang.Object getSymbols() {
    return symbols;
  }

  /**
   * Sets the value of the 'symbols' field.
   * Defines the set of valid symbols.   * @param value the value to set.
   */
  public void setSymbols(java.lang.Object value) {
    this.symbols = value;
  }

  /**
   * Gets the value of the 'doc' field.
   * A documentation string for this type, or an array of strings which should be concatenated.   */
  public java.lang.Object getDoc() {
    return doc;
  }

  /**
   * Sets the value of the 'doc' field.
   * A documentation string for this type, or an array of strings which should be concatenated.   * @param value the value to set.
   */
  public void setDoc(java.lang.Object value) {
    this.doc = value;
  }

  /**
   * Gets the value of the 'docParent' field.
   * Hint to indicate that during documentation generation, documentation
for this type should appear in a subsection under `docParent`.
   */
  public java.lang.CharSequence getDocParent() {
    return docParent;
  }

  /**
   * Sets the value of the 'docParent' field.
   * Hint to indicate that during documentation generation, documentation
for this type should appear in a subsection under `docParent`.
   * @param value the value to set.
   */
  public void setDocParent(java.lang.CharSequence value) {
    this.docParent = value;
  }

  /**
   * Gets the value of the 'docChild' field.
   * Hint to indicate that during documentation generation, documentation
for `docChild` should appear in a subsection under this type.
   */
  public java.lang.Object getDocChild() {
    return docChild;
  }

  /**
   * Sets the value of the 'docChild' field.
   * Hint to indicate that during documentation generation, documentation
for `docChild` should appear in a subsection under this type.
   * @param value the value to set.
   */
  public void setDocChild(java.lang.Object value) {
    this.docChild = value;
  }

  /**
   * Gets the value of the 'docAfter' field.
   * Hint to indicate that during documentation generation, documentation
for this type should appear after the `docAfter` section at the same
level.
   */
  public java.lang.CharSequence getDocAfter() {
    return docAfter;
  }

  /**
   * Sets the value of the 'docAfter' field.
   * Hint to indicate that during documentation generation, documentation
for this type should appear after the `docAfter` section at the same
level.
   * @param value the value to set.
   */
  public void setDocAfter(java.lang.CharSequence value) {
    this.docAfter = value;
  }

  /**
   * Gets the value of the 'jsonldPredicate' field.
   * Annotate this type with linked data context.
   */
  public java.lang.Object getJsonldPredicate() {
    return jsonldPredicate;
  }

  /**
   * Sets the value of the 'jsonldPredicate' field.
   * Annotate this type with linked data context.
   * @param value the value to set.
   */
  public void setJsonldPredicate(java.lang.Object value) {
    this.jsonldPredicate = value;
  }

  /**
   * Gets the value of the 'documentRoot' field.
   * If true, indicates that the type is a valid at the document root.  At
least one type in a schema must be tagged with `documentRoot: true`.
   */
  public java.lang.Boolean getDocumentRoot() {
    return documentRoot;
  }

  /**
   * Sets the value of the 'documentRoot' field.
   * If true, indicates that the type is a valid at the document root.  At
least one type in a schema must be tagged with `documentRoot: true`.
   * @param value the value to set.
   */
  public void setDocumentRoot(java.lang.Boolean value) {
    this.documentRoot = value;
  }

  /**
   * Gets the value of the 'extends$' field.
   * Indicates that this enum inherits symbols from a base enum.
   */
  public java.lang.Object getExtends$() {
    return extends$;
  }

  /**
   * Sets the value of the 'extends$' field.
   * Indicates that this enum inherits symbols from a base enum.
   * @param value the value to set.
   */
  public void setExtends$(java.lang.Object value) {
    this.extends$ = value;
  }

  /** Creates a new SaladEnumSchema RecordBuilder */
  public static SaladEnumSchema.Builder newBuilder() {
    return new SaladEnumSchema.Builder();
  }
  
  /** Creates a new SaladEnumSchema RecordBuilder by copying an existing Builder */
  public static SaladEnumSchema.Builder newBuilder(SaladEnumSchema.Builder other) {
    return new SaladEnumSchema.Builder(other);
  }
  
  /** Creates a new SaladEnumSchema RecordBuilder by copying an existing SaladEnumSchema instance */
  public static SaladEnumSchema.Builder newBuilder(SaladEnumSchema other) {
    return new SaladEnumSchema.Builder(other);
  }
  
  /**
   * RecordBuilder for SaladEnumSchema instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SaladEnumSchema>
    implements org.apache.avro.data.RecordBuilder<SaladEnumSchema> {

    private Enum_symbol type;
    private java.lang.Object symbols;
    private java.lang.Object doc;
    private java.lang.CharSequence docParent;
    private java.lang.Object docChild;
    private java.lang.CharSequence docAfter;
    private java.lang.Object jsonldPredicate;
    private java.lang.Boolean documentRoot;
    private java.lang.Object extends$;

    /** Creates a new Builder */
    private Builder() {
      super(SaladEnumSchema.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(SaladEnumSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.symbols)) {
        this.symbols = data().deepCopy(fields()[1].schema(), other.symbols);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.doc)) {
        this.doc = data().deepCopy(fields()[2].schema(), other.doc);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.docParent)) {
        this.docParent = data().deepCopy(fields()[3].schema(), other.docParent);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.docChild)) {
        this.docChild = data().deepCopy(fields()[4].schema(), other.docChild);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.docAfter)) {
        this.docAfter = data().deepCopy(fields()[5].schema(), other.docAfter);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.jsonldPredicate)) {
        this.jsonldPredicate = data().deepCopy(fields()[6].schema(), other.jsonldPredicate);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.documentRoot)) {
        this.documentRoot = data().deepCopy(fields()[7].schema(), other.documentRoot);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.extends$)) {
        this.extends$ = data().deepCopy(fields()[8].schema(), other.extends$);
        fieldSetFlags()[8] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SaladEnumSchema instance */
    private Builder(SaladEnumSchema other) {
            super(SaladEnumSchema.SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.symbols)) {
        this.symbols = data().deepCopy(fields()[1].schema(), other.symbols);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.doc)) {
        this.doc = data().deepCopy(fields()[2].schema(), other.doc);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.docParent)) {
        this.docParent = data().deepCopy(fields()[3].schema(), other.docParent);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.docChild)) {
        this.docChild = data().deepCopy(fields()[4].schema(), other.docChild);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.docAfter)) {
        this.docAfter = data().deepCopy(fields()[5].schema(), other.docAfter);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.jsonldPredicate)) {
        this.jsonldPredicate = data().deepCopy(fields()[6].schema(), other.jsonldPredicate);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.documentRoot)) {
        this.documentRoot = data().deepCopy(fields()[7].schema(), other.documentRoot);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.extends$)) {
        this.extends$ = data().deepCopy(fields()[8].schema(), other.extends$);
        fieldSetFlags()[8] = true;
      }
    }

    /** Gets the value of the 'type' field */
    public Enum_symbol getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public SaladEnumSchema.Builder setType(Enum_symbol value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'type' field */
    public SaladEnumSchema.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'symbols' field */
    public java.lang.Object getSymbols() {
      return symbols;
    }
    
    /** Sets the value of the 'symbols' field */
    public SaladEnumSchema.Builder setSymbols(java.lang.Object value) {
      validate(fields()[1], value);
      this.symbols = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'symbols' field has been set */
    public boolean hasSymbols() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'symbols' field */
    public SaladEnumSchema.Builder clearSymbols() {
      symbols = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'doc' field */
    public java.lang.Object getDoc() {
      return doc;
    }
    
    /** Sets the value of the 'doc' field */
    public SaladEnumSchema.Builder setDoc(java.lang.Object value) {
      validate(fields()[2], value);
      this.doc = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'doc' field has been set */
    public boolean hasDoc() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'doc' field */
    public SaladEnumSchema.Builder clearDoc() {
      doc = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'docParent' field */
    public java.lang.CharSequence getDocParent() {
      return docParent;
    }
    
    /** Sets the value of the 'docParent' field */
    public SaladEnumSchema.Builder setDocParent(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.docParent = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'docParent' field has been set */
    public boolean hasDocParent() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'docParent' field */
    public SaladEnumSchema.Builder clearDocParent() {
      docParent = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'docChild' field */
    public java.lang.Object getDocChild() {
      return docChild;
    }
    
    /** Sets the value of the 'docChild' field */
    public SaladEnumSchema.Builder setDocChild(java.lang.Object value) {
      validate(fields()[4], value);
      this.docChild = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'docChild' field has been set */
    public boolean hasDocChild() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'docChild' field */
    public SaladEnumSchema.Builder clearDocChild() {
      docChild = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'docAfter' field */
    public java.lang.CharSequence getDocAfter() {
      return docAfter;
    }
    
    /** Sets the value of the 'docAfter' field */
    public SaladEnumSchema.Builder setDocAfter(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.docAfter = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'docAfter' field has been set */
    public boolean hasDocAfter() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'docAfter' field */
    public SaladEnumSchema.Builder clearDocAfter() {
      docAfter = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'jsonldPredicate' field */
    public java.lang.Object getJsonldPredicate() {
      return jsonldPredicate;
    }
    
    /** Sets the value of the 'jsonldPredicate' field */
    public SaladEnumSchema.Builder setJsonldPredicate(java.lang.Object value) {
      validate(fields()[6], value);
      this.jsonldPredicate = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'jsonldPredicate' field has been set */
    public boolean hasJsonldPredicate() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'jsonldPredicate' field */
    public SaladEnumSchema.Builder clearJsonldPredicate() {
      jsonldPredicate = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'documentRoot' field */
    public java.lang.Boolean getDocumentRoot() {
      return documentRoot;
    }
    
    /** Sets the value of the 'documentRoot' field */
    public SaladEnumSchema.Builder setDocumentRoot(java.lang.Boolean value) {
      validate(fields()[7], value);
      this.documentRoot = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'documentRoot' field has been set */
    public boolean hasDocumentRoot() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'documentRoot' field */
    public SaladEnumSchema.Builder clearDocumentRoot() {
      documentRoot = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'extends$' field */
    public java.lang.Object getExtends$() {
      return extends$;
    }
    
    /** Sets the value of the 'extends$' field */
    public SaladEnumSchema.Builder setExtends$(java.lang.Object value) {
      validate(fields()[8], value);
      this.extends$ = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'extends$' field has been set */
    public boolean hasExtends$() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'extends$' field */
    public SaladEnumSchema.Builder clearExtends$() {
      extends$ = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public SaladEnumSchema build() {
      try {
        SaladEnumSchema record = new SaladEnumSchema();
        record.type = fieldSetFlags()[0] ? this.type : (Enum_symbol) defaultValue(fields()[0]);
        record.symbols = fieldSetFlags()[1] ? this.symbols : (java.lang.Object) defaultValue(fields()[1]);
        record.doc = fieldSetFlags()[2] ? this.doc : (java.lang.Object) defaultValue(fields()[2]);
        record.docParent = fieldSetFlags()[3] ? this.docParent : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.docChild = fieldSetFlags()[4] ? this.docChild : (java.lang.Object) defaultValue(fields()[4]);
        record.docAfter = fieldSetFlags()[5] ? this.docAfter : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.jsonldPredicate = fieldSetFlags()[6] ? this.jsonldPredicate : (java.lang.Object) defaultValue(fields()[6]);
        record.documentRoot = fieldSetFlags()[7] ? this.documentRoot : (java.lang.Boolean) defaultValue(fields()[7]);
        record.extends$ = fieldSetFlags()[8] ? this.extends$ : (java.lang.Object) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
