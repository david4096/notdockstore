package io.dockstore.client.cli.cwl;

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
/** 
A CommandLineTool process is a process implementation for executing a
non-interactive application in a POSIX environment.  To accommodate
the enormous variety in syntax and semantics for input, runtime
environment, invocation, and output of arbitrary programs, CommandLineTool
uses an "input binding" that describes how to translate input
parameters to an actual program invocation, and an "output binding" that
describes how to generate output parameters from program output.

# Input binding

The tool command line is built by applying command line bindings to the
input object.  Bindings are listed either as part of an [input
parameter](#commandinputparameter) using the `inputBinding` field, or
separately using the `arguments` field of the CommandLineTool.

The algorithm to build the command line is as follows.  In this algorithm,
the sort key is a list consisting of one or more numeric or string
elements.  Strings are sorted lexicographically based on UTF-8 encoding.

  1. Collect `CommandLineBinding` objects from `arguments`.  Assign a sorting
  key `[position, i]` where `position` is
  [`CommandLineBinding.position`](#commandlinebinding) and `i`
  is the index in the `arguments` list.

  2. Collect `CommandLineBinding` objects from the `inputs` schema and
  associate them with values from the input object.  Where the input type
  is a record, array, or map, recursively walk the schema and input object,
  collecting nested `CommandLineBinding` objects and associating them with
  values from the input object.

  3. Create a sorting key by taking the value of the `position` field at
  each level leading to each leaf binding object.  If `position` is not
  specified, it is not added to the sorting key.  For bindings on arrays
  and maps, the sorting key must include the array index or map key
  following the position.  If and only if two bindings have the same sort
  key, the tie must be broken using the ordering of the field or parameter
  name immediately containing the leaf binding.

  4. Sort elements using the assigned sorting keys.  Numeric entries sort
  before strings.

  5. In the sorted order, apply the rules defined in
  [`CommandLineBinding`](#commandlinebinding) to convert bindings to actual
  command line elements.

  6. Insert elements from `baseCommand` at the beginning of the command
  line.

# Runtime environment

All files listed in the input object must be made available in the runtime
environment.  The implementation may use a shared or distributed file
system or transfer files via explicit download.  Implementations may choose
not to provide access to files not explicitly specified in the input object
or process requirements.

Output files produced by tool execution must be written to the **designated
output directory**.  The initial current working directory when executing
the tool must be the designated output directory.

Files may also be written to the **designated temporary directory**.  Any
files written to the designated temporary directory may be deleted by the
workflow platform immediately after the tool terminates.

When executing the tool, the tool must execute in a new, empty environment
with only the environment variables described below; the child process must
not inherit environment variables from the parent process except where
specified or at user option.

  * `HOME` must be set to the designated output directory.
  * `TMPDIR` must be set to the designated temporary directory.
    when the tool invocation and output collection is complete.
  * `PATH` may be inherited from the parent process, except when run in a
    container that provides its own `PATH`.
  * Variables defined by [EnvVarRequirement](#envvarrequirement)
  * The default environment of the container, such as when using
    [DockerRequirement](#dockerrequirement)

An implementation may forbid the tool from writing to any location in the
runtime environment file system other than the designated temporary
directory and designated output directory.  An implementation may provide
read-only input files, and disallow in-place update of input files.  The
designated temporary directory and designated output directory may reside
on different mount points on different file systems.

The `runtime` section available in [parameter references](#parameterreferences)
and [expressions](#expressions) contains the following fields.  As noted
earlier, an implementation may perform deferred resolution of runtime fields by providing
opaque strings for any or all of the following fields; parameter references
and expressions may only use the literal string value of the field and must
not perform computation on the contents.

  * `runtime.outdir`: an absolute path to the designated output directory
  * `runtime.tmpdir`: an absolute path to the designated temporary directory
  * `runtime.cores`:  number of CPU cores reserved for the tool process
  * `runtime.ram`:    amount of RAM in mebibytes (2**20) reserved for the tool process
  * `runtime.outdirSize`: reserved storage space available in the designated output directory
  * `runtime.tmpdirSize`: reserved storage space available in the designated temporary directory

See [ResourceRequirement](#resourcerequirement) for details on how to
describe the hardware resources required by a tool.

The standard input stream and standard output stream may be redirected as
described in the `stdin` and `stdout` fields.

## Extensions

[DockerRequirement](#dockerrequirement),
[CreateFileRequirement](#createfilerequirement),
[EnvVarRequirement](#envvarrequirement),
[ShellCommandRequirement](#shellcommandrequirement), and
[ResourceRequirement](#resourcerequirement) are available as standard
extensions to core command line tool semantics for defining the runtime
environment.

# Execution

Once the command line is built and the runtime environment is created, the
actual tool is executed.

The standard error stream and standard output stream (unless redirected by
setting `stdout`) may be captured by platform logging facilities for
storage and reporting.

Tools may be multithreaded or spawn child processes; however, when the
parent process exits, the tool is considered finished regardless of whether
any detached child processes are still running.  Tools must not require any
kind of console, GUI, or web based user interaction in order to start and
run to completion.

The exit code of the process indicates if the process completed
successfully.  By convention, an exit code of zero is treated as success
and non-zero exit codes are treated as failure.  This may be customized by
providing the fields `successCodes`, `temporaryFailCodes`, and
`permanentFailCodes`.  An implementation may choose to default unspecified
non-zero exit codes to either `temporaryFailure` or `permanentFailure`.

# Output binding

If the output directory contains a file named "cwl.output.json", that file
must be loaded and used as the output object.  Otherwise, the output object
must be generated by walking the parameters listed in `outputs` and
applying output bindings to the tool output.  Output bindings are
associated with output parameters using the `outputBinding` field.  See
[`CommandOutputBinding`](#commandoutputbinding) for details.
 */
@org.apache.avro.specific.AvroGenerated
public class CommandLineTool extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CommandLineTool\",\"doc\":\"\\nA CommandLineTool process is a process implementation for executing a\\nnon-interactive application in a POSIX environment.  To accommodate\\nthe enormous variety in syntax and semantics for input, runtime\\nenvironment, invocation, and output of arbitrary programs, CommandLineTool\\nuses an \\\"input binding\\\" that describes how to translate input\\nparameters to an actual program invocation, and an \\\"output binding\\\" that\\ndescribes how to generate output parameters from program output.\\n\\n# Input binding\\n\\nThe tool command line is built by applying command line bindings to the\\ninput object.  Bindings are listed either as part of an [input\\nparameter](#commandinputparameter) using the `inputBinding` field, or\\nseparately using the `arguments` field of the CommandLineTool.\\n\\nThe algorithm to build the command line is as follows.  In this algorithm,\\nthe sort key is a list consisting of one or more numeric or string\\nelements.  Strings are sorted lexicographically based on UTF-8 encoding.\\n\\n  1. Collect `CommandLineBinding` objects from `arguments`.  Assign a sorting\\n  key `[position, i]` where `position` is\\n  [`CommandLineBinding.position`](#commandlinebinding) and `i`\\n  is the index in the `arguments` list.\\n\\n  2. Collect `CommandLineBinding` objects from the `inputs` schema and\\n  associate them with values from the input object.  Where the input type\\n  is a record, array, or map, recursively walk the schema and input object,\\n  collecting nested `CommandLineBinding` objects and associating them with\\n  values from the input object.\\n\\n  3. Create a sorting key by taking the value of the `position` field at\\n  each level leading to each leaf binding object.  If `position` is not\\n  specified, it is not added to the sorting key.  For bindings on arrays\\n  and maps, the sorting key must include the array index or map key\\n  following the position.  If and only if two bindings have the same sort\\n  key, the tie must be broken using the ordering of the field or parameter\\n  name immediately containing the leaf binding.\\n\\n  4. Sort elements using the assigned sorting keys.  Numeric entries sort\\n  before strings.\\n\\n  5. In the sorted order, apply the rules defined in\\n  [`CommandLineBinding`](#commandlinebinding) to convert bindings to actual\\n  command line elements.\\n\\n  6. Insert elements from `baseCommand` at the beginning of the command\\n  line.\\n\\n# Runtime environment\\n\\nAll files listed in the input object must be made available in the runtime\\nenvironment.  The implementation may use a shared or distributed file\\nsystem or transfer files via explicit download.  Implementations may choose\\nnot to provide access to files not explicitly specified in the input object\\nor process requirements.\\n\\nOutput files produced by tool execution must be written to the **designated\\noutput directory**.  The initial current working directory when executing\\nthe tool must be the designated output directory.\\n\\nFiles may also be written to the **designated temporary directory**.  Any\\nfiles written to the designated temporary directory may be deleted by the\\nworkflow platform immediately after the tool terminates.\\n\\nWhen executing the tool, the tool must execute in a new, empty environment\\nwith only the environment variables described below; the child process must\\nnot inherit environment variables from the parent process except where\\nspecified or at user option.\\n\\n  * `HOME` must be set to the designated output directory.\\n  * `TMPDIR` must be set to the designated temporary directory.\\n    when the tool invocation and output collection is complete.\\n  * `PATH` may be inherited from the parent process, except when run in a\\n    container that provides its own `PATH`.\\n  * Variables defined by [EnvVarRequirement](#envvarrequirement)\\n  * The default environment of the container, such as when using\\n    [DockerRequirement](#dockerrequirement)\\n\\nAn implementation may forbid the tool from writing to any location in the\\nruntime environment file system other than the designated temporary\\ndirectory and designated output directory.  An implementation may provide\\nread-only input files, and disallow in-place update of input files.  The\\ndesignated temporary directory and designated output directory may reside\\non different mount points on different file systems.\\n\\nThe `runtime` section available in [parameter references](#parameterreferences)\\nand [expressions](#expressions) contains the following fields.  As noted\\nearlier, an implementation may perform deferred resolution of runtime fields by providing\\nopaque strings for any or all of the following fields; parameter references\\nand expressions may only use the literal string value of the field and must\\nnot perform computation on the contents.\\n\\n  * `runtime.outdir`: an absolute path to the designated output directory\\n  * `runtime.tmpdir`: an absolute path to the designated temporary directory\\n  * `runtime.cores`:  number of CPU cores reserved for the tool process\\n  * `runtime.ram`:    amount of RAM in mebibytes (2**20) reserved for the tool process\\n  * `runtime.outdirSize`: reserved storage space available in the designated output directory\\n  * `runtime.tmpdirSize`: reserved storage space available in the designated temporary directory\\n\\nSee [ResourceRequirement](#resourcerequirement) for details on how to\\ndescribe the hardware resources required by a tool.\\n\\nThe standard input stream and standard output stream may be redirected as\\ndescribed in the `stdin` and `stdout` fields.\\n\\n## Extensions\\n\\n[DockerRequirement](#dockerrequirement),\\n[CreateFileRequirement](#createfilerequirement),\\n[EnvVarRequirement](#envvarrequirement),\\n[ShellCommandRequirement](#shellcommandrequirement), and\\n[ResourceRequirement](#resourcerequirement) are available as standard\\nextensions to core command line tool semantics for defining the runtime\\nenvironment.\\n\\n# Execution\\n\\nOnce the command line is built and the runtime environment is created, the\\nactual tool is executed.\\n\\nThe standard error stream and standard output stream (unless redirected by\\nsetting `stdout`) may be captured by platform logging facilities for\\nstorage and reporting.\\n\\nTools may be multithreaded or spawn child processes; however, when the\\nparent process exits, the tool is considered finished regardless of whether\\nany detached child processes are still running.  Tools must not require any\\nkind of console, GUI, or web based user interaction in order to start and\\nrun to completion.\\n\\nThe exit code of the process indicates if the process completed\\nsuccessfully.  By convention, an exit code of zero is treated as success\\nand non-zero exit codes are treated as failure.  This may be customized by\\nproviding the fields `successCodes`, `temporaryFailCodes`, and\\n`permanentFailCodes`.  An implementation may choose to default unspecified\\nnon-zero exit codes to either `temporaryFailure` or `permanentFailure`.\\n\\n# Output binding\\n\\nIf the output directory contains a file named \\\"cwl.output.json\\\", that file\\nmust be loaded and used as the output object.  Otherwise, the output object\\nmust be generated by walking the parameters listed in `outputs` and\\napplying output bindings to the tool output.  Output bindings are\\nassociated with output parameters using the `outputBinding` field.  See\\n[`CommandOutputBinding`](#commandoutputbinding) for details.\\n\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"doc\":\"The unique identifier for this process object.\",\"jsonldPredicate\":\"@id\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Process\"},{\"name\":\"inputs\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CommandInputParameter\",\"doc\":\"An input parameter for a CommandLineTool.\",\"fields\":[{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"CWLType\",\"symbols\":[\"File\"],\"extends\":\"https://w3id.org/cwl/salad#PrimitiveType\",\"symbol\":[\"https://w3id.org/cwl/salad#null\",\"http://www.w3.org/2001/XMLSchema#boolean\",\"http://www.w3.org/2001/XMLSchema#int\",\"http://www.w3.org/2001/XMLSchema#long\",\"http://www.w3.org/2001/XMLSchema#float\",\"http://www.w3.org/2001/XMLSchema#double\",\"http://www.w3.org/20","01/XMLSchema#string\",\"https://w3id.org/cwl/cwl#File\"]},{\"type\":\"record\",\"name\":\"CommandInputRecordSchema\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Record_symbol\",\"symbols\":[\"record\"]},\"doc\":\"Must be `record`\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"},\"inherited_from\":\"https://w3id.org/cwl/salad#RecordSchema\"},{\"name\":\"fields\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CommandInputRecordField\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"The name of the field\\n\",\"jsonldPredicate\":\"@id\",\"inherited_from\":\"https://w3id.org/cwl/salad#RecordField\"},{\"name\":\"doc\",\"type\":[\"null\",\"string\"],\"doc\":\"A documentation string for this field\\n\",\"jsonldPredicate\":\"sld:doc\",\"inherited_from\":\"https://w3id.org/cwl/salad#RecordField\"},{\"name\":\"type\",\"type\":[{\"type\":\"enum\",\"name\":\"PrimitiveType\",\"doc\":\"Salad data types are based on Avro schema declarations.  Refer to the\\n[Avro schema declaration documentation](https://avro.apache.org/docs/current/spec.html#schemas) for\\ndetailed information.\\n\\n## Simple types\\n\\n* **null**: no value\\n* **boolean**: a binary value\\n* **int**: 32-bit signed integer\\n* **long**: 64-bit signed integer\\n* **float**: single precision (32-bit) IEEE 754 floating-point number\\n* **double**: double precision (64-bit) IEEE 754 floating-point number\\n* **string**: Unicode character sequence\\n\",\"symbols\":[\"null\",\"boolean\",\"int\",\"long\",\"float\",\"double\",\"string\"]},\"CommandInputRecordSchema\",{\"type\":\"record\",\"name\":\"CommandInputEnumSchema\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Enum_symbol\",\"symbols\":[\"enum\"]},\"doc\":\"Must be `enum`\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"},\"inherited_from\":\"https://w3id.org/cwl/salad#EnumSchema\"},{\"name\":\"symbols\",\"type\":[{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Defines the set of valid symbols.\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#symbols\",\"identity\":true},\"inherited_from\":\"https://w3id.org/cwl/salad#EnumSchema\"},{\"name\":\"inputBinding\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CommandLineBinding\",\"doc\":\"\\nWhen listed under `inputBinding` in the input schema, the term\\n\\\"value\\\" refers to the the corresponding value in the input object.  For\\nbinding objects listed in `CommandLineTool.arguments`, the term \\\"value\\\"\\nrefers to the effective value after evaluating `valueFrom`.\\n\\nThe binding behavior when building the command line depends on the data\\ntype of the value.  If there is a mismatch between the type described by\\nthe input schema and the effective value, such as resulting from an\\nexpression evaluation, an implementation must use the data type of the\\neffective value.\\n\\n  - **string**: Add `prefix` and the string to the command line.\\n\\n  - **number**: Add `prefix` and decimal representation to command line.\\n\\n  - **boolean**: If true, add `prefix` to the command line.  If false, add\\n      nothing.\\n\\n  - **File**: Add `prefix` and the value of\\n    [`File.path`](#file) to the command line.\\n\\n  - **array**: If `itemSeparator` is specified, add `prefix` and the join\\n      the array into a single string with `itemSeparator` separating the\\n      items.  Otherwise first add `prefix`, then recursively process\\n      individual elements.\\n\\n  - **object**: Add `prefix` only, and recursively add object fields for\\n      which `inputBinding` is specified.\\n\\n  - **null**: Add nothing.\\n\",\"fields\":[{\"name\":\"loadContents\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Only applies when `type` is `File`.  Read up to the first 64 KiB of text from the file and place it in the\\n\\\"contents\\\" field of the file object for manipulation by expressions.\\n\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Binding\"},{\"name\":\"secondaryFiles\",\"type\":[\"null\",\"string\",{\"type\":\"enum\",\"name\":\"Expression\",\"doc\":\"Not a real type.  Indicates that a field must allow expressions.\\n\",\"symbols\":[\"ExpressionPlaceholder\"],\"docAfter\":\"https://w3id.org/cwl/cwl#ExpressionTool\"},{\"type\":\"array\",\"items\":[\"string\",\"Expression\"]}],\"doc\":\"Only applies when `type` is `File`.  Describes files that must be\\nincluded alongside the primary file.\\n\\nIf the value is an expression, the context of the expression is the input\\nor output File parameter to which this binding applies.\\n\\nIf the value is a string, it specifies that the following pattern\\nshould be applied to the primary file:\\n\\n  1. If string begins with one or more caret `^` characters, for each\\n    caret, remove the last file extension from the path (the last\\n    period `.` and all following characters).  If there are no file\\n    extensions, the path is unchanged.\\n  2. Append the remainder of the string to the end of the file path.\\n\",\"jsonldPredicate\":\"cwl:secondaryFiles\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Binding\"},{\"name\":\"position\",\"type\":[\"null\",\"int\"],\"doc\":\"The sorting key.  Default position is 0.\"},{\"name\":\"prefix\",\"type\":[\"null\",\"string\"],\"doc\":\"Command line prefix to add before the value.\"},{\"name\":\"separate\",\"type\":[\"null\",\"boolean\"],\"doc\":\"If true (default), then the prefix and value must be added as separate\\ncommand line arguments; if false, prefix and value must be concatenated\\ninto a single command line argument.\\n\"},{\"name\":\"itemSeparator\",\"type\":[\"null\",\"string\"],\"doc\":\"Join the array elements into a single string with the elements\\nseparated by by `itemSeparator`.\\n\"},{\"name\":\"valueFrom\",\"type\":[\"null\",\"string\",\"Expression\"],\"doc\":\"If `valueFrom` is a constant string value, use this as the value and\\napply the binding rules above.\\n\\nIf `valueFrom` is an expression, evaluate the expression to yield the\\nactual value to use to build the command line and apply the binding\\nrules above.  If the inputBinding is associated with an input\\nparameter, the \\\"context\\\" of the expression will be the value of the\\ninput parameter.\\n\\nWhen a binding is part of the `CommandLineTool.arguments` field,\\nthe `valueFrom` field is required.\\n\"},{\"name\":\"shellQuote\",\"type\":[\"null\",\"boolean\"],\"doc\":\"If `ShellCommandRequirement` is in the requirements for the current command,\\nthis controls whether the value is quoted on the command line (default is true).\\nUse `shellQuote: false` to inject metacharacters for operations such as pipes.\\n\"}],\"docParent\":\"https://w3id.org/cwl/cwl#CommandInputParameter\",\"extends\":\"https://w3id.org/cwl/cwl#Binding\"}],\"jsonldPredicate\":\"cwl:inputBinding\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputEnumSchema\"}],\"docParent\":\"https://w3id.org/cwl/cwl#InputParameter\",\"extends\":\"https://w3id.org/cwl/cwl#InputEnumSchema\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#Binding\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandLineBinding\"}]},{\"type\":\"record\",\"name\":\"CommandInputArraySchema\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Array_symbol\",\"symbols\":[\"array\"]},\"doc\":\"Must be `array`\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"},\"inherited_from\":\"https://w3id.org/cwl/salad#ArraySchema\"},{\"name\":\"items\",\"type\":[\"PrimitiveType\",\"CommandInputRecordSchema\",\"CommandInputEnumSchema\",\"CommandInputArraySchema\",\"string\",{\"type\":\"array\",\"items\":[\"PrimitiveType\",\"CommandInputRecordSchema\",\"CommandInputEnumSchema\",\"CommandInputArraySchema\",\"string\"]}],\"doc\":\"Defines the type of the array elements.\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#items\"},\"inherited_from\":\"https://w3id.org/cwl/salad#ArraySchema\"},{\"name\":\"inputBinding\",\"type\":[\"null\",\"CommandLineBinding\"],\"jsonldPredicate\":\"cwl:inputBinding\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputArraySchema\"}],\"docParent\":\"https://w3id.org/cwl/cwl#InputParameter\",\"extends\":\"https://w3id.org/cwl/cwl#InputArraySchema\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputRecordSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputRecordSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputEnumSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputEnumSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputArraySchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputArraySchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#Binding\",\"specializeTo\":\"https://w3","id.org/cwl/cwl#CommandLineBinding\"}]},\"string\",{\"type\":\"array\",\"items\":[\"PrimitiveType\",\"CommandInputRecordSchema\",\"CommandInputEnumSchema\",\"CommandInputArraySchema\",\"string\"]}],\"doc\":\"The field type\\n\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"},\"inherited_from\":\"https://w3id.org/cwl/salad#RecordField\"},{\"name\":\"inputBinding\",\"type\":[\"null\",\"CommandLineBinding\"],\"jsonldPredicate\":\"cwl:inputBinding\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputRecordField\"}],\"docParent\":\"https://w3id.org/cwl/cwl#InputParameter\",\"extends\":\"https://w3id.org/cwl/cwl#InputRecordField\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputRecordSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputRecordSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputEnumSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputEnumSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputArraySchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputArraySchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#Binding\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandLineBinding\"}]}}],\"doc\":\"Defines the fields of the record.\",\"jsonldPredicate\":\"sld:fields\",\"inherited_from\":\"https://w3id.org/cwl/salad#RecordSchema\"}],\"docParent\":\"https://w3id.org/cwl/cwl#InputParameter\",\"extends\":\"https://w3id.org/cwl/cwl#InputRecordSchema\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputRecordField\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputRecordField\"}]},\"CommandInputEnumSchema\",\"CommandInputArraySchema\",\"string\",{\"type\":\"array\",\"items\":[\"CWLType\",\"CommandInputRecordSchema\",\"CommandInputEnumSchema\",\"CommandInputArraySchema\",\"string\"]}],\"doc\":\"Specify valid types of data that may be assigned to this parameter.\\n\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"},\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this parameter object.\",\"jsonldPredicate\":\"rdfs:label\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"doc\":\"A long, human-readable description of this parameter object.\",\"jsonldPredicate\":\"rdfs:comment\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"streamable\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Currently only applies if `type` is `File`.  A value of `true`\\nindicates that the file is read or written sequentially without\\nseeking.  An implementation may use this flag to indicate whether it is\\nvalid to stream file contents using a named pipe.  Default: `false`.\\n\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"default\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"Any\",\"doc\":\"The **Any** type validates for any non-null value.\\n\",\"symbols\":[\"Any\"]}],\"doc\":\"The default value for this parameter if not provided in the input\\nobject.\\n\",\"jsonldPredicate\":\"cwl:default\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"id\",\"type\":\"string\",\"doc\":\"The unique identifier for this parameter object.\",\"jsonldPredicate\":\"@id\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputParameter\"},{\"name\":\"inputBinding\",\"type\":[\"null\",\"CommandLineBinding\"],\"doc\":\"Describes how to handle the inputs of a process and convert them\\ninto a concrete form for execution, such as command line parameters.\\n\",\"jsonldPredicate\":\"cwl:inputBinding\",\"inherited_from\":\"https://w3id.org/cwl/cwl#InputParameter\"}],\"docParent\":\"https://w3id.org/cwl/cwl#CommandLineTool\",\"extends\":\"https://w3id.org/cwl/cwl#InputParameter\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputRecordSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputRecordSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputEnumSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputEnumSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputArraySchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputArraySchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#Binding\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandLineBinding\"}]}},\"doc\":\"Defines the input parameters of the process.  The process is ready to\\nrun when all required input parameters are associated with concrete\\nvalues.  Input parameters include a schema for each parameter which is\\nused to validate the input object.  It may also be used to build a user\\ninterface for constructing the input object.\\n\",\"jsonldPredicate\":\"cwl:inputs\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Process\"},{\"name\":\"outputs\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CommandOutputParameter\",\"doc\":\"An output parameter for a CommandLineTool.\",\"fields\":[{\"name\":\"type\",\"type\":[\"null\",\"CWLType\",{\"type\":\"record\",\"name\":\"CommandOutputRecordSchema\",\"fields\":[{\"name\":\"type\",\"type\":\"Record_symbol\",\"doc\":\"Must be `record`\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"},\"inherited_from\":\"https://w3id.org/cwl/salad#RecordSchema\"},{\"name\":\"fields\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CommandOutputRecordField\",\"fields\":[{\"name\":\"type\",\"type\":\"Record_symbol\",\"doc\":\"Must be `record`\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"},\"inherited_from\":\"https://w3id.org/cwl/salad#RecordSchema\"},{\"name\":\"fields\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RecordField\",\"doc\":\"A field of a record.\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"The name of the field\\n\",\"jsonldPredicate\":\"@id\"},{\"name\":\"doc\",\"type\":[\"null\",\"string\"],\"doc\":\"A documentation string for this field\\n\",\"jsonldPredicate\":\"sld:doc\"},{\"name\":\"type\",\"type\":[\"PrimitiveType\",{\"type\":\"record\",\"name\":\"RecordSchema\",\"fields\":[{\"name\":\"type\",\"type\":\"Record_symbol\",\"doc\":\"Must be `record`\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"}},{\"name\":\"fields\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"RecordField\"}],\"doc\":\"Defines the fields of the record.\",\"jsonldPredicate\":\"sld:fields\"}]},{\"type\":\"record\",\"name\":\"EnumSchema\",\"doc\":\"Define an enumerated type.\\n\",\"fields\":[{\"name\":\"type\",\"type\":\"Enum_symbol\",\"doc\":\"Must be `enum`\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"}},{\"name\":\"symbols\",\"type\":[{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Defines the set of valid symbols.\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#symbols\",\"identity\":true}}]},{\"type\":\"record\",\"name\":\"ArraySchema\",\"fields\":[{\"name\":\"type\",\"type\":\"Array_symbol\",\"doc\":\"Must be `array`\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"}},{\"name\":\"items\",\"type\":[\"PrimitiveType\",\"RecordSchema\",\"EnumSchema\",\"ArraySchema\",\"string\",{\"type\":\"array\",\"items\":[\"PrimitiveType\",\"RecordSchema\",\"EnumSchema\",\"ArraySchema\",\"string\"]}],\"doc\":\"Defines the type of the array elements.\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#items\"}}]},\"string\",{\"type\":\"array\",\"items\":[\"PrimitiveType\",\"RecordSchema\",\"EnumSchema\",\"ArraySchema\",\"string\"]}],\"doc\":\"The field type\\n\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"}}]}}],\"doc\":\"Defines the fields of the record.\",\"jsonldPredicate\":\"sld:fields\",\"inherited_from\":\"https://w3id.org/cwl/salad#RecordSchema\"},{\"name\":\"outputBinding\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CommandOutputBinding\",\"doc\":\"Describes how to generate an output parameter based on the files produced\\nby a CommandLineTool.\\n\\nThe output parameter is generated by applying these operations in\\nthe following order:\\n\\n  - glob\\n  - loadContents\\n  - outputEval\\n\",\"fields\":[{\"name\":\"loadContents\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Only applies when `type` is `File`.  Read up to the first 64 KiB of text from the file and place it in the\\n\\\"contents\\\" field of the file object for manipulation by expressions.\\n\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Binding\"},{\"name\":\"secondaryFiles\",\"type\":[\"null\",\"string\",\"Expression\",{\"type\":\"array\",\"items\":[\"string\",\"Expression\"]}],\"doc\":\"Only applies when `type` is `File`.  Describes files that must be\\nincluded alongside the primary file.\\n\\nIf the value is an expression, the context of the ex","pression is the input\\nor output File parameter to which this binding applies.\\n\\nIf the value is a string, it specifies that the following pattern\\nshould be applied to the primary file:\\n\\n  1. If string begins with one or more caret `^` characters, for each\\n    caret, remove the last file extension from the path (the last\\n    period `.` and all following characters).  If there are no file\\n    extensions, the path is unchanged.\\n  2. Append the remainder of the string to the end of the file path.\\n\",\"jsonldPredicate\":\"cwl:secondaryFiles\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Binding\"},{\"name\":\"glob\",\"type\":[\"null\",\"string\",\"Expression\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Find files relative to the output directory, using POSIX glob(3)\\npathname matching.  If provided an array, find files that match any\\npattern in the array.  If provided an expression, the expression must\\nreturn a string or an array of strings, which will then be evaluated as\\none or more glob patterns.  Only files which actually exist will be\\nmatched and returned.\\n\"},{\"name\":\"outputEval\",\"type\":[\"null\",\"string\",\"Expression\"],\"doc\":\"Evaluate an expression to generate the output value.  If `glob` was\\nspecified, the script `context` will be an array containing any files that were\\nmatched.  Additionally, if `loadContents` is `true`, the File objects\\nwill include up to the first 64 KiB of file contents in the `contents` field.\\n\"}],\"docParent\":\"https://w3id.org/cwl/cwl#CommandOutputParameter\",\"extends\":\"https://w3id.org/cwl/cwl#Binding\"}],\"jsonldPredicate\":\"cwl:outputBinding\",\"inherited_from\":\"https://w3id.org/cwl/cwl#OutputRecordField\"}],\"docParent\":\"https://w3id.org/cwl/cwl#OutputParameter\",\"extends\":\"https://w3id.org/cwl/cwl#OutputRecordField\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputRecordSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputRecordSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputEnumSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputEnumSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputArraySchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputArraySchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#Binding\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputBinding\"}]}}],\"doc\":\"Defines the fields of the record.\",\"jsonldPredicate\":\"sld:fields\",\"inherited_from\":\"https://w3id.org/cwl/salad#RecordSchema\"}],\"docParent\":\"https://w3id.org/cwl/cwl#OutputParameter\",\"extends\":\"https://w3id.org/cwl/cwl#OutputRecordSchema\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputRecordField\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputRecordField\"}]},{\"type\":\"record\",\"name\":\"CommandOutputEnumSchema\",\"fields\":[{\"name\":\"type\",\"type\":\"Enum_symbol\",\"doc\":\"Must be `enum`\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"},\"inherited_from\":\"https://w3id.org/cwl/salad#EnumSchema\"},{\"name\":\"symbols\",\"type\":[{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Defines the set of valid symbols.\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#symbols\",\"identity\":true},\"inherited_from\":\"https://w3id.org/cwl/salad#EnumSchema\"},{\"name\":\"outputBinding\",\"type\":[\"null\",\"CommandOutputBinding\"],\"jsonldPredicate\":\"cwl:outputBinding\",\"inherited_from\":\"https://w3id.org/cwl/cwl#OutputEnumSchema\"}],\"docParent\":\"https://w3id.org/cwl/cwl#OutputParameter\",\"extends\":\"https://w3id.org/cwl/cwl#OutputEnumSchema\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputRecordSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputRecordSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputEnumSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputEnumSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputArraySchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputArraySchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#Binding\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputBinding\"}]},{\"type\":\"record\",\"name\":\"CommandOutputArraySchema\",\"fields\":[{\"name\":\"type\",\"type\":\"Array_symbol\",\"doc\":\"Must be `array`\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"},\"inherited_from\":\"https://w3id.org/cwl/salad#ArraySchema\"},{\"name\":\"items\",\"type\":[\"PrimitiveType\",\"CommandOutputRecordSchema\",\"CommandOutputEnumSchema\",\"CommandOutputArraySchema\",\"string\",{\"type\":\"array\",\"items\":[\"PrimitiveType\",\"CommandOutputRecordSchema\",\"CommandOutputEnumSchema\",\"CommandOutputArraySchema\",\"string\"]}],\"doc\":\"Defines the type of the array elements.\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#items\"},\"inherited_from\":\"https://w3id.org/cwl/salad#ArraySchema\"},{\"name\":\"outputBinding\",\"type\":[\"null\",\"CommandOutputBinding\"],\"jsonldPredicate\":\"cwl:outputBinding\",\"inherited_from\":\"https://w3id.org/cwl/cwl#OutputArraySchema\"}],\"extends\":\"https://w3id.org/cwl/cwl#OutputArraySchema\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputRecordSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputRecordSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputEnumSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputEnumSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputArraySchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputArraySchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#Binding\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputBinding\"}]},\"string\",{\"type\":\"array\",\"items\":[\"CWLType\",\"CommandOutputRecordSchema\",\"CommandOutputEnumSchema\",\"CommandOutputArraySchema\",\"string\"]}],\"doc\":\"Specify valid types of data that may be assigned to this parameter.\\n\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"},\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this parameter object.\",\"jsonldPredicate\":\"rdfs:label\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"doc\":\"A long, human-readable description of this parameter object.\",\"jsonldPredicate\":\"rdfs:comment\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"streamable\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Currently only applies if `type` is `File`.  A value of `true`\\nindicates that the file is read or written sequentially without\\nseeking.  An implementation may use this flag to indicate whether it is\\nvalid to stream file contents using a named pipe.  Default: `false`.\\n\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"default\",\"type\":[\"null\",\"Any\"],\"doc\":\"The default value for this parameter if not provided in the input\\nobject.\\n\",\"jsonldPredicate\":\"cwl:default\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Parameter\"},{\"name\":\"id\",\"type\":\"string\",\"doc\":\"The unique identifier for this parameter object.\",\"jsonldPredicate\":\"@id\",\"inherited_from\":\"https://w3id.org/cwl/cwl#OutputParameter\"},{\"name\":\"outputBinding\",\"type\":[\"null\",\"CommandOutputBinding\"],\"doc\":\"Describes how to handle the outputs of a process.\\n\",\"jsonldPredicate\":\"cwl:outputBinding\",\"inherited_from\":\"https://w3id.org/cwl/cwl#OutputParameter\"}],\"docParent\":\"https://w3id.org/cwl/cwl#CommandLineTool\",\"extends\":\"https://w3id.org/cwl/cwl#OutputParameter\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputRecordSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputRecordSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputEnumSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputEnumSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputArraySchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputArraySchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#Binding\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputBinding\"}]}},\"doc\":\"Defines the parameters representing the output of the process.  May be\\nused to generate and/or validate the output object.\\n\",\"jsonldPredicate\":\"cwl:outputs\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Process\"},{\"name\":\"requirements\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[{\"type\":\"record\",\"name\":\"DockerRequirement\",\"doc\":\"Indicates that a workflow component should be run in"," a\\n[Docker](http://docker.com) container, and specifies how to fetch or build\\nthe image.\\n\\nIf a CommandLineTool lists `DockerRequirement` under\\n`hints` or `requirements`, it may (or must) be run in the specified Docker\\ncontainer.\\n\\nThe platform must first acquire or install the correct Docker image as\\nspecified by `dockerPull`, `dockerImport`, `dockerLoad` or `dockerFile`.\\n\\nThe platform must execute the tool in the container using `docker run` with\\nthe appropriate Docker image and tool command line.\\n\\nThe workflow platform may provide input files and the designated output\\ndirectory through the use of volume bind mounts.  The platform may rewrite\\nfile paths in the input object to correspond to the Docker bind mounted\\nlocations.\\n\\nWhen running a tool contained in Docker, the workflow platform must not\\nassume anything about the contents of the Docker container, such as the\\npresence or absence of specific software, except to assume that the\\ngenerated command line represents a valid command within the runtime\\nenvironment of the container.\\n\\n## Interaction with other requirements\\n\\nIf [EnvVarRequirement](#envvarrequirement) is specified alongside a\\nDockerRequirement, the environment variables must be provided to Docker\\nusing `--env` or `--env-file` and interact with the container's preexisting\\nenvironment as defined by Docker.\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"The specific requirement type.\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"@type\"},\"inherited_from\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"name\":\"dockerPull\",\"type\":[\"null\",\"string\"],\"doc\":\"Specify a Docker image to retrieve using `docker pull`.\"},{\"name\":\"dockerLoad\",\"type\":[\"null\",\"string\"],\"doc\":\"Specify a HTTP URL from which to download a Docker image using `docker load`.\"},{\"name\":\"dockerFile\",\"type\":[\"null\",\"string\"],\"doc\":\"Supply the contents of a Dockerfile which will be built using `docker build`.\"},{\"name\":\"dockerImport\",\"type\":[\"null\",\"string\"],\"doc\":\"Provide HTTP URL to download and gunzip a Docker images using `docker import.\"},{\"name\":\"dockerImageId\",\"type\":[\"null\",\"string\"],\"doc\":\"The image id that will be used for `docker run`.  May be a\\nhuman-readable image name or the image identifier hash.  May be skipped\\nif `dockerPull` is specified, in which case the `dockerPull` image id\\nmust be used.\\n\"},{\"name\":\"dockerOutputDirectory\",\"type\":[\"null\",\"string\"],\"doc\":\"Set the designated output directory to a specific location inside the\\nDocker container.\\n\"}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"type\":\"record\",\"name\":\"SubworkflowFeatureRequirement\",\"doc\":\"Indicates that the workflow platform must support nested workflows in\\nthe `run` field of (WorkflowStep)(#workflowstep).\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"The specific requirement type.\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"@type\"},\"inherited_from\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"type\":\"record\",\"name\":\"CreateFileRequirement\",\"doc\":\"Define a list of files that must be created by the workflow\\nplatform in the designated output directory prior to executing the command\\nline tool.  See `FileDef` for details.\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"The specific requirement type.\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"@type\"},\"inherited_from\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"name\":\"fileDef\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FileDef\",\"doc\":\"Define a file that must be placed in the designated output directory\\nprior to executing the command line tool.  May be the result of executing\\nan expression, such as building a configuration file from a template.\\n\",\"fields\":[{\"name\":\"filename\",\"type\":[\"string\",\"Expression\"],\"doc\":\"The name of the file to create in the output directory.\"},{\"name\":\"fileContent\",\"type\":[\"string\",\"Expression\"],\"doc\":\"If the value is a string literal or an expression which evaluates to a\\nstring, a new file must be created with the string as the file contents.\\n\\nIf the value is an expression that evaluates to a File object, this\\nindicates the referenced file should be added to the designated output\\ndirectory prior to executing the tool.\\n\\nFiles added in this way may be read-only, and may be provided\\nby bind mounts or file system links to avoid\\nunnecessary copying of the input file.\\n\"}],\"docParent\":\"https://w3id.org/cwl/cwl#CreateFileRequirement\"}},\"doc\":\"The list of files.\"}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"type\":\"record\",\"name\":\"EnvVarRequirement\",\"doc\":\"Define a list of environment variables which will be set in the\\nexecution environment of the tool.  See `EnvironmentDef` for details.\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"The specific requirement type.\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"@type\"},\"inherited_from\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"name\":\"envDef\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EnvironmentDef\",\"doc\":\"Define an environment variable that will be set in the runtime environment\\nby the workflow platform when executing the command line tool.  May be the\\nresult of executing an expression, such as getting a parameter from input.\\n\",\"fields\":[{\"name\":\"envName\",\"type\":\"string\",\"doc\":\"The environment variable name\"},{\"name\":\"envValue\",\"type\":[\"string\",\"Expression\"],\"doc\":\"The environment variable value\"}],\"docParent\":\"https://w3id.org/cwl/cwl#EnvVarRequirement\"}},\"doc\":\"The list of environment variables.\"}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"type\":\"record\",\"name\":\"ScatterFeatureRequirement\",\"doc\":\"Indicates that the workflow platform must support the `scatter` and\\n`scatterMethod` fields of [WorkflowStep](#workflowstep).\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"The specific requirement type.\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"@type\"},\"inherited_from\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"type\":\"record\",\"name\":\"MultipleInputFeatureRequirement\",\"doc\":\"Indicates that the workflow platform must support multiple inbound data links\\nlisted in the `source` field of [WorkflowStepInput](#workflowstepinput).\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"The specific requirement type.\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"@type\"},\"inherited_from\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"type\":\"record\",\"name\":\"InlineJavascriptRequirement\",\"doc\":\"Indicates that the workflow platform must support inline Javascript expressions.\\nIf this requirement is not present, the workflow platform must not perform expression\\ninterpolatation.\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"The specific requirement type.\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"@type\"},\"inherited_from\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"name\":\"expressionLib\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Additional code fragments that will also be inserted\\nbefore executing the expression code.  Allows for function definitions that may\\nbe called from CWL expressions.\\n\"}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"type\":\"record\",\"name\":\"SchemaDefRequirement\",\"doc\":\"This field consists of an\\narray of type definitions which must be used when interpreting the `inputs` and\\n`outputs` fields.  When a symbolic type is encountered that is not in\\n[`Datatype`](#datatype), the implementation must check if\\nthe type is defined in `schemaDefs` and use that definition.  If the type is not\\nfound in `schemaDefs`, it is an error.  The entries in `schemaDefs` must be\\nprocessed in the order listed such that later schema definitions may refer to\\nearlier schema definitions.\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"The specific requirement type.\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"@type\"},\"inherited_from\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"name\":\"types\",\"type\":{\"type\":\"array\",\"items\":[{\"type\":\"record\",\"name\":\"InputRecordSchema\",\"fields\":[{\"name\":\"type\",\"type\":\"Record_symbol\",\"doc\":\"Mu","st be `record`\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"},\"inherited_from\":\"https://w3id.org/cwl/salad#RecordSchema\"},{\"name\":\"fields\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"InputRecordField\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"The name of the field\\n\",\"jsonldPredicate\":\"@id\",\"inherited_from\":\"https://w3id.org/cwl/salad#RecordField\"},{\"name\":\"doc\",\"type\":[\"null\",\"string\"],\"doc\":\"A documentation string for this field\\n\",\"jsonldPredicate\":\"sld:doc\",\"inherited_from\":\"https://w3id.org/cwl/salad#RecordField\"},{\"name\":\"type\",\"type\":[\"PrimitiveType\",\"InputRecordSchema\",{\"type\":\"record\",\"name\":\"InputEnumSchema\",\"fields\":[{\"name\":\"type\",\"type\":\"Enum_symbol\",\"doc\":\"Must be `enum`\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"},\"inherited_from\":\"https://w3id.org/cwl/salad#EnumSchema\"},{\"name\":\"symbols\",\"type\":[{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Defines the set of valid symbols.\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#symbols\",\"identity\":true},\"inherited_from\":\"https://w3id.org/cwl/salad#EnumSchema\"},{\"name\":\"inputBinding\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Binding\",\"fields\":[{\"name\":\"loadContents\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Only applies when `type` is `File`.  Read up to the first 64 KiB of text from the file and place it in the\\n\\\"contents\\\" field of the file object for manipulation by expressions.\\n\"},{\"name\":\"secondaryFiles\",\"type\":[\"null\",\"string\",\"Expression\",{\"type\":\"array\",\"items\":[\"string\",\"Expression\"]}],\"doc\":\"Only applies when `type` is `File`.  Describes files that must be\\nincluded alongside the primary file.\\n\\nIf the value is an expression, the context of the expression is the input\\nor output File parameter to which this binding applies.\\n\\nIf the value is a string, it specifies that the following pattern\\nshould be applied to the primary file:\\n\\n  1. If string begins with one or more caret `^` characters, for each\\n    caret, remove the last file extension from the path (the last\\n    period `.` and all following characters).  If there are no file\\n    extensions, the path is unchanged.\\n  2. Append the remainder of the string to the end of the file path.\\n\",\"jsonldPredicate\":\"cwl:secondaryFiles\"}],\"docParent\":\"https://w3id.org/cwl/cwl#Parameter\"}],\"jsonldPredicate\":\"cwl:inputBinding\"}],\"docParent\":\"https://w3id.org/cwl/cwl#InputParameter\",\"extends\":\"https://w3id.org/cwl/salad#EnumSchema\"},{\"type\":\"record\",\"name\":\"InputArraySchema\",\"fields\":[{\"name\":\"type\",\"type\":\"Array_symbol\",\"doc\":\"Must be `array`\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"},\"inherited_from\":\"https://w3id.org/cwl/salad#ArraySchema\"},{\"name\":\"items\",\"type\":[\"PrimitiveType\",\"InputRecordSchema\",\"InputEnumSchema\",\"InputArraySchema\",\"string\",{\"type\":\"array\",\"items\":[\"PrimitiveType\",\"InputRecordSchema\",\"InputEnumSchema\",\"InputArraySchema\",\"string\"]}],\"doc\":\"Defines the type of the array elements.\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#items\"},\"inherited_from\":\"https://w3id.org/cwl/salad#ArraySchema\"},{\"name\":\"inputBinding\",\"type\":[\"null\",\"Binding\"],\"jsonldPredicate\":\"cwl:inputBinding\"}],\"docParent\":\"https://w3id.org/cwl/cwl#InputParameter\",\"extends\":\"https://w3id.org/cwl/salad#ArraySchema\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/salad#RecordSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#InputRecordSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/salad#EnumSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#InputEnumSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/salad#ArraySchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#InputArraySchema\"}]},\"string\",{\"type\":\"array\",\"items\":[\"PrimitiveType\",\"InputRecordSchema\",\"InputEnumSchema\",\"InputArraySchema\",\"string\"]}],\"doc\":\"The field type\\n\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"},\"inherited_from\":\"https://w3id.org/cwl/salad#RecordField\"},{\"name\":\"inputBinding\",\"type\":[\"null\",\"Binding\"],\"jsonldPredicate\":\"cwl:inputBinding\"}],\"extends\":\"https://w3id.org/cwl/salad#RecordField\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/salad#RecordSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#InputRecordSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/salad#EnumSchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#InputEnumSchema\"},{\"specializeFrom\":\"https://w3id.org/cwl/salad#ArraySchema\",\"specializeTo\":\"https://w3id.org/cwl/cwl#InputArraySchema\"}]}}],\"doc\":\"Defines the fields of the record.\",\"jsonldPredicate\":\"sld:fields\",\"inherited_from\":\"https://w3id.org/cwl/salad#RecordSchema\"}],\"docParent\":\"https://w3id.org/cwl/cwl#InputParameter\",\"extends\":\"https://w3id.org/cwl/salad#RecordSchema\",\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/salad#RecordField\",\"specializeTo\":\"https://w3id.org/cwl/cwl#InputRecordField\"}]},\"InputEnumSchema\",\"InputArraySchema\",\"CommandInputRecordSchema\",\"CommandInputEnumSchema\",\"CommandInputArraySchema\"]},\"doc\":\"The list of type definitions.\"}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"type\":\"record\",\"name\":\"ShellCommandRequirement\",\"doc\":\"Modify the behavior of CommandLineTool to generate a single string\\ncontaining a shell command line.  Each item in the argument list must be\\njoined into a string separated by single spaces and quoted to prevent\\nintepretation by the shell, unless `CommandLineBinding` for that argument\\ncontains `shellQuote: false`.  If `shellQuote: false` is specified, the\\nargument is joined into the command string without quoting, which allows\\nthe use of shell metacharacters such as `|` for pipes.\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"The specific requirement type.\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"@type\"},\"inherited_from\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"type\":\"record\",\"name\":\"ResourceRequirement\",\"doc\":\"Specify basic hardware resource requirements.\\n\\n\\\"min\\\" is the minimum amount of a resource that must be reserved to schedule\\na job. If \\\"min\\\" cannot be satisfied, the job should not be run.\\n\\n\\\"max\\\" is the maximum amount of a resource that the job shall be permitted\\nto use. If a node has sufficient resources, multiple jobs may be scheduled\\non a single node provided each job's \\\"max\\\" resource requirements are\\nmet. If a job attempts to exceed its \\\"max\\\" resource allocation, an\\nimplementation may deny additional resources, which may result in job\\nfailure.\\n\\nIf \\\"min\\\" is specified but \\\"max\\\" is not, then \\\"max\\\" == \\\"min\\\"\\nIf \\\"max\\\" is specified by \\\"min\\\" is not, then \\\"min\\\" == \\\"max\\\".\\n\\nIt is an error if max < min.\\n\\nIt is an error if the value of any of these fields is negative.\\n\\nIf neither \\\"min\\\" nor \\\"max\\\" is specified for a resource, an implementation may provide a default.\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"The specific requirement type.\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"@type\"},\"inherited_from\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"name\":\"coresMin\",\"type\":[\"null\",\"long\",\"string\",\"Expression\"],\"doc\":\"Minimum reserved number of CPU cores\"},{\"name\":\"coresMax\",\"type\":[\"null\",\"int\",\"string\",\"Expression\"],\"doc\":\"Maximum reserved number of CPU cores\"},{\"name\":\"ramMin\",\"type\":[\"null\",\"long\",\"string\",\"Expression\"],\"doc\":\"Minimum reserved RAM in mebibytes (2**20)\"},{\"name\":\"ramMax\",\"type\":[\"null\",\"long\",\"string\",\"Expression\"],\"doc\":\"Maximum reserved RAM in mebibytes (2**20)\"},{\"name\":\"tmpdirMin\",\"type\":[\"null\",\"long\",\"string\",\"Expression\"],\"doc\":\"Minimum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20)\"},{\"name\":\"tmpdirMax\",\"type\":[\"null\",\"long\",\"string\",\"Expression\"],\"doc\":\"Maximum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20)\"},{\"name\":\"outdirMin\",\"type\":[\"null\",\"long\",\"string\",\"Expression\"],\"doc\":\"Minimum reserved filesystem based storage for the designated output directory, in mebibytes (2**20)\"},{\"name\":\"outdirMax\",\"type\":[\"null\",\"long\",\"string\",\"Expression\"],\"doc\":\"Maximum reserved filesystem based storage for the designated output directory, in mebibyte","s (2**20)\"}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"}]}],\"doc\":\"Declares requirements that apply to either the runtime environment or the\\nworkflow engine that must be met in order to execute this process.  If\\nan implementation cannot satisfy all requirements, or a requirement is\\nlisted which is not recognized by the implementation, it is a fatal\\nerror and the implementation must not attempt to run the process,\\nunless overridden at user option.\\n\",\"jsonldPredicate\":\"cwl:requirements\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Process\"},{\"name\":\"hints\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Any\"}],\"doc\":\"Declares hints applying to either the runtime environment or the\\nworkflow engine that may be helpful in executing this process.  It is\\nnot an error if an implementation cannot satisfy all hints, however\\nthe implementation may report a warning.\\n\",\"jsonldPredicate\":{\"_id\":\"https://w3id.org/cwl/cwl#hints\",\"noLinkCheck\":true},\"inherited_from\":\"https://w3id.org/cwl/cwl#Process\"},{\"name\":\"label\",\"type\":[\"null\",\"string\"],\"doc\":\"A short, human-readable label of this process object.\",\"jsonldPredicate\":\"rdfs:label\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Process\"},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"doc\":\"A long, human-readable description of this process object.\",\"jsonldPredicate\":\"rdfs:comment\",\"inherited_from\":\"https://w3id.org/cwl/cwl#Process\"},{\"name\":\"cwlVersion\",\"type\":[\"null\",\"string\"],\"doc\":\"CWL document version\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/cwl#cwlVersion\"},\"inherited_from\":\"https://w3id.org/cwl/cwl#Process\"},{\"name\":\"class\",\"type\":\"string\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"@type\"}},{\"name\":\"baseCommand\",\"type\":[\"string\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Specifies the program to execute.  If the value is an array, the first\\nelement is the program to execute, and subsequent elements are placed\\nat the beginning of the command line in prior to any command line\\nbindings.  If the program includes a path separator character it must\\nbe an absolute path, otherwise it is an error.  If the program does not\\ninclude a path separator, search the `$PATH` variable in the runtime\\nenvironment of the workflow runner find the absolute path of the\\nexecutable.\\n\",\"jsonldPredicate\":{\"_container\":\"@list\",\"_id\":\"https://w3id.org/cwl/cwl#baseCommand\"}},{\"name\":\"arguments\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"string\",\"CommandLineBinding\"]}],\"doc\":\"Command line bindings which are not directly associated with input parameters.\\n\",\"jsonldPredicate\":{\"_container\":\"@list\",\"_id\":\"https://w3id.org/cwl/cwl#arguments\"}},{\"name\":\"stdin\",\"type\":[\"null\",\"string\",\"Expression\"],\"doc\":\"A path to a file whose contents must be piped into the command's\\nstandard input stream.\\n\"},{\"name\":\"stdout\",\"type\":[\"null\",\"string\",\"Expression\"],\"doc\":\"Capture the command's standard output stream to a file written to\\nthe designated output directory.\\n\\nIf `stdout` is a string, it specifies the file name to use.\\n\\nIf `stdout` is an expression, the expression is evaluated and must\\nreturn a string with the file name to use to capture stdout.  If the\\nreturn value is not a string, or the resulting path contains illegal\\ncharacters (such as the path separator `/`) it is an error.\\n\"},{\"name\":\"successCodes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}],\"doc\":\"Exit codes that indicate the process completed successfully.\\n\"},{\"name\":\"temporaryFailCodes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}],\"doc\":\"Exit codes that indicate the process failed due to a possibly\\ntemporary condition, where excuting the process with the same\\nruntime environment and inputs may produce different results.\\n\"},{\"name\":\"permanentFailCodes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}],\"doc\":\"Exit codes that indicate the process failed due to a permanent logic error, where excuting the process with the same runtime environment and same inputs is expected to always fail.\"}],\"docAfter\":\"https://w3id.org/cwl/cwl#Workflow\",\"extends\":\"https://w3id.org/cwl/cwl#Process\",\"documentRoot\":true,\"specialize\":[{\"specializeFrom\":\"https://w3id.org/cwl/cwl#InputParameter\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandInputParameter\"},{\"specializeFrom\":\"https://w3id.org/cwl/cwl#OutputParameter\",\"specializeTo\":\"https://w3id.org/cwl/cwl#CommandOutputParameter\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The unique identifier for this process object. */
  @Deprecated public java.lang.CharSequence id;
  /** Defines the input parameters of the process.  The process is ready to
run when all required input parameters are associated with concrete
values.  Input parameters include a schema for each parameter which is
used to validate the input object.  It may also be used to build a user
interface for constructing the input object.
 */
  @Deprecated public java.util.List<CommandInputParameter> inputs;
  /** Defines the parameters representing the output of the process.  May be
used to generate and/or validate the output object.
 */
  @Deprecated public java.util.List<CommandOutputParameter> outputs;
  /** Declares requirements that apply to either the runtime environment or the
workflow engine that must be met in order to execute this process.  If
an implementation cannot satisfy all requirements, or a requirement is
listed which is not recognized by the implementation, it is a fatal
error and the implementation must not attempt to run the process,
unless overridden at user option.
 */
  @Deprecated public java.util.List<java.lang.Object> requirements;
  /** Declares hints applying to either the runtime environment or the
workflow engine that may be helpful in executing this process.  It is
not an error if an implementation cannot satisfy all hints, however
the implementation may report a warning.
 */
  @Deprecated public java.util.List<Any> hints;
  /** A short, human-readable label of this process object. */
  @Deprecated public java.lang.CharSequence label;
  /** A long, human-readable description of this process object. */
  @Deprecated public java.lang.CharSequence description;
  /** CWL document version */
  @Deprecated public java.lang.CharSequence cwlVersion;
  @Deprecated public java.lang.CharSequence class$;
  /** Specifies the program to execute.  If the value is an array, the first
element is the program to execute, and subsequent elements are placed
at the beginning of the command line in prior to any command line
bindings.  If the program includes a path separator character it must
be an absolute path, otherwise it is an error.  If the program does not
include a path separator, search the `$PATH` variable in the runtime
environment of the workflow runner find the absolute path of the
executable.
 */
  @Deprecated public java.lang.Object baseCommand;
  /** Command line bindings which are not directly associated with input parameters.
 */
  @Deprecated public java.util.List<java.lang.Object> arguments;
  /** A path to a file whose contents must be piped into the command's
standard input stream.
 */
  @Deprecated public java.lang.Object stdin;
  /** Capture the command's standard output stream to a file written to
the designated output directory.

If `stdout` is a string, it specifies the file name to use.

If `stdout` is an expression, the expression is evaluated and must
return a string with the file name to use to capture stdout.  If the
return value is not a string, or the resulting path contains illegal
characters (such as the path separator `/`) it is an error.
 */
  @Deprecated public java.lang.Object stdout;
  /** Exit codes that indicate the process completed successfully.
 */
  @Deprecated public java.util.List<java.lang.Integer> successCodes;
  /** Exit codes that indicate the process failed due to a possibly
temporary condition, where excuting the process with the same
runtime environment and inputs may produce different results.
 */
  @Deprecated public java.util.List<java.lang.Integer> temporaryFailCodes;
  /** Exit codes that indicate the process failed due to a permanent logic error, where excuting the process with the same runtime environment and same inputs is expected to always fail. */
  @Deprecated public java.util.List<java.lang.Integer> permanentFailCodes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public CommandLineTool() {}

  /**
   * All-args constructor.
   */
  public CommandLineTool(java.lang.CharSequence id, java.util.List<CommandInputParameter> inputs, java.util.List<CommandOutputParameter> outputs, java.util.List<java.lang.Object> requirements, java.util.List<Any> hints, java.lang.CharSequence label, java.lang.CharSequence description, java.lang.CharSequence cwlVersion, java.lang.CharSequence class$, java.lang.Object baseCommand, java.util.List<java.lang.Object> arguments, java.lang.Object stdin, java.lang.Object stdout, java.util.List<java.lang.Integer> successCodes, java.util.List<java.lang.Integer> temporaryFailCodes, java.util.List<java.lang.Integer> permanentFailCodes) {
    this.id = id;
    this.inputs = inputs;
    this.outputs = outputs;
    this.requirements = requirements;
    this.hints = hints;
    this.label = label;
    this.description = description;
    this.cwlVersion = cwlVersion;
    this.class$ = class$;
    this.baseCommand = baseCommand;
    this.arguments = arguments;
    this.stdin = stdin;
    this.stdout = stdout;
    this.successCodes = successCodes;
    this.temporaryFailCodes = temporaryFailCodes;
    this.permanentFailCodes = permanentFailCodes;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return inputs;
    case 2: return outputs;
    case 3: return requirements;
    case 4: return hints;
    case 5: return label;
    case 6: return description;
    case 7: return cwlVersion;
    case 8: return class$;
    case 9: return baseCommand;
    case 10: return arguments;
    case 11: return stdin;
    case 12: return stdout;
    case 13: return successCodes;
    case 14: return temporaryFailCodes;
    case 15: return permanentFailCodes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: inputs = (java.util.List<CommandInputParameter>)value$; break;
    case 2: outputs = (java.util.List<CommandOutputParameter>)value$; break;
    case 3: requirements = (java.util.List<java.lang.Object>)value$; break;
    case 4: hints = (java.util.List<Any>)value$; break;
    case 5: label = (java.lang.CharSequence)value$; break;
    case 6: description = (java.lang.CharSequence)value$; break;
    case 7: cwlVersion = (java.lang.CharSequence)value$; break;
    case 8: class$ = (java.lang.CharSequence)value$; break;
    case 9: baseCommand = (java.lang.Object)value$; break;
    case 10: arguments = (java.util.List<java.lang.Object>)value$; break;
    case 11: stdin = (java.lang.Object)value$; break;
    case 12: stdout = (java.lang.Object)value$; break;
    case 13: successCodes = (java.util.List<java.lang.Integer>)value$; break;
    case 14: temporaryFailCodes = (java.util.List<java.lang.Integer>)value$; break;
    case 15: permanentFailCodes = (java.util.List<java.lang.Integer>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * The unique identifier for this process object.   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * The unique identifier for this process object.   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'inputs' field.
   * Defines the input parameters of the process.  The process is ready to
run when all required input parameters are associated with concrete
values.  Input parameters include a schema for each parameter which is
used to validate the input object.  It may also be used to build a user
interface for constructing the input object.
   */
  public java.util.List<CommandInputParameter> getInputs() {
    return inputs;
  }

  /**
   * Sets the value of the 'inputs' field.
   * Defines the input parameters of the process.  The process is ready to
run when all required input parameters are associated with concrete
values.  Input parameters include a schema for each parameter which is
used to validate the input object.  It may also be used to build a user
interface for constructing the input object.
   * @param value the value to set.
   */
  public void setInputs(java.util.List<CommandInputParameter> value) {
    this.inputs = value;
  }

  /**
   * Gets the value of the 'outputs' field.
   * Defines the parameters representing the output of the process.  May be
used to generate and/or validate the output object.
   */
  public java.util.List<CommandOutputParameter> getOutputs() {
    return outputs;
  }

  /**
   * Sets the value of the 'outputs' field.
   * Defines the parameters representing the output of the process.  May be
used to generate and/or validate the output object.
   * @param value the value to set.
   */
  public void setOutputs(java.util.List<CommandOutputParameter> value) {
    this.outputs = value;
  }

  /**
   * Gets the value of the 'requirements' field.
   * Declares requirements that apply to either the runtime environment or the
workflow engine that must be met in order to execute this process.  If
an implementation cannot satisfy all requirements, or a requirement is
listed which is not recognized by the implementation, it is a fatal
error and the implementation must not attempt to run the process,
unless overridden at user option.
   */
  public java.util.List<java.lang.Object> getRequirements() {
    return requirements;
  }

  /**
   * Sets the value of the 'requirements' field.
   * Declares requirements that apply to either the runtime environment or the
workflow engine that must be met in order to execute this process.  If
an implementation cannot satisfy all requirements, or a requirement is
listed which is not recognized by the implementation, it is a fatal
error and the implementation must not attempt to run the process,
unless overridden at user option.
   * @param value the value to set.
   */
  public void setRequirements(java.util.List<java.lang.Object> value) {
    this.requirements = value;
  }

  /**
   * Gets the value of the 'hints' field.
   * Declares hints applying to either the runtime environment or the
workflow engine that may be helpful in executing this process.  It is
not an error if an implementation cannot satisfy all hints, however
the implementation may report a warning.
   */
  public java.util.List<Any> getHints() {
    return hints;
  }

  /**
   * Sets the value of the 'hints' field.
   * Declares hints applying to either the runtime environment or the
workflow engine that may be helpful in executing this process.  It is
not an error if an implementation cannot satisfy all hints, however
the implementation may report a warning.
   * @param value the value to set.
   */
  public void setHints(java.util.List<Any> value) {
    this.hints = value;
  }

  /**
   * Gets the value of the 'label' field.
   * A short, human-readable label of this process object.   */
  public java.lang.CharSequence getLabel() {
    return label;
  }

  /**
   * Sets the value of the 'label' field.
   * A short, human-readable label of this process object.   * @param value the value to set.
   */
  public void setLabel(java.lang.CharSequence value) {
    this.label = value;
  }

  /**
   * Gets the value of the 'description' field.
   * A long, human-readable description of this process object.   */
  public java.lang.CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * A long, human-readable description of this process object.   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'cwlVersion' field.
   * CWL document version   */
  public java.lang.CharSequence getCwlVersion() {
    return cwlVersion;
  }

  /**
   * Sets the value of the 'cwlVersion' field.
   * CWL document version   * @param value the value to set.
   */
  public void setCwlVersion(java.lang.CharSequence value) {
    this.cwlVersion = value;
  }

  /**
   * Gets the value of the 'class$' field.
   */
  public java.lang.CharSequence getClass$() {
    return class$;
  }

  /**
   * Sets the value of the 'class$' field.
   * @param value the value to set.
   */
  public void setClass$(java.lang.CharSequence value) {
    this.class$ = value;
  }

  /**
   * Gets the value of the 'baseCommand' field.
   * Specifies the program to execute.  If the value is an array, the first
element is the program to execute, and subsequent elements are placed
at the beginning of the command line in prior to any command line
bindings.  If the program includes a path separator character it must
be an absolute path, otherwise it is an error.  If the program does not
include a path separator, search the `$PATH` variable in the runtime
environment of the workflow runner find the absolute path of the
executable.
   */
  public java.lang.Object getBaseCommand() {
    return baseCommand;
  }

  /**
   * Sets the value of the 'baseCommand' field.
   * Specifies the program to execute.  If the value is an array, the first
element is the program to execute, and subsequent elements are placed
at the beginning of the command line in prior to any command line
bindings.  If the program includes a path separator character it must
be an absolute path, otherwise it is an error.  If the program does not
include a path separator, search the `$PATH` variable in the runtime
environment of the workflow runner find the absolute path of the
executable.
   * @param value the value to set.
   */
  public void setBaseCommand(java.lang.Object value) {
    this.baseCommand = value;
  }

  /**
   * Gets the value of the 'arguments' field.
   * Command line bindings which are not directly associated with input parameters.
   */
  public java.util.List<java.lang.Object> getArguments() {
    return arguments;
  }

  /**
   * Sets the value of the 'arguments' field.
   * Command line bindings which are not directly associated with input parameters.
   * @param value the value to set.
   */
  public void setArguments(java.util.List<java.lang.Object> value) {
    this.arguments = value;
  }

  /**
   * Gets the value of the 'stdin' field.
   * A path to a file whose contents must be piped into the command's
standard input stream.
   */
  public java.lang.Object getStdin() {
    return stdin;
  }

  /**
   * Sets the value of the 'stdin' field.
   * A path to a file whose contents must be piped into the command's
standard input stream.
   * @param value the value to set.
   */
  public void setStdin(java.lang.Object value) {
    this.stdin = value;
  }

  /**
   * Gets the value of the 'stdout' field.
   * Capture the command's standard output stream to a file written to
the designated output directory.

If `stdout` is a string, it specifies the file name to use.

If `stdout` is an expression, the expression is evaluated and must
return a string with the file name to use to capture stdout.  If the
return value is not a string, or the resulting path contains illegal
characters (such as the path separator `/`) it is an error.
   */
  public java.lang.Object getStdout() {
    return stdout;
  }

  /**
   * Sets the value of the 'stdout' field.
   * Capture the command's standard output stream to a file written to
the designated output directory.

If `stdout` is a string, it specifies the file name to use.

If `stdout` is an expression, the expression is evaluated and must
return a string with the file name to use to capture stdout.  If the
return value is not a string, or the resulting path contains illegal
characters (such as the path separator `/`) it is an error.
   * @param value the value to set.
   */
  public void setStdout(java.lang.Object value) {
    this.stdout = value;
  }

  /**
   * Gets the value of the 'successCodes' field.
   * Exit codes that indicate the process completed successfully.
   */
  public java.util.List<java.lang.Integer> getSuccessCodes() {
    return successCodes;
  }

  /**
   * Sets the value of the 'successCodes' field.
   * Exit codes that indicate the process completed successfully.
   * @param value the value to set.
   */
  public void setSuccessCodes(java.util.List<java.lang.Integer> value) {
    this.successCodes = value;
  }

  /**
   * Gets the value of the 'temporaryFailCodes' field.
   * Exit codes that indicate the process failed due to a possibly
temporary condition, where excuting the process with the same
runtime environment and inputs may produce different results.
   */
  public java.util.List<java.lang.Integer> getTemporaryFailCodes() {
    return temporaryFailCodes;
  }

  /**
   * Sets the value of the 'temporaryFailCodes' field.
   * Exit codes that indicate the process failed due to a possibly
temporary condition, where excuting the process with the same
runtime environment and inputs may produce different results.
   * @param value the value to set.
   */
  public void setTemporaryFailCodes(java.util.List<java.lang.Integer> value) {
    this.temporaryFailCodes = value;
  }

  /**
   * Gets the value of the 'permanentFailCodes' field.
   * Exit codes that indicate the process failed due to a permanent logic error, where excuting the process with the same runtime environment and same inputs is expected to always fail.   */
  public java.util.List<java.lang.Integer> getPermanentFailCodes() {
    return permanentFailCodes;
  }

  /**
   * Sets the value of the 'permanentFailCodes' field.
   * Exit codes that indicate the process failed due to a permanent logic error, where excuting the process with the same runtime environment and same inputs is expected to always fail.   * @param value the value to set.
   */
  public void setPermanentFailCodes(java.util.List<java.lang.Integer> value) {
    this.permanentFailCodes = value;
  }

  /** Creates a new CommandLineTool RecordBuilder */
  public static CommandLineTool.Builder newBuilder() {
    return new CommandLineTool.Builder();
  }
  
  /** Creates a new CommandLineTool RecordBuilder by copying an existing Builder */
  public static CommandLineTool.Builder newBuilder(CommandLineTool.Builder other) {
    return new CommandLineTool.Builder(other);
  }
  
  /** Creates a new CommandLineTool RecordBuilder by copying an existing CommandLineTool instance */
  public static CommandLineTool.Builder newBuilder(CommandLineTool other) {
    return new CommandLineTool.Builder(other);
  }
  
  /**
   * RecordBuilder for CommandLineTool instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CommandLineTool>
    implements org.apache.avro.data.RecordBuilder<CommandLineTool> {

    private java.lang.CharSequence id;
    private java.util.List<CommandInputParameter> inputs;
    private java.util.List<CommandOutputParameter> outputs;
    private java.util.List<java.lang.Object> requirements;
    private java.util.List<Any> hints;
    private java.lang.CharSequence label;
    private java.lang.CharSequence description;
    private java.lang.CharSequence cwlVersion;
    private java.lang.CharSequence class$;
    private java.lang.Object baseCommand;
    private java.util.List<java.lang.Object> arguments;
    private java.lang.Object stdin;
    private java.lang.Object stdout;
    private java.util.List<java.lang.Integer> successCodes;
    private java.util.List<java.lang.Integer> temporaryFailCodes;
    private java.util.List<java.lang.Integer> permanentFailCodes;

    /** Creates a new Builder */
    private Builder() {
      super(CommandLineTool.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(CommandLineTool.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.inputs)) {
        this.inputs = data().deepCopy(fields()[1].schema(), other.inputs);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.outputs)) {
        this.outputs = data().deepCopy(fields()[2].schema(), other.outputs);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.requirements)) {
        this.requirements = data().deepCopy(fields()[3].schema(), other.requirements);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.hints)) {
        this.hints = data().deepCopy(fields()[4].schema(), other.hints);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.label)) {
        this.label = data().deepCopy(fields()[5].schema(), other.label);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.description)) {
        this.description = data().deepCopy(fields()[6].schema(), other.description);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.cwlVersion)) {
        this.cwlVersion = data().deepCopy(fields()[7].schema(), other.cwlVersion);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.class$)) {
        this.class$ = data().deepCopy(fields()[8].schema(), other.class$);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.baseCommand)) {
        this.baseCommand = data().deepCopy(fields()[9].schema(), other.baseCommand);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.arguments)) {
        this.arguments = data().deepCopy(fields()[10].schema(), other.arguments);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.stdin)) {
        this.stdin = data().deepCopy(fields()[11].schema(), other.stdin);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.stdout)) {
        this.stdout = data().deepCopy(fields()[12].schema(), other.stdout);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.successCodes)) {
        this.successCodes = data().deepCopy(fields()[13].schema(), other.successCodes);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.temporaryFailCodes)) {
        this.temporaryFailCodes = data().deepCopy(fields()[14].schema(), other.temporaryFailCodes);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.permanentFailCodes)) {
        this.permanentFailCodes = data().deepCopy(fields()[15].schema(), other.permanentFailCodes);
        fieldSetFlags()[15] = true;
      }
    }
    
    /** Creates a Builder by copying an existing CommandLineTool instance */
    private Builder(CommandLineTool other) {
            super(CommandLineTool.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.inputs)) {
        this.inputs = data().deepCopy(fields()[1].schema(), other.inputs);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.outputs)) {
        this.outputs = data().deepCopy(fields()[2].schema(), other.outputs);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.requirements)) {
        this.requirements = data().deepCopy(fields()[3].schema(), other.requirements);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.hints)) {
        this.hints = data().deepCopy(fields()[4].schema(), other.hints);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.label)) {
        this.label = data().deepCopy(fields()[5].schema(), other.label);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.description)) {
        this.description = data().deepCopy(fields()[6].schema(), other.description);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.cwlVersion)) {
        this.cwlVersion = data().deepCopy(fields()[7].schema(), other.cwlVersion);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.class$)) {
        this.class$ = data().deepCopy(fields()[8].schema(), other.class$);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.baseCommand)) {
        this.baseCommand = data().deepCopy(fields()[9].schema(), other.baseCommand);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.arguments)) {
        this.arguments = data().deepCopy(fields()[10].schema(), other.arguments);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.stdin)) {
        this.stdin = data().deepCopy(fields()[11].schema(), other.stdin);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.stdout)) {
        this.stdout = data().deepCopy(fields()[12].schema(), other.stdout);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.successCodes)) {
        this.successCodes = data().deepCopy(fields()[13].schema(), other.successCodes);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.temporaryFailCodes)) {
        this.temporaryFailCodes = data().deepCopy(fields()[14].schema(), other.temporaryFailCodes);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.permanentFailCodes)) {
        this.permanentFailCodes = data().deepCopy(fields()[15].schema(), other.permanentFailCodes);
        fieldSetFlags()[15] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public CommandLineTool.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public CommandLineTool.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'inputs' field */
    public java.util.List<CommandInputParameter> getInputs() {
      return inputs;
    }
    
    /** Sets the value of the 'inputs' field */
    public CommandLineTool.Builder setInputs(java.util.List<CommandInputParameter> value) {
      validate(fields()[1], value);
      this.inputs = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'inputs' field has been set */
    public boolean hasInputs() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'inputs' field */
    public CommandLineTool.Builder clearInputs() {
      inputs = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'outputs' field */
    public java.util.List<CommandOutputParameter> getOutputs() {
      return outputs;
    }
    
    /** Sets the value of the 'outputs' field */
    public CommandLineTool.Builder setOutputs(java.util.List<CommandOutputParameter> value) {
      validate(fields()[2], value);
      this.outputs = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'outputs' field has been set */
    public boolean hasOutputs() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'outputs' field */
    public CommandLineTool.Builder clearOutputs() {
      outputs = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'requirements' field */
    public java.util.List<java.lang.Object> getRequirements() {
      return requirements;
    }
    
    /** Sets the value of the 'requirements' field */
    public CommandLineTool.Builder setRequirements(java.util.List<java.lang.Object> value) {
      validate(fields()[3], value);
      this.requirements = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'requirements' field has been set */
    public boolean hasRequirements() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'requirements' field */
    public CommandLineTool.Builder clearRequirements() {
      requirements = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'hints' field */
    public java.util.List<Any> getHints() {
      return hints;
    }
    
    /** Sets the value of the 'hints' field */
    public CommandLineTool.Builder setHints(java.util.List<Any> value) {
      validate(fields()[4], value);
      this.hints = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'hints' field has been set */
    public boolean hasHints() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'hints' field */
    public CommandLineTool.Builder clearHints() {
      hints = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'label' field */
    public java.lang.CharSequence getLabel() {
      return label;
    }
    
    /** Sets the value of the 'label' field */
    public CommandLineTool.Builder setLabel(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.label = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'label' field has been set */
    public boolean hasLabel() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'label' field */
    public CommandLineTool.Builder clearLabel() {
      label = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'description' field */
    public java.lang.CharSequence getDescription() {
      return description;
    }
    
    /** Sets the value of the 'description' field */
    public CommandLineTool.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.description = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'description' field has been set */
    public boolean hasDescription() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'description' field */
    public CommandLineTool.Builder clearDescription() {
      description = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'cwlVersion' field */
    public java.lang.CharSequence getCwlVersion() {
      return cwlVersion;
    }
    
    /** Sets the value of the 'cwlVersion' field */
    public CommandLineTool.Builder setCwlVersion(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.cwlVersion = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'cwlVersion' field has been set */
    public boolean hasCwlVersion() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'cwlVersion' field */
    public CommandLineTool.Builder clearCwlVersion() {
      cwlVersion = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'class$' field */
    public java.lang.CharSequence getClass$() {
      return class$;
    }
    
    /** Sets the value of the 'class$' field */
    public CommandLineTool.Builder setClass$(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.class$ = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'class$' field has been set */
    public boolean hasClass$() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'class$' field */
    public CommandLineTool.Builder clearClass$() {
      class$ = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'baseCommand' field */
    public java.lang.Object getBaseCommand() {
      return baseCommand;
    }
    
    /** Sets the value of the 'baseCommand' field */
    public CommandLineTool.Builder setBaseCommand(java.lang.Object value) {
      validate(fields()[9], value);
      this.baseCommand = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'baseCommand' field has been set */
    public boolean hasBaseCommand() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'baseCommand' field */
    public CommandLineTool.Builder clearBaseCommand() {
      baseCommand = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'arguments' field */
    public java.util.List<java.lang.Object> getArguments() {
      return arguments;
    }
    
    /** Sets the value of the 'arguments' field */
    public CommandLineTool.Builder setArguments(java.util.List<java.lang.Object> value) {
      validate(fields()[10], value);
      this.arguments = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'arguments' field has been set */
    public boolean hasArguments() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'arguments' field */
    public CommandLineTool.Builder clearArguments() {
      arguments = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'stdin' field */
    public java.lang.Object getStdin() {
      return stdin;
    }
    
    /** Sets the value of the 'stdin' field */
    public CommandLineTool.Builder setStdin(java.lang.Object value) {
      validate(fields()[11], value);
      this.stdin = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'stdin' field has been set */
    public boolean hasStdin() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'stdin' field */
    public CommandLineTool.Builder clearStdin() {
      stdin = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'stdout' field */
    public java.lang.Object getStdout() {
      return stdout;
    }
    
    /** Sets the value of the 'stdout' field */
    public CommandLineTool.Builder setStdout(java.lang.Object value) {
      validate(fields()[12], value);
      this.stdout = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'stdout' field has been set */
    public boolean hasStdout() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'stdout' field */
    public CommandLineTool.Builder clearStdout() {
      stdout = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'successCodes' field */
    public java.util.List<java.lang.Integer> getSuccessCodes() {
      return successCodes;
    }
    
    /** Sets the value of the 'successCodes' field */
    public CommandLineTool.Builder setSuccessCodes(java.util.List<java.lang.Integer> value) {
      validate(fields()[13], value);
      this.successCodes = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'successCodes' field has been set */
    public boolean hasSuccessCodes() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'successCodes' field */
    public CommandLineTool.Builder clearSuccessCodes() {
      successCodes = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'temporaryFailCodes' field */
    public java.util.List<java.lang.Integer> getTemporaryFailCodes() {
      return temporaryFailCodes;
    }
    
    /** Sets the value of the 'temporaryFailCodes' field */
    public CommandLineTool.Builder setTemporaryFailCodes(java.util.List<java.lang.Integer> value) {
      validate(fields()[14], value);
      this.temporaryFailCodes = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'temporaryFailCodes' field has been set */
    public boolean hasTemporaryFailCodes() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'temporaryFailCodes' field */
    public CommandLineTool.Builder clearTemporaryFailCodes() {
      temporaryFailCodes = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'permanentFailCodes' field */
    public java.util.List<java.lang.Integer> getPermanentFailCodes() {
      return permanentFailCodes;
    }
    
    /** Sets the value of the 'permanentFailCodes' field */
    public CommandLineTool.Builder setPermanentFailCodes(java.util.List<java.lang.Integer> value) {
      validate(fields()[15], value);
      this.permanentFailCodes = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'permanentFailCodes' field has been set */
    public boolean hasPermanentFailCodes() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'permanentFailCodes' field */
    public CommandLineTool.Builder clearPermanentFailCodes() {
      permanentFailCodes = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    @Override
    public CommandLineTool build() {
      try {
        CommandLineTool record = new CommandLineTool();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.inputs = fieldSetFlags()[1] ? this.inputs : (java.util.List<CommandInputParameter>) defaultValue(fields()[1]);
        record.outputs = fieldSetFlags()[2] ? this.outputs : (java.util.List<CommandOutputParameter>) defaultValue(fields()[2]);
        record.requirements = fieldSetFlags()[3] ? this.requirements : (java.util.List<java.lang.Object>) defaultValue(fields()[3]);
        record.hints = fieldSetFlags()[4] ? this.hints : (java.util.List<Any>) defaultValue(fields()[4]);
        record.label = fieldSetFlags()[5] ? this.label : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.description = fieldSetFlags()[6] ? this.description : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.cwlVersion = fieldSetFlags()[7] ? this.cwlVersion : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.class$ = fieldSetFlags()[8] ? this.class$ : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.baseCommand = fieldSetFlags()[9] ? this.baseCommand : (java.lang.Object) defaultValue(fields()[9]);
        record.arguments = fieldSetFlags()[10] ? this.arguments : (java.util.List<java.lang.Object>) defaultValue(fields()[10]);
        record.stdin = fieldSetFlags()[11] ? this.stdin : (java.lang.Object) defaultValue(fields()[11]);
        record.stdout = fieldSetFlags()[12] ? this.stdout : (java.lang.Object) defaultValue(fields()[12]);
        record.successCodes = fieldSetFlags()[13] ? this.successCodes : (java.util.List<java.lang.Integer>) defaultValue(fields()[13]);
        record.temporaryFailCodes = fieldSetFlags()[14] ? this.temporaryFailCodes : (java.util.List<java.lang.Integer>) defaultValue(fields()[14]);
        record.permanentFailCodes = fieldSetFlags()[15] ? this.permanentFailCodes : (java.util.List<java.lang.Integer>) defaultValue(fields()[15]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
