package io.dockstore.client.cli.cwl;

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class OutputEnumSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OutputEnumSchema\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Enum_symbol\",\"symbols\":[\"enum\"]},\"doc\":\"Must be `enum`\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"https://w3id.org/cwl/salad#type\"},\"inherited_from\":\"https://w3id.org/cwl/salad#EnumSchema\"},{\"name\":\"symbols\",\"type\":[{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Defines the set of valid symbols.\",\"jsonldPredicate\":{\"_type\":\"@id\",\"_id\":\"https://w3id.org/cwl/salad#symbols\",\"identity\":true},\"inherited_from\":\"https://w3id.org/cwl/salad#EnumSchema\"},{\"name\":\"outputBinding\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Binding\",\"fields\":[{\"name\":\"loadContents\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Only applies when `type` is `File`.  Read up to the first 64 KiB of text from the file and place it in the\\n\\\"contents\\\" field of the file object for manipulation by expressions.\\n\"},{\"name\":\"secondaryFiles\",\"type\":[\"null\",\"string\",{\"type\":\"enum\",\"name\":\"Expression\",\"doc\":\"Not a real type.  Indicates that a field must allow expressions.\\n\",\"symbols\":[\"ExpressionPlaceholder\"],\"docAfter\":\"https://w3id.org/cwl/cwl#ExpressionTool\"},{\"type\":\"array\",\"items\":[\"string\",\"Expression\"]}],\"doc\":\"Only applies when `type` is `File`.  Describes files that must be\\nincluded alongside the primary file.\\n\\nIf the value is an expression, the context of the expression is the input\\nor output File parameter to which this binding applies.\\n\\nIf the value is a string, it specifies that the following pattern\\nshould be applied to the primary file:\\n\\n  1. If string begins with one or more caret `^` characters, for each\\n    caret, remove the last file extension from the path (the last\\n    period `.` and all following characters).  If there are no file\\n    extensions, the path is unchanged.\\n  2. Append the remainder of the string to the end of the file path.\\n\",\"jsonldPredicate\":\"cwl:secondaryFiles\"}],\"docParent\":\"https://w3id.org/cwl/cwl#Parameter\"}],\"jsonldPredicate\":\"cwl:outputBinding\"}],\"extends\":\"https://w3id.org/cwl/salad#EnumSchema\",\"docParent\":\"https://w3id.org/cwl/cwl#OutputParameter\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Must be `enum` */
  @Deprecated public Enum_symbol type;
  /** Defines the set of valid symbols. */
  @Deprecated public java.lang.Object symbols;
  @Deprecated public Binding outputBinding;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public OutputEnumSchema() {}

  /**
   * All-args constructor.
   */
  public OutputEnumSchema(Enum_symbol type, java.lang.Object symbols, Binding outputBinding) {
    this.type = type;
    this.symbols = symbols;
    this.outputBinding = outputBinding;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return symbols;
    case 2: return outputBinding;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (Enum_symbol)value$; break;
    case 1: symbols = (java.lang.Object)value$; break;
    case 2: outputBinding = (Binding)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   * Must be `enum`   */
  public Enum_symbol getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * Must be `enum`   * @param value the value to set.
   */
  public void setType(Enum_symbol value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'symbols' field.
   * Defines the set of valid symbols.   */
  public java.lang.Object getSymbols() {
    return symbols;
  }

  /**
   * Sets the value of the 'symbols' field.
   * Defines the set of valid symbols.   * @param value the value to set.
   */
  public void setSymbols(java.lang.Object value) {
    this.symbols = value;
  }

  /**
   * Gets the value of the 'outputBinding' field.
   */
  public Binding getOutputBinding() {
    return outputBinding;
  }

  /**
   * Sets the value of the 'outputBinding' field.
   * @param value the value to set.
   */
  public void setOutputBinding(Binding value) {
    this.outputBinding = value;
  }

  /** Creates a new OutputEnumSchema RecordBuilder */
  public static OutputEnumSchema.Builder newBuilder() {
    return new OutputEnumSchema.Builder();
  }
  
  /** Creates a new OutputEnumSchema RecordBuilder by copying an existing Builder */
  public static OutputEnumSchema.Builder newBuilder(OutputEnumSchema.Builder other) {
    return new OutputEnumSchema.Builder(other);
  }
  
  /** Creates a new OutputEnumSchema RecordBuilder by copying an existing OutputEnumSchema instance */
  public static OutputEnumSchema.Builder newBuilder(OutputEnumSchema other) {
    return new OutputEnumSchema.Builder(other);
  }
  
  /**
   * RecordBuilder for OutputEnumSchema instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OutputEnumSchema>
    implements org.apache.avro.data.RecordBuilder<OutputEnumSchema> {

    private Enum_symbol type;
    private java.lang.Object symbols;
    private Binding outputBinding;

    /** Creates a new Builder */
    private Builder() {
      super(OutputEnumSchema.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(OutputEnumSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.symbols)) {
        this.symbols = data().deepCopy(fields()[1].schema(), other.symbols);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.outputBinding)) {
        this.outputBinding = data().deepCopy(fields()[2].schema(), other.outputBinding);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing OutputEnumSchema instance */
    private Builder(OutputEnumSchema other) {
            super(OutputEnumSchema.SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.symbols)) {
        this.symbols = data().deepCopy(fields()[1].schema(), other.symbols);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.outputBinding)) {
        this.outputBinding = data().deepCopy(fields()[2].schema(), other.outputBinding);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'type' field */
    public Enum_symbol getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public OutputEnumSchema.Builder setType(Enum_symbol value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'type' field */
    public OutputEnumSchema.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'symbols' field */
    public java.lang.Object getSymbols() {
      return symbols;
    }
    
    /** Sets the value of the 'symbols' field */
    public OutputEnumSchema.Builder setSymbols(java.lang.Object value) {
      validate(fields()[1], value);
      this.symbols = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'symbols' field has been set */
    public boolean hasSymbols() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'symbols' field */
    public OutputEnumSchema.Builder clearSymbols() {
      symbols = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'outputBinding' field */
    public Binding getOutputBinding() {
      return outputBinding;
    }
    
    /** Sets the value of the 'outputBinding' field */
    public OutputEnumSchema.Builder setOutputBinding(Binding value) {
      validate(fields()[2], value);
      this.outputBinding = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'outputBinding' field has been set */
    public boolean hasOutputBinding() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'outputBinding' field */
    public OutputEnumSchema.Builder clearOutputBinding() {
      outputBinding = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public OutputEnumSchema build() {
      try {
        OutputEnumSchema record = new OutputEnumSchema();
        record.type = fieldSetFlags()[0] ? this.type : (Enum_symbol) defaultValue(fields()[0]);
        record.symbols = fieldSetFlags()[1] ? this.symbols : (java.lang.Object) defaultValue(fields()[1]);
        record.outputBinding = fieldSetFlags()[2] ? this.outputBinding : (Binding) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
