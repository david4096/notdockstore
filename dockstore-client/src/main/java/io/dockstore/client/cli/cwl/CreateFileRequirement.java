package io.dockstore.client.cli.cwl;

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
/** Define a list of files that must be created by the workflow
platform in the designated output directory prior to executing the command
line tool.  See `FileDef` for details.
 */
@org.apache.avro.specific.AvroGenerated
public class CreateFileRequirement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CreateFileRequirement\",\"doc\":\"Define a list of files that must be created by the workflow\\nplatform in the designated output directory prior to executing the command\\nline tool.  See `FileDef` for details.\\n\",\"fields\":[{\"name\":\"class\",\"type\":\"string\",\"doc\":\"The specific requirement type.\",\"jsonldPredicate\":{\"_type\":\"@vocab\",\"_id\":\"@type\"},\"inherited_from\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"},{\"name\":\"fileDef\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FileDef\",\"doc\":\"Define a file that must be placed in the designated output directory\\nprior to executing the command line tool.  May be the result of executing\\nan expression, such as building a configuration file from a template.\\n\",\"fields\":[{\"name\":\"filename\",\"type\":[\"string\",{\"type\":\"enum\",\"name\":\"Expression\",\"doc\":\"Not a real type.  Indicates that a field must allow expressions.\\n\",\"symbols\":[\"ExpressionPlaceholder\"],\"docAfter\":\"https://w3id.org/cwl/cwl#ExpressionTool\"}],\"doc\":\"The name of the file to create in the output directory.\"},{\"name\":\"fileContent\",\"type\":[\"string\",\"Expression\"],\"doc\":\"If the value is a string literal or an expression which evaluates to a\\nstring, a new file must be created with the string as the file contents.\\n\\nIf the value is an expression that evaluates to a File object, this\\nindicates the referenced file should be added to the designated output\\ndirectory prior to executing the tool.\\n\\nFiles added in this way may be read-only, and may be provided\\nby bind mounts or file system links to avoid\\nunnecessary copying of the input file.\\n\"}],\"docParent\":\"https://w3id.org/cwl/cwl#CreateFileRequirement\"}},\"doc\":\"The list of files.\"}],\"extends\":\"https://w3id.org/cwl/cwl#ProcessRequirement\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The specific requirement type. */
  @Deprecated public java.lang.CharSequence class$;
  /** The list of files. */
  @Deprecated public java.util.List<FileDef> fileDef;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public CreateFileRequirement() {}

  /**
   * All-args constructor.
   */
  public CreateFileRequirement(java.lang.CharSequence class$, java.util.List<FileDef> fileDef) {
    this.class$ = class$;
    this.fileDef = fileDef;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return class$;
    case 1: return fileDef;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: class$ = (java.lang.CharSequence)value$; break;
    case 1: fileDef = (java.util.List<FileDef>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'class$' field.
   * The specific requirement type.   */
  public java.lang.CharSequence getClass$() {
    return class$;
  }

  /**
   * Sets the value of the 'class$' field.
   * The specific requirement type.   * @param value the value to set.
   */
  public void setClass$(java.lang.CharSequence value) {
    this.class$ = value;
  }

  /**
   * Gets the value of the 'fileDef' field.
   * The list of files.   */
  public java.util.List<FileDef> getFileDef() {
    return fileDef;
  }

  /**
   * Sets the value of the 'fileDef' field.
   * The list of files.   * @param value the value to set.
   */
  public void setFileDef(java.util.List<FileDef> value) {
    this.fileDef = value;
  }

  /** Creates a new CreateFileRequirement RecordBuilder */
  public static CreateFileRequirement.Builder newBuilder() {
    return new CreateFileRequirement.Builder();
  }
  
  /** Creates a new CreateFileRequirement RecordBuilder by copying an existing Builder */
  public static CreateFileRequirement.Builder newBuilder(CreateFileRequirement.Builder other) {
    return new CreateFileRequirement.Builder(other);
  }
  
  /** Creates a new CreateFileRequirement RecordBuilder by copying an existing CreateFileRequirement instance */
  public static CreateFileRequirement.Builder newBuilder(CreateFileRequirement other) {
    return new CreateFileRequirement.Builder(other);
  }
  
  /**
   * RecordBuilder for CreateFileRequirement instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CreateFileRequirement>
    implements org.apache.avro.data.RecordBuilder<CreateFileRequirement> {

    private java.lang.CharSequence class$;
    private java.util.List<FileDef> fileDef;

    /** Creates a new Builder */
    private Builder() {
      super(CreateFileRequirement.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(CreateFileRequirement.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.class$)) {
        this.class$ = data().deepCopy(fields()[0].schema(), other.class$);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fileDef)) {
        this.fileDef = data().deepCopy(fields()[1].schema(), other.fileDef);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing CreateFileRequirement instance */
    private Builder(CreateFileRequirement other) {
            super(CreateFileRequirement.SCHEMA$);
      if (isValidValue(fields()[0], other.class$)) {
        this.class$ = data().deepCopy(fields()[0].schema(), other.class$);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fileDef)) {
        this.fileDef = data().deepCopy(fields()[1].schema(), other.fileDef);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'class$' field */
    public java.lang.CharSequence getClass$() {
      return class$;
    }
    
    /** Sets the value of the 'class$' field */
    public CreateFileRequirement.Builder setClass$(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.class$ = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'class$' field has been set */
    public boolean hasClass$() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'class$' field */
    public CreateFileRequirement.Builder clearClass$() {
      class$ = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'fileDef' field */
    public java.util.List<FileDef> getFileDef() {
      return fileDef;
    }
    
    /** Sets the value of the 'fileDef' field */
    public CreateFileRequirement.Builder setFileDef(java.util.List<FileDef> value) {
      validate(fields()[1], value);
      this.fileDef = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'fileDef' field has been set */
    public boolean hasFileDef() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'fileDef' field */
    public CreateFileRequirement.Builder clearFileDef() {
      fileDef = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public CreateFileRequirement build() {
      try {
        CreateFileRequirement record = new CreateFileRequirement();
        record.class$ = fieldSetFlags()[0] ? this.class$ : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.fileDef = fieldSetFlags()[1] ? this.fileDef : (java.util.List<FileDef>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
